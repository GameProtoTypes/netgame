{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"MapGe",
				"MapGetDataPointerFromCoord"
			],
			[
				"maptilecoords_",
				"map_tilecoords_Q16"
			],
			[
				"NewtonR",
				"NewtonRigidBody"
			],
			[
				"to",
				"toBuyPrintOut"
			],
			[
				"bes",
				"bestBuys"
			],
			[
				"best",
				"bestBuys"
			],
			[
				"total",
				"totalCartStat"
			],
			[
				"tot",
				"totalCartStat"
			],
			[
				"tota",
				"totalJson"
			],
			[
				"ap",
				"append"
			],
			[
				"ne",
				"netwidth"
			],
			[
				"net",
				"netdepth"
			],
			[
				"in",
				"invPart"
			],
			[
				"inv",
				"invPart"
			],
			[
				"item",
				"Items_Needed_Per_Unit"
			],
			[
				"de",
				"default="
			],
			[
				"Gy",
				"GYMServer"
			],
			[
				"geno",
				"genomes"
			],
			[
				"ac",
				"actionSize"
			],
			[
				"Read",
				"ReadFloat"
			],
			[
				"read",
				"ReadInt"
			],
			[
				"num",
				"numGyms"
			],
			[
				"pack",
				"unpack"
			],
			[
				"ran",
				"rand"
			],
			[
				"si",
				"size"
			],
			[
				"ex",
				"except"
			],
			[
				"com",
				"companyName"
			],
			[
				"va",
				"validDistributers"
			],
			[
				"con",
				"convert_dtypes"
			],
			[
				"sub",
				"subMatrixInventoryFetch"
			],
			[
				"st",
				"statePops"
			],
			[
				"Ev",
				"EvaluateSEIR_SDModelErrorP1"
			],
			[
				"ma",
				"maxIterations"
			],
			[
				"sta",
				"stateDataNP"
			],
			[
				"inf",
				"Infinity"
			],
			[
				"sd",
				"stateDataNP"
			],
			[
				"mu",
				"multiply"
			],
			[
				"tra",
				"transpose"
			],
			[
				"exa",
				"expand_dims"
			],
			[
				"mat",
				"matplotlib"
			],
			[
				"inter",
				"interpolatedCollumn"
			],
			[
				"a",
				"axvline"
			],
			[
				"numS",
				"numSamples"
			],
			[
				"param",
				"Params"
			],
			[
				"stat",
				"statePops"
			],
			[
				"state",
				"states"
			],
			[
				"ep",
				"epsilon"
			],
			[
				"ar",
				"array"
			],
			[
				"Ini",
				"InitialParams"
			],
			[
				"ts",
				"tseries"
			],
			[
				"last",
				"lastDay"
			],
			[
				"E",
				"Epsilon"
			],
			[
				"Grou",
				"GroupID\t⟠"
			],
			[
				"tr",
				"translationMap\t⟠"
			],
			[
				"po",
				"position *= 2\t⟠"
			],
			[
				"pu",
				"PushKeys\t★ pro ⟠"
			],
			[
				"OP",
				"OPT_TICK_MULT"
			],
			[
				"outer",
				"outerRefs"
			],
			[
				"ki",
				"kill"
			],
			[
				"pro",
				"processName"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/C/Users/casht/repos/eurorack-beettweek/package_for_github.py",
			"settings":
			{
				"buffer_size": 542,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"paste",
					null,
					"AgAAAKkBAAAAAAAA0QEAAAAAAAAAAAAA0QEAAAAAAADRAQAAAAAAABUAAABDOi9Vc2Vycy9jYXNodC9yZXBvcy8",
					"AQAAAAAAAAABAAAAvgEAAAAAAACpAQAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"paste",
					null,
					"AgAAAFQBAAAAAAAAfAEAAAAAAAAAAAAAfAEAAAAAAAB8AQAAAAAAABkAAABDOlxcVXNlcnNcXGNhc2h0XFxyZXBvc1xc",
					"AQAAAAAAAAABAAAAVAEAAAAAAABtAQAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"left_delete",
					null,
					"AQAAAFYBAAAAAAAAVgEAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAVwEAAAAAAABXAQAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "\\\\"
					},
					"AgAAAFYBAAAAAAAAVwEAAAAAAAAAAAAAVwEAAAAAAABYAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVgEAAAAAAABWAQAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"left_delete",
					null,
					"AQAAAF0BAAAAAAAAXQEAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAXgEAAAAAAABeAQAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "\\\\"
					},
					"AgAAAF0BAAAAAAAAXgEAAAAAAAAAAAAAXgEAAAAAAABfAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXQEAAAAAAABdAQAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"left_delete",
					null,
					"AQAAAGQBAAAAAAAAZAEAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAZQEAAAAAAABlAQAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "\\\\"
					},
					"AgAAAGQBAAAAAAAAZQEAAAAAAAAAAAAAZQEAAAAAAABmAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZAEAAAAAAABkAQAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"left_delete",
					null,
					"AQAAAGsBAAAAAAAAawEAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAbAEAAAAAAABsAQAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "\\\\"
					},
					"AgAAAGsBAAAAAAAAbAEAAAAAAAAAAAAAbAEAAAAAAABtAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAawEAAAAAAABrAQAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"left_delete",
					null,
					"AQAAAH8BAAAAAAAAfwEAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAgAEAAAAAAACAAQAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "\\\\"
					},
					"AgAAAH8BAAAAAAAAgAEAAAAAAAAAAAAAgAEAAAAAAACBAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfwEAAAAAAAB/AQAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"paste",
					null,
					"AgAAAL0BAAAAAAAA5AEAAAAAAAAAAAAA5AEAAAAAAADkAQAAAAAAACgAAABDOi9Vc2Vycy9jYXNodC9yZXBvcy9ldXJvcmFjay1iZWV0dHdlZWsv",
					"AQAAAAAAAAABAAAAvQEAAAAAAADlAQAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "\\"
					},
					"AQAAAOQBAAAAAAAA5QEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5AEAAAAAAADkAQAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"left_delete",
					null,
					"AQAAAOQBAAAAAAAA5AEAAAAAAAABAAAAXA",
					"AQAAAAAAAAABAAAA5QEAAAAAAADlAQAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAOQBAAAAAAAA5QEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5AEAAAAAAADkAQAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAACoBAAAAAAAAKwEAAAAAAAAAAAAAKwEAAAAAAAA3AQAAAAAAAAAAAAA3AQAAAAAAADsBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKgEAAAAAAAAqAQAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"paste",
					null,
					"AQAAADsBAAAAAAAAPwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwEAAAAAAAA7AQAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAD8BAAAAAAAAQAEAAAAAAAAAAAAAQAEAAAAAAABBAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwEAAAAAAAA/AQAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEEBAAAAAAAAQgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQQEAAAAAAABBAQAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"paste",
					null,
					"AQAAAEIBAAAAAAAAjgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQgEAAAAAAABCAQAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAI4BAAAAAAAAjwEAAAAAAAAAAAAAjwEAAAAAAACfAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgEAAAAAAACOAQAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"paste",
					null,
					"AQAAAJ8BAAAAAAAA8gEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnwEAAAAAAACfAQAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					1,
					"paste",
					null,
					"AgAAALQBAAAAAAAA3AEAAAAAAAAAAAAA3AEAAAAAAADcAQAAAAAAAC0AAABDOlxcVXNlcnNcXGNhc2h0XFxyZXBvc1xcZXVyb3JhY2stYmVldHR3ZWVrXFw",
					"AQAAAAAAAAABAAAAtAEAAAAAAADhAQAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					1,
					"left_delete",
					null,
					"AQAAAA0CAAAAAAAADQIAAAAAAABIAAAALnJlcGxhY2UoJ0M6XFxVc2Vyc1xcY2FzaHRcXHJlcG9zXFxldXJvcmFjay1iZWV0dHdlZWtcXCcsICcke1JPT1RfRElSfScp",
					"AQAAAAAAAAABAAAADQIAAAAAAABVAgAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"left_delete",
					null,
					"AQAAAB4CAAAAAAAAHgIAAAAAAABUAAAAIGZvdXQud3JpdGUobGluZS5yZXBsYWNlKCdDOi9Vc2Vycy9jYXNodC9yZXBvcy9ldXJvcmFjay1iZWV0dHdlZWsvJywgJyR7Uk9PVF9ESVJ9Jykp",
					"AQAAAAAAAAABAAAAcgIAAAAAAAAeAgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/C/Users/casht/repos/eurorack-beettweek/setup.py",
			"settings":
			{
				"buffer_size": 527,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					41,
					1,
					"left_delete",
					null,
					"AQAAAJwBAAAAAAAAnAEAAAAAAAAUAAAAXFxCZWV0VHdlZWstRmlybXdhcmU",
					"AQAAAAAAAAABAAAAsAEAAAAAAACcAQAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"paste",
					null,
					"AQAAAKQBAAAAAAAAvQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApAEAAAAAAACkAQAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"paste",
					null,
					"AQAAAJgBAAAAAAAArAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmAEAAAAAAACYAQAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAJgBAAAAAAAAmQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmAEAAAAAAACYAQAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"left_delete",
					null,
					"AQAAANIBAAAAAAAA0gEAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA0wEAAAAAAADTAQAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					2,
					"left_delete",
					null,
					"AgAAALIBAAAAAAAAsgEAAAAAAAABAAAAXLEBAAAAAAAAsQEAAAAAAAABAAAAXA",
					"AQAAAAAAAAABAAAAswEAAAAAAACzAQAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAALEBAAAAAAAAsgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsQEAAAAAAACxAQAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"left_delete",
					null,
					"AQAAALgBAAAAAAAAuAEAAAAAAAAZAAAAcGF0aC5yZXBsYWNlKG9zLnNlcCwgJy8nKQ",
					"AQAAAAAAAAABAAAA0QEAAAAAAAC4AQAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAFUBAAAAAAAAVgEAAAAAAAAAAAAAVgEAAAAAAABiAQAAAAAAAAAAAABiAQAAAAAAAGYBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVQEAAAAAAABVAQAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": "line"
					},
					"BAAAAGYBAAAAAAAAZwEAAAAAAAAAAAAAZwEAAAAAAABoAQAAAAAAAAAAAABoAQAAAAAAAGkBAAAAAAAAAAAAAGkBAAAAAAAAagEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZgEAAAAAAABmAQAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAGoBAAAAAAAAawEAAAAAAAAAAAAAawEAAAAAAABsAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAagEAAAAAAABqAQAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGwBAAAAAAAAbQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAEAAAAAAABsAQAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"paste",
					null,
					"AQAAAG0BAAAAAAAAsAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQEAAAAAAABtAQAAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": "line"
					},
					"BQAAAMwBAAAAAAAAzQEAAAAAAAAAAAAAzQEAAAAAAADNAQAAAAAAAEMAAABsaW5lLnJlcGxhY2UoJyR7Uk9PVF9ESVJ9Jywgb3MuZ2V0Y3dkKCkucmVwbGFjZShvcy5zZXAsICcvJykgKyAiLyIpzQEAAAAAAADOAQAAAAAAAAAAAADOAQAAAAAAAM8BAAAAAAAAAAAAAM8BAAAAAAAA0AEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzAEAAAAAAAAPAgAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALABAAAAAAAAsQEAAAAAAAAAAAAAsQEAAAAAAADBAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsAEAAAAAAACwAQAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": "line"
					},
					"BAAAAMEBAAAAAAAAwgEAAAAAAAAAAAAAwgEAAAAAAADDAQAAAAAAAAAAAADDAQAAAAAAAMQBAAAAAAAAAAAAAMQBAAAAAAAAxQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwQEAAAAAAADBAQAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAMUBAAAAAAAAxgEAAAAAAAAAAAAAxgEAAAAAAADHAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxQEAAAAAAADFAQAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": " line"
					},
					"BQAAAMcBAAAAAAAAyAEAAAAAAAAAAAAAyAEAAAAAAADJAQAAAAAAAAAAAADJAQAAAAAAAMoBAAAAAAAAAAAAAMoBAAAAAAAAywEAAAAAAAAAAAAAywEAAAAAAADMAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxwEAAAAAAADHAQAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": " ."
					},
					"AgAAAMwBAAAAAAAAzQEAAAAAAAAAAAAAzQEAAAAAAADOAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzAEAAAAAAADMAQAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					2,
					"left_delete",
					null,
					"AgAAAM0BAAAAAAAAzQEAAAAAAAABAAAALswBAAAAAAAAzAEAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAzgEAAAAAAADOAQAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": ".replace"
					},
					"CAAAAMwBAAAAAAAAzQEAAAAAAAAAAAAAzQEAAAAAAADOAQAAAAAAAAAAAADOAQAAAAAAAM8BAAAAAAAAAAAAAM8BAAAAAAAA0AEAAAAAAAAAAAAA0AEAAAAAAADRAQAAAAAAAAAAAADRAQAAAAAAANIBAAAAAAAAAAAAANIBAAAAAAAA0wEAAAAAAAAAAAAA0wEAAAAAAADUAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzAEAAAAAAADMAQAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANQBAAAAAAAA1QEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1AEAAAAAAADUAQAAAAAAAAAAAAAAAPC/"
				],
				[
					119,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANUBAAAAAAAA1wEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1QEAAAAAAADVAQAAAAAAAAAAAAAAAPC/"
				],
				[
					121,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAANUBAAAAAAAA1QEAAAAAAAABAAAAKNUBAAAAAAAA1QEAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAA1gEAAAAAAADWAQAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"left_delete",
					null,
					"AQAAANQBAAAAAAAA1AEAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA1QEAAAAAAADVAQAAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANQBAAAAAAAA1gEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1AEAAAAAAADUAQAAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAANUBAAAAAAAA1wEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1QEAAAAAAADVAQAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": "\\\\"
					},
					"AgAAANYBAAAAAAAA1wEAAAAAAAAAAAAA1wEAAAAAAADYAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1gEAAAAAAADWAQAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAANkBAAAAAAAA2gEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2QEAAAAAAADZAQAAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAANoBAAAAAAAA2wEAAAAAAAAAAAAA2wEAAAAAAADrAQAAAAAAAAAAAADbAQAAAAAAANsBAAAAAAAAEAAAACAgICAgICAgICAgICAgICDbAQAAAAAAAO8BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2gEAAAAAAADaAQAAAAAAAAAAAAAAAPC/"
				],
				[
					132,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAANoBAAAAAAAA3AEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2gEAAAAAAADaAQAAAAAAAAAAAAAAAPC/"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAANsBAAAAAAAA3AEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2wEAAAAAAADbAQAAAAAAAAAAAAAAAPC/"
				],
				[
					135,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAN0BAAAAAAAA3gEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QEAAAAAAADdAQAAAAAAAAAAAAAAAPC/"
				],
				[
					136,
					1,
					"left_delete",
					null,
					"AQAAAN0BAAAAAAAA3QEAAAAAAAABAAAAXw",
					"AQAAAAAAAAABAAAA3gEAAAAAAADeAQAAAAAAAAAAAAAAAPC/"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAN0BAAAAAAAA3gEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QEAAAAAAADdAQAAAAAAAAAAAAAAAPC/"
				],
				[
					144,
					1,
					"left_delete",
					null,
					"AQAAAPMBAAAAAAAA8wEAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAA9AEAAAAAAAD0AQAAAAAAAAAAAAAAAPC/"
				],
				[
					151,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAFUBAAAAAAAAVgEAAAAAAAAAAAAAVgEAAAAAAABiAQAAAAAAAAAAAABiAQAAAAAAAGYBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVQEAAAAAAABVAQAAAAAAAAAAAAAAAPC/"
				],
				[
					160,
					1,
					"left_delete",
					null,
					"AgAAAB0BAAAAAAAAHQEAAAAAAAAJAAAALmRlcGxveWVkTQEAAAAAAABNAQAAAAAAABAAAAAgICAgICAgICAgICAgICAg",
					"AQAAAAAAAAABAAAAJgEAAAAAAAAdAQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<projectDescription>\n\t<name>DSPBoardH7</name>\n\t<comment></comment>\n\t<projects>\n\t</projects>\n\t<buildSpec>\n\t\t<buildCommand>\n\t\t\t<name>org.eclipse.cdt.managedbuilder.core.genmakebuilder</name>\n\t\t\t<triggers>clean,full,incremental,</triggers>\n\t\t\t<arguments>\n\t\t\t</arguments>\n\t\t</buildCommand>\n\t\t<buildCommand>\n\t\t\t<name>org.eclipse.cdt.managedbuilder.core.ScannerConfigBuilder</name>\n\t\t\t<triggers>full,incremental,</triggers>\n\t\t\t<arguments>\n\t\t\t</arguments>\n\t\t</buildCommand>\n\t</buildSpec>\n\t<natures>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCUProjectNature</nature>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCUCubeProjectNature</nature>\n\t\t<nature>org.eclipse.cdt.core.cnature</nature>\n\t\t<nature>org.eclipse.cdt.core.ccnature</nature>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCUCubeIdeServicesRevAev2ProjectNature</nature>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCUAdvancedStructureProjectNature</nature>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCUEndUserDisabledTrustZoneProjectNature</nature>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCUSingleCpuProjectNature</nature>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCURootProjectNature</nature>\n\t\t<nature>org.eclipse.cdt.managedbuilder.core.managedBuildNature</nature>\n\t\t<nature>org.eclipse.cdt.managedbuilder.core.ScannerConfigNature</nature>\n\t</natures>\n\t<linkedResources>\n\t\t<link>\n\t\t\t<name>MathExtras_DSP</name>\n\t\t\t<type>2</type>\n\t\t\t<location>${ROOT_DIR}BeetTweek-Firmware/MathExtras_DSP</location>\n\t\t</link>\n\t\t<link>\n\t\t\t<name>STM32Utilities</name>\n\t\t\t<type>2</type>\n\t\t\t<location>${ROOT_DIR}BeetTweek-Firmware/STM32Utilities</location>\n\t\t</link>\n\t\t<link>\n\t\t\t<name>SharedSource</name>\n\t\t\t<type>2</type>\n\t\t\t<location>${ROOT_DIR}BeetTweek-Firmware/SharedSource</location>\n\t\t</link>\n\t</linkedResources>\n</projectDescription>\n",
			"file": "/C/Users/casht/Desktop/TESTFOLDER/BeetTweek-Firmware/DSPBoardH7/.project.templated",
			"file_size": 1815,
			"file_write_time": 133124816775419926,
			"settings":
			{
				"buffer_size": 1764,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					13,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYDgAAPD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHByb2plY3REZXNjcmlwdGlvbj4KPHByb2plY3REZXNjcmlwdGlvbj4KCTxuYW1lPkRTUEJvYXJkSDc8L25hbWU+Cgk8bmFtZT5EU1BCb2FyZEg3PC9uYW1lPgoJPGNvbW1lbnQ+PC9jb21tZW50PgoJPGNvbW1lbnQ+PC9jb21tZW50PgoJPHByb2plY3RzPgoJPHByb2plY3RzPgoJPC9wcm9qZWN0cz4KCTwvcHJvamVjdHM+Cgk8YnVpbGRTcGVjPgoJPGJ1aWxkU3BlYz4KCQk8YnVpbGRDb21tYW5kPgoJCTxidWlsZENvbW1hbmQ+CgkJCTxuYW1lPm9yZy5lY2xpcHNlLmNkdC5tYW5hZ2VkYnVpbGRlci5jb3JlLmdlbm1ha2VidWlsZGVyPC9uYW1lPgoJCQk8bmFtZT5vcmcuZWNsaXBzZS5jZHQubWFuYWdlZGJ1aWxkZXIuY29yZS5nZW5tYWtlYnVpbGRlcjwvbmFtZT4KCQkJPHRyaWdnZXJzPmNsZWFuLGZ1bGwsaW5jcmVtZW50YWwsPC90cmlnZ2Vycz4KCQkJPHRyaWdnZXJzPmNsZWFuLGZ1bGwsaW5jcmVtZW50YWwsPC90cmlnZ2Vycz4KCQkJPGFyZ3VtZW50cz4KCQkJPGFyZ3VtZW50cz4KCQkJPC9hcmd1bWVudHM+CgkJCTwvYXJndW1lbnRzPgoJCTwvYnVpbGRDb21tYW5kPgoJCTwvYnVpbGRDb21tYW5kPgoJCTxidWlsZENvbW1hbmQ+CgkJPGJ1aWxkQ29tbWFuZD4KCQkJPG5hbWU+b3JnLmVjbGlwc2UuY2R0Lm1hbmFnZWRidWlsZGVyLmNvcmUuU2Nhbm5lckNvbmZpZ0J1aWxkZXI8L25hbWU+CgkJCTxuYW1lPm9yZy5lY2xpcHNlLmNkdC5tYW5hZ2VkYnVpbGRlci5jb3JlLlNjYW5uZXJDb25maWdCdWlsZGVyPC9uYW1lPgoJCQk8dHJpZ2dlcnM+ZnVsbCxpbmNyZW1lbnRhbCw8L3RyaWdnZXJzPgoJCQk8dHJpZ2dlcnM+ZnVsbCxpbmNyZW1lbnRhbCw8L3RyaWdnZXJzPgoJCQk8YXJndW1lbnRzPgoJCQk8YXJndW1lbnRzPgoJCQk8L2FyZ3VtZW50cz4KCQkJPC9hcmd1bWVudHM+CgkJPC9idWlsZENvbW1hbmQ+CgkJPC9idWlsZENvbW1hbmQ+Cgk8L2J1aWxkU3BlYz4KCTwvYnVpbGRTcGVjPgoJPG5hdHVyZXM+Cgk8bmF0dXJlcz4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVUHJvamVjdE5hdHVyZTwvbmF0dXJlPgoJCTxuYXR1cmU+Y29tLnN0LnN0bTMyY3ViZS5pZGUubWN1Lk1DVUN1YmVQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVQ3ViZVByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5jb3JlLmNuYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5jb3JlLmNuYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5jb3JlLmNjbmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5vcmcuZWNsaXBzZS5jZHQuY29yZS5jY25hdHVyZTwvbmF0dXJlPgoJCTxuYXR1cmU+Y29tLnN0LnN0bTMyY3ViZS5pZGUubWN1Lk1DVUN1YmVJZGVTZXJ2aWNlc1JldkFldjJQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVQ3ViZUlkZVNlcnZpY2VzUmV2QWV2MlByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VBZHZhbmNlZFN0cnVjdHVyZVByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VBZHZhbmNlZFN0cnVjdHVyZVByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VFbmRVc2VyRGlzYWJsZWRUcnVzdFpvbmVQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVRW5kVXNlckRpc2FibGVkVHJ1c3Rab25lUHJvamVjdE5hdHVyZTwvbmF0dXJlPgoJCTxuYXR1cmU+Y29tLnN0LnN0bTMyY3ViZS5pZGUubWN1Lk1DVVNpbmdsZUNwdVByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VTaW5nbGVDcHVQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVUm9vdFByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VSb290UHJvamVjdE5hdHVyZTwvbmF0dXJlPgoJCTxuYXR1cmU+b3JnLmVjbGlwc2UuY2R0Lm1hbmFnZWRidWlsZGVyLmNvcmUubWFuYWdlZEJ1aWxkTmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5vcmcuZWNsaXBzZS5jZHQubWFuYWdlZGJ1aWxkZXIuY29yZS5tYW5hZ2VkQnVpbGROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5tYW5hZ2VkYnVpbGRlci5jb3JlLlNjYW5uZXJDb25maWdOYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5tYW5hZ2VkYnVpbGRlci5jb3JlLlNjYW5uZXJDb25maWdOYXR1cmU8L25hdHVyZT4KCTwvbmF0dXJlcz4KCTwvbmF0dXJlcz4KCTxsaW5rZWRSZXNvdXJjZXM+Cgk8bGlua2VkUmVzb3VyY2VzPgoJCTxsaW5rPgoJCTxsaW5rPgoJCQk8bmFtZT5NYXRoRXh0cmFzX0RTUDwvbmFtZT4KCQkJPG5hbWU+TWF0aEV4dHJhc19EU1A8L25hbWU+CgkJCTx0eXBlPjI8L3R5cGU+CgkJCTx0eXBlPjI8L3R5cGU+CgkJCTxsb2NhdGlvbj5DOi9Vc2Vycy9jYXNodC9yZXBvcy9ldXJvcmFjay1iZWV0dHdlZWsvQmVldFR3ZWVrLUZpcm13YXJlL01hdGhFeHRyYXNfRFNQPC9sb2NhdGlvbj4KCQkJPGxvY2F0aW9uPiR7Uk9PVF9ESVJ9ZXVyb3JhY2stYmVldHR3ZWVrL0JlZXRUd2Vlay1GaXJtd2FyZS9NYXRoRXh0cmFzX0RTUDwvbG9jYXRpb24+CgkJPC9saW5rPgoJCTwvbGluaz4KCQk8bGluaz4KCQk8bGluaz4KCQkJPG5hbWU+U1RNMzJVdGlsaXRpZXM8L25hbWU+CgkJCTxuYW1lPlNUTTMyVXRpbGl0aWVzPC9uYW1lPgoJCQk8dHlwZT4yPC90eXBlPgoJCQk8dHlwZT4yPC90eXBlPgoJCQk8bG9jYXRpb24+QzovVXNlcnMvY2FzaHQvcmVwb3MvZXVyb3JhY2stYmVldHR3ZWVrL0JlZXRUd2Vlay1GaXJtd2FyZS9TVE0zMlV0aWxpdGllczwvbG9jYXRpb24+CgkJCTxsb2NhdGlvbj4ke1JPT1RfRElSfWV1cm9yYWNrLWJlZXR0d2Vlay9CZWV0VHdlZWstRmlybXdhcmUvU1RNMzJVdGlsaXRpZXM8L2xvY2F0aW9uPgoJCTwvbGluaz4KCQk8L2xpbms+CgkJPGxpbms+CgkJPGxpbms+CgkJCTxuYW1lPlNoYXJlZFNvdXJjZTwvbmFtZT4KCQkJPG5hbWU+U2hhcmVkU291cmNlPC9uYW1lPgoJCQk8dHlwZT4yPC90eXBlPgoJCQk8dHlwZT4yPC90eXBlPgoJCQk8bG9jYXRpb24+QzovVXNlcnMvY2FzaHQvcmVwb3MvZXVyb3JhY2stYmVldHR3ZWVrL0JlZXRUd2Vlay1GaXJtd2FyZS9TaGFyZWRTb3VyY2U8L2xvY2F0aW9uPgoJCQk8bG9jYXRpb24+JHtST09UX0RJUn1ldXJvcmFjay1iZWV0dHdlZWsvQmVldFR3ZWVrLUZpcm13YXJlL1NoYXJlZFNvdXJjZTwvbG9jYXRpb24+CgkJPC9saW5rPgoJCTwvbGluaz4KCTwvbGlua2VkUmVzb3VyY2VzPgoJPC9saW5rZWRSZXNvdXJjZXM+CjwvcHJvamVjdERlc2NyaXB0aW9uPgo8L3Byb2plY3REZXNjcmlwdGlvbj4KAAAAAAAAAAAfDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQwAAAAAAAAJDAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAfDgAAPD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHByb2plY3REZXNjcmlwdGlvbj4KPHByb2plY3REZXNjcmlwdGlvbj4KCTxuYW1lPkRTUEJvYXJkSDc8L25hbWU+Cgk8bmFtZT5EU1BCb2FyZEg3PC9uYW1lPgoJPGNvbW1lbnQ+PC9jb21tZW50PgoJPGNvbW1lbnQ+PC9jb21tZW50PgoJPHByb2plY3RzPgoJPHByb2plY3RzPgoJPC9wcm9qZWN0cz4KCTwvcHJvamVjdHM+Cgk8YnVpbGRTcGVjPgoJPGJ1aWxkU3BlYz4KCQk8YnVpbGRDb21tYW5kPgoJCTxidWlsZENvbW1hbmQ+CgkJCTxuYW1lPm9yZy5lY2xpcHNlLmNkdC5tYW5hZ2VkYnVpbGRlci5jb3JlLmdlbm1ha2VidWlsZGVyPC9uYW1lPgoJCQk8bmFtZT5vcmcuZWNsaXBzZS5jZHQubWFuYWdlZGJ1aWxkZXIuY29yZS5nZW5tYWtlYnVpbGRlcjwvbmFtZT4KCQkJPHRyaWdnZXJzPmNsZWFuLGZ1bGwsaW5jcmVtZW50YWwsPC90cmlnZ2Vycz4KCQkJPHRyaWdnZXJzPmNsZWFuLGZ1bGwsaW5jcmVtZW50YWwsPC90cmlnZ2Vycz4KCQkJPGFyZ3VtZW50cz4KCQkJPGFyZ3VtZW50cz4KCQkJPC9hcmd1bWVudHM+CgkJCTwvYXJndW1lbnRzPgoJCTwvYnVpbGRDb21tYW5kPgoJCTwvYnVpbGRDb21tYW5kPgoJCTxidWlsZENvbW1hbmQ+CgkJPGJ1aWxkQ29tbWFuZD4KCQkJPG5hbWU+b3JnLmVjbGlwc2UuY2R0Lm1hbmFnZWRidWlsZGVyLmNvcmUuU2Nhbm5lckNvbmZpZ0J1aWxkZXI8L25hbWU+CgkJCTxuYW1lPm9yZy5lY2xpcHNlLmNkdC5tYW5hZ2VkYnVpbGRlci5jb3JlLlNjYW5uZXJDb25maWdCdWlsZGVyPC9uYW1lPgoJCQk8dHJpZ2dlcnM+ZnVsbCxpbmNyZW1lbnRhbCw8L3RyaWdnZXJzPgoJCQk8dHJpZ2dlcnM+ZnVsbCxpbmNyZW1lbnRhbCw8L3RyaWdnZXJzPgoJCQk8YXJndW1lbnRzPgoJCQk8YXJndW1lbnRzPgoJCQk8L2FyZ3VtZW50cz4KCQkJPC9hcmd1bWVudHM+CgkJPC9idWlsZENvbW1hbmQ+CgkJPC9idWlsZENvbW1hbmQ+Cgk8L2J1aWxkU3BlYz4KCTwvYnVpbGRTcGVjPgoJPG5hdHVyZXM+Cgk8bmF0dXJlcz4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVUHJvamVjdE5hdHVyZTwvbmF0dXJlPgoJCTxuYXR1cmU+Y29tLnN0LnN0bTMyY3ViZS5pZGUubWN1Lk1DVUN1YmVQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVQ3ViZVByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5jb3JlLmNuYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5jb3JlLmNuYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5jb3JlLmNjbmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5vcmcuZWNsaXBzZS5jZHQuY29yZS5jY25hdHVyZTwvbmF0dXJlPgoJCTxuYXR1cmU+Y29tLnN0LnN0bTMyY3ViZS5pZGUubWN1Lk1DVUN1YmVJZGVTZXJ2aWNlc1JldkFldjJQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVQ3ViZUlkZVNlcnZpY2VzUmV2QWV2MlByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VBZHZhbmNlZFN0cnVjdHVyZVByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VBZHZhbmNlZFN0cnVjdHVyZVByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VFbmRVc2VyRGlzYWJsZWRUcnVzdFpvbmVQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVRW5kVXNlckRpc2FibGVkVHJ1c3Rab25lUHJvamVjdE5hdHVyZTwvbmF0dXJlPgoJCTxuYXR1cmU+Y29tLnN0LnN0bTMyY3ViZS5pZGUubWN1Lk1DVVNpbmdsZUNwdVByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VTaW5nbGVDcHVQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVUm9vdFByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VSb290UHJvamVjdE5hdHVyZTwvbmF0dXJlPgoJCTxuYXR1cmU+b3JnLmVjbGlwc2UuY2R0Lm1hbmFnZWRidWlsZGVyLmNvcmUubWFuYWdlZEJ1aWxkTmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5vcmcuZWNsaXBzZS5jZHQubWFuYWdlZGJ1aWxkZXIuY29yZS5tYW5hZ2VkQnVpbGROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5tYW5hZ2VkYnVpbGRlci5jb3JlLlNjYW5uZXJDb25maWdOYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5tYW5hZ2VkYnVpbGRlci5jb3JlLlNjYW5uZXJDb25maWdOYXR1cmU8L25hdHVyZT4KCTwvbmF0dXJlcz4KCTwvbmF0dXJlcz4KCTxsaW5rZWRSZXNvdXJjZXM+Cgk8bGlua2VkUmVzb3VyY2VzPgoJCTxsaW5rPgoJCTxsaW5rPgoJCQk8bmFtZT5NYXRoRXh0cmFzX0RTUDwvbmFtZT4KCQkJPG5hbWU+TWF0aEV4dHJhc19EU1A8L25hbWU+CgkJCTx0eXBlPjI8L3R5cGU+CgkJCTx0eXBlPjI8L3R5cGU+CgkJCTxsb2NhdGlvbj5DOi9Vc2Vycy9jYXNodC9yZXBvcy9ldXJvcmFjay1iZWV0dHdlZWsvQmVldFR3ZWVrLUZpcm13YXJlL01hdGhFeHRyYXNfRFNQPC9sb2NhdGlvbj4KCQkJPGxvY2F0aW9uPiR7Uk9PVF9ESVJ9QmVldFR3ZWVrLUZpcm13YXJlL01hdGhFeHRyYXNfRFNQPC9sb2NhdGlvbj4KCQk8L2xpbms+CgkJPC9saW5rPgoJCTxsaW5rPgoJCTxsaW5rPgoJCQk8bmFtZT5TVE0zMlV0aWxpdGllczwvbmFtZT4KCQkJPG5hbWU+U1RNMzJVdGlsaXRpZXM8L25hbWU+CgkJCTx0eXBlPjI8L3R5cGU+CgkJCTx0eXBlPjI8L3R5cGU+CgkJCTxsb2NhdGlvbj5DOi9Vc2Vycy9jYXNodC9yZXBvcy9ldXJvcmFjay1iZWV0dHdlZWsvQmVldFR3ZWVrLUZpcm13YXJlL1NUTTMyVXRpbGl0aWVzPC9sb2NhdGlvbj4KCQkJPGxvY2F0aW9uPiR7Uk9PVF9ESVJ9QmVldFR3ZWVrLUZpcm13YXJlL1NUTTMyVXRpbGl0aWVzPC9sb2NhdGlvbj4KCQk8L2xpbms+CgkJPC9saW5rPgoJCTxsaW5rPgoJCTxsaW5rPgoJCQk8bmFtZT5TaGFyZWRTb3VyY2U8L25hbWU+CgkJCTxuYW1lPlNoYXJlZFNvdXJjZTwvbmFtZT4KCQkJPHR5cGU+MjwvdHlwZT4KCQkJPHR5cGU+MjwvdHlwZT4KCQkJPGxvY2F0aW9uPkM6L1VzZXJzL2Nhc2h0L3JlcG9zL2V1cm9yYWNrLWJlZXR0d2Vlay9CZWV0VHdlZWstRmlybXdhcmUvU2hhcmVkU291cmNlPC9sb2NhdGlvbj4KCQkJPGxvY2F0aW9uPiR7Uk9PVF9ESVJ9QmVldFR3ZWVrLUZpcm13YXJlL1NoYXJlZFNvdXJjZTwvbG9jYXRpb24+CgkJPC9saW5rPgoJCTwvbGluaz4KCTwvbGlua2VkUmVzb3VyY2VzPgoJPC9saW5rZWRSZXNvdXJjZXM+CjwvcHJvamVjdERlc2NyaXB0aW9uPgo8L3Byb2plY3REZXNjcmlwdGlvbj4KAAAAAAAAAADkBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQoAAAAAAABRCgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<?fileVersion 4.0.0?><cproject storage_type_id=\"org.eclipse.cdt.core.XmlProjectDescriptionStorage\">\n\t<storageModule moduleId=\"org.eclipse.cdt.core.settings\">\n\t\t<cconfiguration id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.debug.1352964405\">\n\t\t\t<storageModule buildSystemId=\"org.eclipse.cdt.managedbuilder.core.configurationDataProvider\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.debug.1352964405\" moduleId=\"org.eclipse.cdt.core.settings\" name=\"Debug\">\n\t\t\t\t<externalSettings/>\n\t\t\t\t<extensions>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.ELF\" point=\"org.eclipse.cdt.core.BinaryParser\"/>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.GASErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.GmakeErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.GLDErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.CWDLocator\" point=\"org.eclipse.cdt.core.ErrorParser\"/>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.GCCErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>\n\t\t\t\t</extensions>\n\t\t\t</storageModule>\n\t\t\t<storageModule moduleId=\"cdtBuildSystem\" version=\"4.0.0\">\n\t\t\t\t<configuration artifactExtension=\"elf\" artifactName=\"${ProjName}\" buildArtefactType=\"org.eclipse.cdt.build.core.buildArtefactType.exe\" buildProperties=\"org.eclipse.cdt.build.core.buildArtefactType=org.eclipse.cdt.build.core.buildArtefactType.exe,org.eclipse.cdt.build.core.buildType=org.eclipse.cdt.build.core.buildType.debug\" cleanCommand=\"rm -rf\" description=\"\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.debug.1352964405\" name=\"Debug\" parent=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.debug\">\n\t\t\t\t\t<folderInfo id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.debug.1352964405.\" name=\"/\" resourcePath=\"\">\n\t\t\t\t\t\t<toolChain id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.toolchain.exe.debug.1501408724\" name=\"MCU ARM GCC\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.toolchain.exe.debug\">\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.option.internal.toolchain.type.1360484891\" name=\"Internal Toolchain Type\" superClass=\"com.st.stm32cube.ide.mcu.option.internal.toolchain.type\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.toolchain.base.gnu-tools-for-stm32\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.option.internal.toolchain.version.1571653087\" name=\"Internal Toolchain Version\" superClass=\"com.st.stm32cube.ide.mcu.option.internal.toolchain.version\" useByScannerDiscovery=\"false\" value=\"7-2018-q2-update\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_mcu.2026928710\" name=\"MCU\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_mcu\" useByScannerDiscovery=\"false\" value=\"STM32H743ZITx\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_cpuid.34148941\" name=\"CPU\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_cpuid\" useByScannerDiscovery=\"false\" value=\"0\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_coreid.1912190444\" name=\"Core\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_coreid\" useByScannerDiscovery=\"false\" value=\"0\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.fpu.1626930749\" name=\"Floating-point unit\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.fpu\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.fpu.value.fpv5-d16\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.floatabi.1268070958\" name=\"Floating-point ABI\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.floatabi\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.floatabi.value.hard\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_board.503627018\" name=\"Board\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_board\" useByScannerDiscovery=\"false\" value=\"genericBoard\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.defaults.527708963\" name=\"Defaults\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.defaults\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.common.services.build.inputs.revA.1.0.5 || Debug || true || Executable || com.st.stm32cube.ide.mcu.gnu.managedbuild.toolchain.base.gnu-tools-for-stm32 || STM32H743ZITx || 0 || 0 || arm-none-eabi- || ${gnu_tools_for_stm32_compiler_path} || ../FATFS/App | ../USB_DEVICE/Target | ../Drivers/CMSIS/Include | ../Core/Inc | ../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc | ../USB_DEVICE/App | ../Drivers/STM32H7xx_HAL_Driver/Inc/Legacy | ../Drivers/CMSIS/Device/ST/STM32H7xx/Include | ../FATFS/Target | ../Middlewares/ST/STM32_USB_Device_Library/Core/Inc | ../Middlewares/Third_Party/FatFs/src | ../Drivers/STM32H7xx_HAL_Driver/Inc ||  ||  || USE_HAL_DRIVER | STM32H743xx ||  || Drivers | Core/Startup | Middlewares | Core | FATFS | USB_DEVICE ||  ||  || ${workspace_loc:/${ProjName}/STM32H743ZITX_FLASH.ld} || true || NonSecure ||  || secure_nsclib.o ||  || None || \" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.nanoprintffloat.276355721\" name=\"Use float with printf from newlib-nano (-u _printf_float)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.nanoprintffloat\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.nanoscanffloat.156920194\" name=\"Use float with scanf from newlib-nano (-u _scanf_float)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.nanoscanffloat\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.option.internal.toolchain.default.636509716\" name=\"Internal Toolchain Default\" superClass=\"com.st.stm32cube.ide.mcu.option.internal.toolchain.default\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.toolchain_path.406698826\" name=\"Path\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.toolchain_path\" useByScannerDiscovery=\"false\" value=\"${gnu_tools_for_stm32_compiler_path}\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.runtimelibrary_cpp.639169732\" name=\"Runtime library\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.runtimelibrary_cpp\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.runtimelibrary_cpp.value.nano_c_nano_cpp\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.toolchain.422556151\" name=\"Toolchain\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.toolchain\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.toolchain.value.workspace\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertbinary.860620720\" name=\"Convert to binary file (-O binary)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertbinary\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.converthex.114324679\" name=\"Convert to Intel Hex file (-O ihex)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.converthex\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertsrec.308549926\" name=\"Convert to Motorola S-record file (-O srec)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertsrec\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertverilog.1058013949\" name=\"Convert to Verilog file (-O verilog)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertverilog\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertsymbolsrec.617183855\" name=\"Convert to Motorola S-record (symbols) file (-O symbolsrec)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertsymbolsrec\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<targetPlatform archList=\"all\" binaryParser=\"org.eclipse.cdt.core.ELF\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.targetplatform.1027248553\" isAbstract=\"false\" osList=\"all\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.targetplatform\"/>\n\t\t\t\t\t\t\t<builder buildPath=\"${workspace_loc:/DSPBoardH7}/Debug\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.builder.1841337671\" keepEnvironmentInBuildfile=\"false\" managedBuildOn=\"true\" name=\"Gnu Make Builder\" parallelBuildOn=\"true\" parallelizationNumber=\"unlimited\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.builder\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.1792406732\" name=\"MCU GCC Assembler\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler\">\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.option.debuglevel.661213942\" name=\"Debug level\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.option.debuglevel\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.option.debuglevel.value.g3\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<option IS_BUILTIN_EMPTY=\"false\" IS_VALUE_EMPTY=\"false\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.option.includepaths.1474470235\" name=\"Include paths (-I)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.option.includepaths\" useByScannerDiscovery=\"false\" valueType=\"includePath\">\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;${ROOT_DIR}BeetTweek-Firmware\\torqueknob\\BeetTweek-Firmware\\STM32Utilities\\Inc&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;${ROOT_DIR}BeetTweek-Firmware\\torqueknob\\API&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/CMSIS/DSP/Include\"/>\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t<option IS_BUILTIN_EMPTY=\"false\" IS_VALUE_EMPTY=\"false\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.option.definedsymbols.800260935\" name=\"Define symbols (-D)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.option.definedsymbols\" useByScannerDiscovery=\"false\" valueType=\"definedSymbols\">\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"ARM_MATH_CM7\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"__FPU_PRESENT\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"DEBUG\"/>\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t<inputType id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.input.1559606435\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.input\"/>\n\t\t\t\t\t\t\t</tool>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.1386882065\" name=\"MCU GCC Compiler\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler\">\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.debuglevel.517749863\" name=\"Debug level\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.debuglevel\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.debuglevel.value.g3\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.optimization.level.2032474334\" name=\"Optimization level\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.optimization.level\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.optimization.level.value.o0\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<option IS_BUILTIN_EMPTY=\"false\" IS_VALUE_EMPTY=\"false\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.definedsymbols.617941272\" name=\"Define symbols (-D)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.definedsymbols\" useByScannerDiscovery=\"false\" valueType=\"definedSymbols\">\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"USE_HAL_DRIVER\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"__FPU_PRESENT\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"ARM_MATH_CM7\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"STM32H743xx\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"DEBUG\"/>\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t<option IS_BUILTIN_EMPTY=\"false\" IS_VALUE_EMPTY=\"false\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.includepaths.859655993\" name=\"Include paths (-I)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.includepaths\" useByScannerDiscovery=\"false\" valueType=\"includePath\">\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Core/Inc\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/STM32H7xx_HAL_Driver/Inc\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/STM32H7xx_HAL_Driver/Inc/Legacy\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/CMSIS/Device/ST/STM32H7xx/Include\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/CMSIS/Include\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/CMSIS/DSP/Include\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;${ROOT_DIR}BeetTweek-Firmware\\eurorack-beettweek\\BeetTweek-Firmware\\STM32Utilities\\Inc&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;${ROOT_DIR}BeetTweek-Firmware\\eurorack-beettweek\\BeetTweek-Firmware\\SharedSource&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;${ROOT_DIR}BeetTweek-Firmware\\eurorack-beettweek\\API&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../FATFS/Target\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../FATFS/App\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Middlewares/Third_Party/FatFs/src\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../USB_DEVICE/App\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../USB_DEVICE/Target\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\"/>\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.fnostrictaliasing.1521332604\" name=\"Disable &quot;strict aliasing&quot; optimization (-fno-strict-aliasing)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.fnostrictaliasing\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t\t<inputType id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.input.c.1930849222\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.input.c\"/>\n\t\t\t\t\t\t\t</tool>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.656727419\" name=\"MCU G++ Compiler\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler\">\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.debuglevel.61377182\" name=\"Debug level\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.debuglevel\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.debuglevel.value.g3\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.optimization.level.1061126626\" name=\"Optimization level\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.optimization.level\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.optimization.level.value.o0\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<option IS_BUILTIN_EMPTY=\"false\" IS_VALUE_EMPTY=\"false\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.definedsymbols.2054572015\" name=\"Define symbols (-D)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.definedsymbols\" useByScannerDiscovery=\"false\" valueType=\"definedSymbols\">\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"USE_HAL_DRIVER\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"__FPU_PRESENT\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"ARM_MATH_CM7\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"STM32H743xx\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"DEBUG\"/>\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t<option IS_BUILTIN_EMPTY=\"false\" IS_VALUE_EMPTY=\"false\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.includepaths.776108346\" name=\"Include paths (-I)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.includepaths\" useByScannerDiscovery=\"false\" valueType=\"includePath\">\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Core/Inc\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/STM32H7xx_HAL_Driver/Inc\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/STM32H7xx_HAL_Driver/Inc/Legacy\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/CMSIS/Device/ST/STM32H7xx/Include\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/CMSIS/Include\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/CMSIS/DSP/Include\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;${ROOT_DIR}BeetTweek-Firmware\\eurorack-beettweek\\BeetTweek-Firmware\\STM32Utilities\\Inc&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;${ROOT_DIR}BeetTweek-Firmware\\eurorack-beettweek\\API&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;${ROOT_DIR}BeetTweek-Firmware\\eurorack-beettweek\\BeetTweek-Firmware\\SharedSource&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../FATFS/Target\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../FATFS/App\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Middlewares/Third_Party/FatFs/src\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;${ROOT_DIR}BeetTweek-Firmware\\eurorack-beettweek\\BeetTweek-Firmware\\MathExtras_DSP&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../USB_DEVICE/App\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../USB_DEVICE/Target\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\"/>\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.fnostrictaliasing.1499846596\" name=\"Disable &quot;strict aliasing&quot; optimization (-fno-strict-aliasing)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.fnostrictaliasing\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.languagestandard.779738735\" name=\"Language standard\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.languagestandard\" useByScannerDiscovery=\"true\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.languagestandard.value.gnupp17\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<inputType id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.input.cpp.1479572528\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.input.cpp\"/>\n\t\t\t\t\t\t\t</tool>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.linker.477523851\" name=\"MCU GCC Linker\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.linker\">\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.linker.option.script.1327684187\" name=\"Linker Script (-T)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.linker.option.script\" value=\"${workspace_loc:/${ProjName}/STM32H743ZITX_FLASH.ld}\" valueType=\"string\"/>\n\t\t\t\t\t\t\t</tool>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.linker.1767915774\" name=\"MCU G++ Linker\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.linker\">\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.linker.option.script.1571733361\" name=\"Linker Script (-T)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.linker.option.script\" useByScannerDiscovery=\"false\" value=\"${workspace_loc:/${ProjName}/STM32H743ZITX_FLASH.ld}\" valueType=\"string\"/>\n\t\t\t\t\t\t\t\t<inputType id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.linker.input.1530637212\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.linker.input\">\n\t\t\t\t\t\t\t\t\t<additionalInput kind=\"additionalinputdependency\" paths=\"$(USER_OBJS)\"/>\n\t\t\t\t\t\t\t\t\t<additionalInput kind=\"additionalinput\" paths=\"$(LIBS)\"/>\n\t\t\t\t\t\t\t\t</inputType>\n\t\t\t\t\t\t\t</tool>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.archiver.430709954\" name=\"MCU GCC Archiver\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.archiver\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.size.567414904\" name=\"MCU Size\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.size\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objdump.listfile.1964138915\" name=\"MCU Output Converter list file\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objdump.listfile\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.hex.224451581\" name=\"MCU Output Converter Hex\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.hex\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.binary.1303774387\" name=\"MCU Output Converter Binary\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.binary\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.verilog.2146689435\" name=\"MCU Output Converter Verilog\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.verilog\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.srec.1419441225\" name=\"MCU Output Converter Motorola S-rec\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.srec\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.symbolsrec.1733564798\" name=\"MCU Output Converter Motorola S-rec with symbols\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.symbolsrec\"/>\n\t\t\t\t\t\t</toolChain>\n\t\t\t\t\t</folderInfo>\n\t\t\t\t\t<sourceEntries>\n\t\t\t\t\t\t<entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"SharedSource\"/>\n\t\t\t\t\t\t<entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"MathExtras_DSP\"/>\n\t\t\t\t\t\t<entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"Core\"/>\n\t\t\t\t\t\t<entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"FATFS\"/>\n\t\t\t\t\t\t<entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"STM32Utilities\"/>\n\t\t\t\t\t\t<entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"Middlewares\"/>\n\t\t\t\t\t\t<entry excluding=\"Core\" flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"Drivers\"/>\n\t\t\t\t\t\t<entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"USB_DEVICE\"/>\n\t\t\t\t\t</sourceEntries>\n\t\t\t\t</configuration>\n\t\t\t</storageModule>\n\t\t\t<storageModule moduleId=\"org.eclipse.cdt.core.externalSettings\"/>\n\t\t</cconfiguration>\n\t\t<cconfiguration id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.debug.1352964405.718307120\">\n\t\t\t<storageModule buildSystemId=\"org.eclipse.cdt.managedbuilder.core.configurationDataProvider\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.debug.1352964405.718307120\" moduleId=\"org.eclipse.cdt.core.settings\" name=\"SpeedOptimized\">\n\t\t\t\t<externalSettings/>\n\t\t\t\t<extensions>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.ELF\" point=\"org.eclipse.cdt.core.BinaryParser\"/>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.GASErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.GmakeErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.GLDErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.CWDLocator\" point=\"org.eclipse.cdt.core.ErrorParser\"/>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.GCCErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>\n\t\t\t\t</extensions>\n\t\t\t</storageModule>\n\t\t\t<storageModule moduleId=\"cdtBuildSystem\" version=\"4.0.0\">\n\t\t\t\t<configuration artifactExtension=\"elf\" artifactName=\"${ProjName}\" buildArtefactType=\"org.eclipse.cdt.build.core.buildArtefactType.exe\" buildProperties=\"org.eclipse.cdt.build.core.buildArtefactType=org.eclipse.cdt.build.core.buildArtefactType.exe,org.eclipse.cdt.build.core.buildType=org.eclipse.cdt.build.core.buildType.debug\" cleanCommand=\"rm -rf\" description=\"\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.debug.1352964405.718307120\" name=\"SpeedOptimized\" parent=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.debug\">\n\t\t\t\t\t<folderInfo id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.debug.1352964405.718307120.\" name=\"/\" resourcePath=\"\">\n\t\t\t\t\t\t<toolChain id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.toolchain.exe.debug.689403557\" name=\"MCU ARM GCC\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.toolchain.exe.debug\">\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.option.internal.toolchain.type.615817452\" name=\"Internal Toolchain Type\" superClass=\"com.st.stm32cube.ide.mcu.option.internal.toolchain.type\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.toolchain.base.gnu-tools-for-stm32\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.option.internal.toolchain.version.2008673950\" name=\"Internal Toolchain Version\" superClass=\"com.st.stm32cube.ide.mcu.option.internal.toolchain.version\" useByScannerDiscovery=\"false\" value=\"7-2018-q2-update\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_mcu.1246396610\" name=\"MCU\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_mcu\" useByScannerDiscovery=\"false\" value=\"STM32H743ZITx\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_cpuid.1979489988\" name=\"CPU\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_cpuid\" useByScannerDiscovery=\"false\" value=\"0\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_coreid.665901245\" name=\"Core\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_coreid\" useByScannerDiscovery=\"false\" value=\"0\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.fpu.1000716526\" name=\"Floating-point unit\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.fpu\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.fpu.value.fpv5-d16\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.floatabi.236969475\" name=\"Floating-point ABI\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.floatabi\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.floatabi.value.hard\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_board.2092624891\" name=\"Board\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_board\" useByScannerDiscovery=\"false\" value=\"genericBoard\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.defaults.535640294\" name=\"Defaults\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.defaults\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.common.services.build.inputs.revA.1.0.5 || SpeedOptimized || true || Executable || com.st.stm32cube.ide.mcu.gnu.managedbuild.toolchain.base.gnu-tools-for-stm32 || STM32H743ZITx || 0 || 0 || arm-none-eabi- || ${gnu_tools_for_stm32_compiler_path} || ../FATFS/App | ../USB_DEVICE/Target | ../Drivers/CMSIS/Include | ../Core/Inc | ../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc | ../USB_DEVICE/App | ../Drivers/STM32H7xx_HAL_Driver/Inc/Legacy | ../Drivers/CMSIS/Device/ST/STM32H7xx/Include | ../FATFS/Target | ../Middlewares/ST/STM32_USB_Device_Library/Core/Inc | ../Middlewares/Third_Party/FatFs/src | ../Drivers/STM32H7xx_HAL_Driver/Inc ||  ||  || USE_HAL_DRIVER | STM32H743xx ||  || Drivers | Core/Startup | Middlewares | Core | FATFS | USB_DEVICE ||  ||  || ${workspace_loc:/${ProjName}/STM32H743ZITX_FLASH.ld} || true || NonSecure ||  || secure_nsclib.o ||  || None || \" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.nanoprintffloat.891592499\" name=\"Use float with printf from newlib-nano (-u _printf_float)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.nanoprintffloat\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.nanoscanffloat.1011562685\" name=\"Use float with scanf from newlib-nano (-u _scanf_float)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.nanoscanffloat\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.option.internal.toolchain.default.1547412898\" name=\"Internal Toolchain Default\" superClass=\"com.st.stm32cube.ide.mcu.option.internal.toolchain.default\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.toolchain_path.1902475087\" name=\"Path\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.toolchain_path\" useByScannerDiscovery=\"false\" value=\"${gnu_tools_for_stm32_compiler_path}\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.runtimelibrary_cpp.1028457113\" name=\"Runtime library\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.runtimelibrary_cpp\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.runtimelibrary_cpp.value.nano_c_nano_cpp\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.toolchain.187440554\" name=\"Toolchain\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.toolchain\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.toolchain.value.workspace\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertbinary.911664079\" name=\"Convert to binary file (-O binary)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertbinary\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.converthex.23384228\" name=\"Convert to Intel Hex file (-O ihex)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.converthex\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertsrec.1106520344\" name=\"Convert to Motorola S-record file (-O srec)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertsrec\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertverilog.1929924567\" name=\"Convert to Verilog file (-O verilog)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertverilog\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertsymbolsrec.864586667\" name=\"Convert to Motorola S-record (symbols) file (-O symbolsrec)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertsymbolsrec\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<targetPlatform archList=\"all\" binaryParser=\"org.eclipse.cdt.core.ELF\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.targetplatform.1312217487\" isAbstract=\"false\" osList=\"all\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.targetplatform\"/>\n\t\t\t\t\t\t\t<builder buildPath=\"${workspace_loc:/DSPBoardH7}/Debug\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.builder.655802497\" keepEnvironmentInBuildfile=\"false\" managedBuildOn=\"true\" name=\"Gnu Make Builder\" parallelBuildOn=\"true\" parallelizationNumber=\"unlimited\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.builder\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.1210074346\" name=\"MCU GCC Assembler\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler\">\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.option.debuglevel.1972614860\" name=\"Debug level\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.option.debuglevel\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.option.debuglevel.value.g3\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<option IS_BUILTIN_EMPTY=\"false\" IS_VALUE_EMPTY=\"false\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.option.includepaths.1875080037\" name=\"Include paths (-I)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.option.includepaths\" useByScannerDiscovery=\"false\" valueType=\"includePath\">\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;${ROOT_DIR}BeetTweek-Firmware\\torqueknob\\BeetTweek-Firmware\\STM32Utilities\\Inc&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;${ROOT_DIR}BeetTweek-Firmware\\torqueknob\\API&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/CMSIS/DSP/Include\"/>\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t<option IS_BUILTIN_EMPTY=\"false\" IS_VALUE_EMPTY=\"false\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.option.definedsymbols.706488090\" name=\"Define symbols (-D)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.option.definedsymbols\" useByScannerDiscovery=\"false\" valueType=\"definedSymbols\">\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"ARM_MATH_CM7\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"__FPU_PRESENT\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"DEBUG\"/>\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t<inputType id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.input.1416597328\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.input\"/>\n\t\t\t\t\t\t\t</tool>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.1602729043\" name=\"MCU GCC Compiler\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler\">\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.debuglevel.128394467\" name=\"Debug level\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.debuglevel\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.debuglevel.value.g3\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.optimization.level.1470270020\" name=\"Optimization level\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.optimization.level\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.optimization.level.value.o0\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<option IS_BUILTIN_EMPTY=\"false\" IS_VALUE_EMPTY=\"false\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.definedsymbols.968176084\" name=\"Define symbols (-D)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.definedsymbols\" useByScannerDiscovery=\"false\" valueType=\"definedSymbols\">\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"USE_HAL_DRIVER\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"__FPU_PRESENT\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"ARM_MATH_CM7\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"STM32H743xx\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"DEBUG\"/>\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t<option IS_BUILTIN_EMPTY=\"false\" IS_VALUE_EMPTY=\"false\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.includepaths.1850638278\" name=\"Include paths (-I)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.includepaths\" useByScannerDiscovery=\"false\" valueType=\"includePath\">\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Core/Inc\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/STM32H7xx_HAL_Driver/Inc\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/STM32H7xx_HAL_Driver/Inc/Legacy\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/CMSIS/Device/ST/STM32H7xx/Include\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/CMSIS/Include\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/CMSIS/DSP/Include\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;${ROOT_DIR}BeetTweek-Firmware\\eurorack-beettweek\\BeetTweek-Firmware\\STM32Utilities\\Inc&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;${ROOT_DIR}BeetTweek-Firmware\\eurorack-beettweek\\BeetTweek-Firmware\\SharedSource&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;${ROOT_DIR}BeetTweek-Firmware\\eurorack-beettweek\\API&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../FATFS/Target\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../FATFS/App\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Middlewares/Third_Party/FatFs/src\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../USB_DEVICE/App\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../USB_DEVICE/Target\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\"/>\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.fnostrictaliasing.1214087071\" name=\"Disable &quot;strict aliasing&quot; optimization (-fno-strict-aliasing)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.fnostrictaliasing\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t\t<inputType id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.input.c.2044977521\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.input.c\"/>\n\t\t\t\t\t\t\t</tool>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.1515842450\" name=\"MCU G++ Compiler\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler\">\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.debuglevel.705579435\" name=\"Debug level\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.debuglevel\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.debuglevel.value.g3\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.optimization.level.603008130\" name=\"Optimization level\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.optimization.level\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.optimization.level.value.o0\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<option IS_BUILTIN_EMPTY=\"false\" IS_VALUE_EMPTY=\"false\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.definedsymbols.1399795779\" name=\"Define symbols (-D)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.definedsymbols\" useByScannerDiscovery=\"false\" valueType=\"definedSymbols\">\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"USE_HAL_DRIVER\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"__FPU_PRESENT\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"ARM_MATH_CM7\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"STM32H743xx\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"DEBUG\"/>\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t<option IS_BUILTIN_EMPTY=\"false\" IS_VALUE_EMPTY=\"false\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.includepaths.876421844\" name=\"Include paths (-I)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.includepaths\" useByScannerDiscovery=\"false\" valueType=\"includePath\">\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Core/Inc\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/STM32H7xx_HAL_Driver/Inc\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/STM32H7xx_HAL_Driver/Inc/Legacy\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/CMSIS/Device/ST/STM32H7xx/Include\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/CMSIS/Include\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/CMSIS/DSP/Include\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;${ROOT_DIR}BeetTweek-Firmware\\eurorack-beettweek\\BeetTweek-Firmware\\STM32Utilities\\Inc&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;${ROOT_DIR}BeetTweek-Firmware\\eurorack-beettweek\\API&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;${ROOT_DIR}BeetTweek-Firmware\\eurorack-beettweek\\BeetTweek-Firmware\\SharedSource&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../FATFS/Target\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../FATFS/App\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Middlewares/Third_Party/FatFs/src\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;${ROOT_DIR}BeetTweek-Firmware\\eurorack-beettweek\\BeetTweek-Firmware\\MathExtras_DSP&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../USB_DEVICE/App\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../USB_DEVICE/Target\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\"/>\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.fnostrictaliasing.1579511273\" name=\"Disable &quot;strict aliasing&quot; optimization (-fno-strict-aliasing)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.fnostrictaliasing\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.languagestandard.1984880175\" name=\"Language standard\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.languagestandard\" useByScannerDiscovery=\"true\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.languagestandard.value.gnupp17\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<inputType id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.input.cpp.1805555894\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.input.cpp\"/>\n\t\t\t\t\t\t\t</tool>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.linker.404185203\" name=\"MCU GCC Linker\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.linker\">\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.linker.option.script.1830941662\" name=\"Linker Script (-T)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.linker.option.script\" value=\"${workspace_loc:/${ProjName}/STM32H743ZITX_FLASH.ld}\" valueType=\"string\"/>\n\t\t\t\t\t\t\t</tool>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.linker.1269640898\" name=\"MCU G++ Linker\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.linker\">\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.linker.option.script.1295705396\" name=\"Linker Script (-T)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.linker.option.script\" useByScannerDiscovery=\"false\" value=\"${workspace_loc:/${ProjName}/STM32H743ZITX_FLASH.ld}\" valueType=\"string\"/>\n\t\t\t\t\t\t\t\t<inputType id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.linker.input.47153514\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.linker.input\">\n\t\t\t\t\t\t\t\t\t<additionalInput kind=\"additionalinputdependency\" paths=\"$(USER_OBJS)\"/>\n\t\t\t\t\t\t\t\t\t<additionalInput kind=\"additionalinput\" paths=\"$(LIBS)\"/>\n\t\t\t\t\t\t\t\t</inputType>\n\t\t\t\t\t\t\t</tool>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.archiver.980716481\" name=\"MCU GCC Archiver\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.archiver\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.size.677721200\" name=\"MCU Size\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.size\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objdump.listfile.1731492927\" name=\"MCU Output Converter list file\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objdump.listfile\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.hex.1724395333\" name=\"MCU Output Converter Hex\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.hex\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.binary.1432879283\" name=\"MCU Output Converter Binary\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.binary\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.verilog.2134462334\" name=\"MCU Output Converter Verilog\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.verilog\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.srec.61238235\" name=\"MCU Output Converter Motorola S-rec\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.srec\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.symbolsrec.325210179\" name=\"MCU Output Converter Motorola S-rec with symbols\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.symbolsrec\"/>\n\t\t\t\t\t\t</toolChain>\n\t\t\t\t\t</folderInfo>\n\t\t\t\t\t<sourceEntries>\n\t\t\t\t\t\t<entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"SharedSource\"/>\n\t\t\t\t\t\t<entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"MathExtras_DSP\"/>\n\t\t\t\t\t\t<entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"Core\"/>\n\t\t\t\t\t\t<entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"FATFS\"/>\n\t\t\t\t\t\t<entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"STM32Utilities\"/>\n\t\t\t\t\t\t<entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"Middlewares\"/>\n\t\t\t\t\t\t<entry excluding=\"Core\" flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"Drivers\"/>\n\t\t\t\t\t\t<entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"USB_DEVICE\"/>\n\t\t\t\t\t</sourceEntries>\n\t\t\t\t</configuration>\n\t\t\t</storageModule>\n\t\t\t<storageModule moduleId=\"org.eclipse.cdt.core.externalSettings\"/>\n\t\t</cconfiguration>\n\t</storageModule>\n\t<storageModule moduleId=\"cdtBuildSystem\" version=\"4.0.0\">\n\t\t<project id=\"DSPBoardH7.null.1878284043\" name=\"DSPBoardH7\"/>\n\t</storageModule>\n\t<storageModule moduleId=\"org.eclipse.cdt.core.LanguageSettingsProviders\"/>\n\t<storageModule moduleId=\"scannerConfiguration\">\n\t\t<autodiscovery enabled=\"true\" problemReportingEnabled=\"true\" selectedProfileId=\"\"/>\n\t\t<scannerConfigBuildInfo instanceId=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.debug.1352964405;com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.debug.1352964405.;com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.1386882065;com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.input.c.1930849222\">\n\t\t\t<autodiscovery enabled=\"false\" problemReportingEnabled=\"true\" selectedProfileId=\"\"/>\n\t\t</scannerConfigBuildInfo>\n\t\t<scannerConfigBuildInfo instanceId=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.debug.1352964405;com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.debug.1352964405.;com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.656727419;com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.input.cpp.1479572528\">\n\t\t\t<autodiscovery enabled=\"false\" problemReportingEnabled=\"true\" selectedProfileId=\"\"/>\n\t\t</scannerConfigBuildInfo>\n\t\t<scannerConfigBuildInfo instanceId=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.release.1333664615;com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.release.1333664615.;com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.324376000;com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.input.cpp.1385936172\">\n\t\t\t<autodiscovery enabled=\"false\" problemReportingEnabled=\"true\" selectedProfileId=\"\"/>\n\t\t</scannerConfigBuildInfo>\n\t\t<scannerConfigBuildInfo instanceId=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.release.1333664615;com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.release.1333664615.;com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.1436342137;com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.input.c.676187731\">\n\t\t\t<autodiscovery enabled=\"false\" problemReportingEnabled=\"true\" selectedProfileId=\"\"/>\n\t\t</scannerConfigBuildInfo>\n\t</storageModule>\n\t<storageModule moduleId=\"refreshScope\" versionNumber=\"2\">\n\t\t<configuration configurationName=\"Debug\">\n\t\t\t<resource resourceType=\"PROJECT\" workspacePath=\"/DSPBoardH7\"/>\n\t\t</configuration>\n\t\t<configuration configurationName=\"Release\">\n\t\t\t<resource resourceType=\"PROJECT\" workspacePath=\"/DSPBoardH7\"/>\n\t\t</configuration>\n\t</storageModule>\n\t<storageModule moduleId=\"org.eclipse.cdt.make.core.buildtargets\"/>\n\t<storageModule moduleId=\"org.eclipse.cdt.internal.ui.text.commentOwnerProjectMappings\"/>\n</cproject>",
			"file": "/C/Users/casht/Desktop/TESTFOLDER/BeetTweek-Firmware/DSPBoardH7/.cproject.templated",
			"file_size": 50211,
			"file_write_time": 133124816775519796,
			"settings":
			{
				"buffer_size": 49878,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<?fileVersion 4.0.0?><cproject storage_type_id=\"org.eclipse.cdt.core.XmlProjectDescriptionStorage\">\n\t<storageModule moduleId=\"org.eclipse.cdt.core.settings\">\n\t\t<cconfiguration id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.debug.1352964405\">\n\t\t\t<storageModule buildSystemId=\"org.eclipse.cdt.managedbuilder.core.configurationDataProvider\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.debug.1352964405\" moduleId=\"org.eclipse.cdt.core.settings\" name=\"Debug\">\n\t\t\t\t<externalSettings/>\n\t\t\t\t<extensions>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.ELF\" point=\"org.eclipse.cdt.core.BinaryParser\"/>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.GASErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.GmakeErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.GLDErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.CWDLocator\" point=\"org.eclipse.cdt.core.ErrorParser\"/>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.GCCErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>\n\t\t\t\t</extensions>\n\t\t\t</storageModule>\n\t\t\t<storageModule moduleId=\"cdtBuildSystem\" version=\"4.0.0\">\n\t\t\t\t<configuration artifactExtension=\"elf\" artifactName=\"${ProjName}\" buildArtefactType=\"org.eclipse.cdt.build.core.buildArtefactType.exe\" buildProperties=\"org.eclipse.cdt.build.core.buildArtefactType=org.eclipse.cdt.build.core.buildArtefactType.exe,org.eclipse.cdt.build.core.buildType=org.eclipse.cdt.build.core.buildType.debug\" cleanCommand=\"rm -rf\" description=\"\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.debug.1352964405\" name=\"Debug\" parent=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.debug\">\n\t\t\t\t\t<folderInfo id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.debug.1352964405.\" name=\"/\" resourcePath=\"\">\n\t\t\t\t\t\t<toolChain id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.toolchain.exe.debug.1501408724\" name=\"MCU ARM GCC\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.toolchain.exe.debug\">\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.option.internal.toolchain.type.1360484891\" name=\"Internal Toolchain Type\" superClass=\"com.st.stm32cube.ide.mcu.option.internal.toolchain.type\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.toolchain.base.gnu-tools-for-stm32\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.option.internal.toolchain.version.1571653087\" name=\"Internal Toolchain Version\" superClass=\"com.st.stm32cube.ide.mcu.option.internal.toolchain.version\" useByScannerDiscovery=\"false\" value=\"7-2018-q2-update\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_mcu.2026928710\" name=\"MCU\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_mcu\" useByScannerDiscovery=\"false\" value=\"STM32H743ZITx\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_cpuid.34148941\" name=\"CPU\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_cpuid\" useByScannerDiscovery=\"false\" value=\"0\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_coreid.1912190444\" name=\"Core\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_coreid\" useByScannerDiscovery=\"false\" value=\"0\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.fpu.1626930749\" name=\"Floating-point unit\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.fpu\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.fpu.value.fpv5-d16\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.floatabi.1268070958\" name=\"Floating-point ABI\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.floatabi\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.floatabi.value.hard\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_board.503627018\" name=\"Board\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_board\" useByScannerDiscovery=\"false\" value=\"genericBoard\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.defaults.527708963\" name=\"Defaults\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.defaults\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.common.services.build.inputs.revA.1.0.5 || Debug || true || Executable || com.st.stm32cube.ide.mcu.gnu.managedbuild.toolchain.base.gnu-tools-for-stm32 || STM32H743ZITx || 0 || 0 || arm-none-eabi- || ${gnu_tools_for_stm32_compiler_path} || ../FATFS/App | ../USB_DEVICE/Target | ../Drivers/CMSIS/Include | ../Core/Inc | ../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc | ../USB_DEVICE/App | ../Drivers/STM32H7xx_HAL_Driver/Inc/Legacy | ../Drivers/CMSIS/Device/ST/STM32H7xx/Include | ../FATFS/Target | ../Middlewares/ST/STM32_USB_Device_Library/Core/Inc | ../Middlewares/Third_Party/FatFs/src | ../Drivers/STM32H7xx_HAL_Driver/Inc ||  ||  || USE_HAL_DRIVER | STM32H743xx ||  || Drivers | Core/Startup | Middlewares | Core | FATFS | USB_DEVICE ||  ||  || ${workspace_loc:/${ProjName}/STM32H743ZITX_FLASH.ld} || true || NonSecure ||  || secure_nsclib.o ||  || None || \" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.nanoprintffloat.276355721\" name=\"Use float with printf from newlib-nano (-u _printf_float)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.nanoprintffloat\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.nanoscanffloat.156920194\" name=\"Use float with scanf from newlib-nano (-u _scanf_float)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.nanoscanffloat\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.option.internal.toolchain.default.636509716\" name=\"Internal Toolchain Default\" superClass=\"com.st.stm32cube.ide.mcu.option.internal.toolchain.default\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.toolchain_path.406698826\" name=\"Path\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.toolchain_path\" useByScannerDiscovery=\"false\" value=\"${gnu_tools_for_stm32_compiler_path}\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.runtimelibrary_cpp.639169732\" name=\"Runtime library\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.runtimelibrary_cpp\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.runtimelibrary_cpp.value.nano_c_nano_cpp\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.toolchain.422556151\" name=\"Toolchain\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.toolchain\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.toolchain.value.workspace\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertbinary.860620720\" name=\"Convert to binary file (-O binary)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertbinary\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.converthex.114324679\" name=\"Convert to Intel Hex file (-O ihex)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.converthex\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertsrec.308549926\" name=\"Convert to Motorola S-record file (-O srec)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertsrec\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertverilog.1058013949\" name=\"Convert to Verilog file (-O verilog)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertverilog\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertsymbolsrec.617183855\" name=\"Convert to Motorola S-record (symbols) file (-O symbolsrec)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertsymbolsrec\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<targetPlatform archList=\"all\" binaryParser=\"org.eclipse.cdt.core.ELF\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.targetplatform.1027248553\" isAbstract=\"false\" osList=\"all\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.targetplatform\"/>\n\t\t\t\t\t\t\t<builder buildPath=\"${workspace_loc:/DSPBoardH7}/Debug\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.builder.1841337671\" keepEnvironmentInBuildfile=\"false\" managedBuildOn=\"true\" name=\"Gnu Make Builder\" parallelBuildOn=\"true\" parallelizationNumber=\"unlimited\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.builder\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.1792406732\" name=\"MCU GCC Assembler\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler\">\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.option.debuglevel.661213942\" name=\"Debug level\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.option.debuglevel\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.option.debuglevel.value.g3\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<option IS_BUILTIN_EMPTY=\"false\" IS_VALUE_EMPTY=\"false\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.option.includepaths.1474470235\" name=\"Include paths (-I)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.option.includepaths\" useByScannerDiscovery=\"false\" valueType=\"includePath\">\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;C:\\Users\\casht\\repos\\torqueknob\\BeetTweek-Firmware\\STM32Utilities\\Inc&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;C:\\Users\\casht\\repos\\torqueknob\\API&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/CMSIS/DSP/Include\"/>\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t<option IS_BUILTIN_EMPTY=\"false\" IS_VALUE_EMPTY=\"false\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.option.definedsymbols.800260935\" name=\"Define symbols (-D)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.option.definedsymbols\" useByScannerDiscovery=\"false\" valueType=\"definedSymbols\">\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"ARM_MATH_CM7\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"__FPU_PRESENT\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"DEBUG\"/>\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t<inputType id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.input.1559606435\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.input\"/>\n\t\t\t\t\t\t\t</tool>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.1386882065\" name=\"MCU GCC Compiler\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler\">\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.debuglevel.517749863\" name=\"Debug level\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.debuglevel\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.debuglevel.value.g3\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.optimization.level.2032474334\" name=\"Optimization level\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.optimization.level\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.optimization.level.value.o0\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<option IS_BUILTIN_EMPTY=\"false\" IS_VALUE_EMPTY=\"false\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.definedsymbols.617941272\" name=\"Define symbols (-D)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.definedsymbols\" useByScannerDiscovery=\"false\" valueType=\"definedSymbols\">\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"USE_HAL_DRIVER\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"__FPU_PRESENT\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"ARM_MATH_CM7\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"STM32H743xx\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"DEBUG\"/>\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t<option IS_BUILTIN_EMPTY=\"false\" IS_VALUE_EMPTY=\"false\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.includepaths.859655993\" name=\"Include paths (-I)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.includepaths\" useByScannerDiscovery=\"false\" valueType=\"includePath\">\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Core/Inc\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/STM32H7xx_HAL_Driver/Inc\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/STM32H7xx_HAL_Driver/Inc/Legacy\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/CMSIS/Device/ST/STM32H7xx/Include\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/CMSIS/Include\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/CMSIS/DSP/Include\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;C:\\Users\\casht\\repos\\eurorack-beettweek\\BeetTweek-Firmware\\STM32Utilities\\Inc&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;C:\\Users\\casht\\repos\\eurorack-beettweek\\BeetTweek-Firmware\\SharedSource&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;C:\\Users\\casht\\repos\\eurorack-beettweek\\API&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../FATFS/Target\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../FATFS/App\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Middlewares/Third_Party/FatFs/src\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../USB_DEVICE/App\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../USB_DEVICE/Target\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\"/>\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.fnostrictaliasing.1521332604\" name=\"Disable &quot;strict aliasing&quot; optimization (-fno-strict-aliasing)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.fnostrictaliasing\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t\t<inputType id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.input.c.1930849222\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.input.c\"/>\n\t\t\t\t\t\t\t</tool>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.656727419\" name=\"MCU G++ Compiler\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler\">\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.debuglevel.61377182\" name=\"Debug level\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.debuglevel\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.debuglevel.value.g3\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.optimization.level.1061126626\" name=\"Optimization level\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.optimization.level\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.optimization.level.value.o0\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<option IS_BUILTIN_EMPTY=\"false\" IS_VALUE_EMPTY=\"false\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.definedsymbols.2054572015\" name=\"Define symbols (-D)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.definedsymbols\" useByScannerDiscovery=\"false\" valueType=\"definedSymbols\">\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"USE_HAL_DRIVER\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"__FPU_PRESENT\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"ARM_MATH_CM7\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"STM32H743xx\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"DEBUG\"/>\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t<option IS_BUILTIN_EMPTY=\"false\" IS_VALUE_EMPTY=\"false\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.includepaths.776108346\" name=\"Include paths (-I)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.includepaths\" useByScannerDiscovery=\"false\" valueType=\"includePath\">\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Core/Inc\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/STM32H7xx_HAL_Driver/Inc\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/STM32H7xx_HAL_Driver/Inc/Legacy\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/CMSIS/Device/ST/STM32H7xx/Include\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/CMSIS/Include\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/CMSIS/DSP/Include\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;C:\\Users\\casht\\repos\\eurorack-beettweek\\BeetTweek-Firmware\\STM32Utilities\\Inc&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;C:\\Users\\casht\\repos\\eurorack-beettweek\\API&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;C:\\Users\\casht\\repos\\eurorack-beettweek\\BeetTweek-Firmware\\SharedSource&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../FATFS/Target\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../FATFS/App\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Middlewares/Third_Party/FatFs/src\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;C:\\Users\\casht\\repos\\eurorack-beettweek\\BeetTweek-Firmware\\MathExtras_DSP&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../USB_DEVICE/App\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../USB_DEVICE/Target\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\"/>\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.fnostrictaliasing.1499846596\" name=\"Disable &quot;strict aliasing&quot; optimization (-fno-strict-aliasing)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.fnostrictaliasing\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.languagestandard.779738735\" name=\"Language standard\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.languagestandard\" useByScannerDiscovery=\"true\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.languagestandard.value.gnupp17\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<inputType id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.input.cpp.1479572528\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.input.cpp\"/>\n\t\t\t\t\t\t\t</tool>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.linker.477523851\" name=\"MCU GCC Linker\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.linker\">\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.linker.option.script.1327684187\" name=\"Linker Script (-T)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.linker.option.script\" value=\"${workspace_loc:/${ProjName}/STM32H743ZITX_FLASH.ld}\" valueType=\"string\"/>\n\t\t\t\t\t\t\t</tool>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.linker.1767915774\" name=\"MCU G++ Linker\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.linker\">\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.linker.option.script.1571733361\" name=\"Linker Script (-T)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.linker.option.script\" useByScannerDiscovery=\"false\" value=\"${workspace_loc:/${ProjName}/STM32H743ZITX_FLASH.ld}\" valueType=\"string\"/>\n\t\t\t\t\t\t\t\t<inputType id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.linker.input.1530637212\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.linker.input\">\n\t\t\t\t\t\t\t\t\t<additionalInput kind=\"additionalinputdependency\" paths=\"$(USER_OBJS)\"/>\n\t\t\t\t\t\t\t\t\t<additionalInput kind=\"additionalinput\" paths=\"$(LIBS)\"/>\n\t\t\t\t\t\t\t\t</inputType>\n\t\t\t\t\t\t\t</tool>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.archiver.430709954\" name=\"MCU GCC Archiver\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.archiver\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.size.567414904\" name=\"MCU Size\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.size\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objdump.listfile.1964138915\" name=\"MCU Output Converter list file\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objdump.listfile\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.hex.224451581\" name=\"MCU Output Converter Hex\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.hex\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.binary.1303774387\" name=\"MCU Output Converter Binary\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.binary\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.verilog.2146689435\" name=\"MCU Output Converter Verilog\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.verilog\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.srec.1419441225\" name=\"MCU Output Converter Motorola S-rec\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.srec\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.symbolsrec.1733564798\" name=\"MCU Output Converter Motorola S-rec with symbols\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.symbolsrec\"/>\n\t\t\t\t\t\t</toolChain>\n\t\t\t\t\t</folderInfo>\n\t\t\t\t\t<sourceEntries>\n\t\t\t\t\t\t<entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"SharedSource\"/>\n\t\t\t\t\t\t<entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"MathExtras_DSP\"/>\n\t\t\t\t\t\t<entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"Core\"/>\n\t\t\t\t\t\t<entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"FATFS\"/>\n\t\t\t\t\t\t<entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"STM32Utilities\"/>\n\t\t\t\t\t\t<entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"Middlewares\"/>\n\t\t\t\t\t\t<entry excluding=\"Core\" flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"Drivers\"/>\n\t\t\t\t\t\t<entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"USB_DEVICE\"/>\n\t\t\t\t\t</sourceEntries>\n\t\t\t\t</configuration>\n\t\t\t</storageModule>\n\t\t\t<storageModule moduleId=\"org.eclipse.cdt.core.externalSettings\"/>\n\t\t</cconfiguration>\n\t\t<cconfiguration id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.debug.1352964405.718307120\">\n\t\t\t<storageModule buildSystemId=\"org.eclipse.cdt.managedbuilder.core.configurationDataProvider\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.debug.1352964405.718307120\" moduleId=\"org.eclipse.cdt.core.settings\" name=\"SpeedOptimized\">\n\t\t\t\t<externalSettings/>\n\t\t\t\t<extensions>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.ELF\" point=\"org.eclipse.cdt.core.BinaryParser\"/>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.GASErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.GmakeErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.GLDErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.CWDLocator\" point=\"org.eclipse.cdt.core.ErrorParser\"/>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.GCCErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>\n\t\t\t\t</extensions>\n\t\t\t</storageModule>\n\t\t\t<storageModule moduleId=\"cdtBuildSystem\" version=\"4.0.0\">\n\t\t\t\t<configuration artifactExtension=\"elf\" artifactName=\"${ProjName}\" buildArtefactType=\"org.eclipse.cdt.build.core.buildArtefactType.exe\" buildProperties=\"org.eclipse.cdt.build.core.buildArtefactType=org.eclipse.cdt.build.core.buildArtefactType.exe,org.eclipse.cdt.build.core.buildType=org.eclipse.cdt.build.core.buildType.debug\" cleanCommand=\"rm -rf\" description=\"\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.debug.1352964405.718307120\" name=\"SpeedOptimized\" parent=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.debug\">\n\t\t\t\t\t<folderInfo id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.debug.1352964405.718307120.\" name=\"/\" resourcePath=\"\">\n\t\t\t\t\t\t<toolChain id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.toolchain.exe.debug.689403557\" name=\"MCU ARM GCC\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.toolchain.exe.debug\">\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.option.internal.toolchain.type.615817452\" name=\"Internal Toolchain Type\" superClass=\"com.st.stm32cube.ide.mcu.option.internal.toolchain.type\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.toolchain.base.gnu-tools-for-stm32\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.option.internal.toolchain.version.2008673950\" name=\"Internal Toolchain Version\" superClass=\"com.st.stm32cube.ide.mcu.option.internal.toolchain.version\" useByScannerDiscovery=\"false\" value=\"7-2018-q2-update\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_mcu.1246396610\" name=\"MCU\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_mcu\" useByScannerDiscovery=\"false\" value=\"STM32H743ZITx\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_cpuid.1979489988\" name=\"CPU\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_cpuid\" useByScannerDiscovery=\"false\" value=\"0\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_coreid.665901245\" name=\"Core\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_coreid\" useByScannerDiscovery=\"false\" value=\"0\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.fpu.1000716526\" name=\"Floating-point unit\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.fpu\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.fpu.value.fpv5-d16\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.floatabi.236969475\" name=\"Floating-point ABI\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.floatabi\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.floatabi.value.hard\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_board.2092624891\" name=\"Board\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.target_board\" useByScannerDiscovery=\"false\" value=\"genericBoard\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.defaults.535640294\" name=\"Defaults\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.defaults\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.common.services.build.inputs.revA.1.0.5 || SpeedOptimized || true || Executable || com.st.stm32cube.ide.mcu.gnu.managedbuild.toolchain.base.gnu-tools-for-stm32 || STM32H743ZITx || 0 || 0 || arm-none-eabi- || ${gnu_tools_for_stm32_compiler_path} || ../FATFS/App | ../USB_DEVICE/Target | ../Drivers/CMSIS/Include | ../Core/Inc | ../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc | ../USB_DEVICE/App | ../Drivers/STM32H7xx_HAL_Driver/Inc/Legacy | ../Drivers/CMSIS/Device/ST/STM32H7xx/Include | ../FATFS/Target | ../Middlewares/ST/STM32_USB_Device_Library/Core/Inc | ../Middlewares/Third_Party/FatFs/src | ../Drivers/STM32H7xx_HAL_Driver/Inc ||  ||  || USE_HAL_DRIVER | STM32H743xx ||  || Drivers | Core/Startup | Middlewares | Core | FATFS | USB_DEVICE ||  ||  || ${workspace_loc:/${ProjName}/STM32H743ZITX_FLASH.ld} || true || NonSecure ||  || secure_nsclib.o ||  || None || \" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.nanoprintffloat.891592499\" name=\"Use float with printf from newlib-nano (-u _printf_float)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.nanoprintffloat\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.nanoscanffloat.1011562685\" name=\"Use float with scanf from newlib-nano (-u _scanf_float)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.nanoscanffloat\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.option.internal.toolchain.default.1547412898\" name=\"Internal Toolchain Default\" superClass=\"com.st.stm32cube.ide.mcu.option.internal.toolchain.default\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.toolchain_path.1902475087\" name=\"Path\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.toolchain_path\" useByScannerDiscovery=\"false\" value=\"${gnu_tools_for_stm32_compiler_path}\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.runtimelibrary_cpp.1028457113\" name=\"Runtime library\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.runtimelibrary_cpp\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.runtimelibrary_cpp.value.nano_c_nano_cpp\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.toolchain.187440554\" name=\"Toolchain\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.toolchain\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.toolchain.value.workspace\" valueType=\"string\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertbinary.911664079\" name=\"Convert to binary file (-O binary)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertbinary\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.converthex.23384228\" name=\"Convert to Intel Hex file (-O ihex)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.converthex\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertsrec.1106520344\" name=\"Convert to Motorola S-record file (-O srec)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertsrec\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertverilog.1929924567\" name=\"Convert to Verilog file (-O verilog)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertverilog\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertsymbolsrec.864586667\" name=\"Convert to Motorola S-record (symbols) file (-O symbolsrec)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.option.convertsymbolsrec\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t<targetPlatform archList=\"all\" binaryParser=\"org.eclipse.cdt.core.ELF\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.targetplatform.1312217487\" isAbstract=\"false\" osList=\"all\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.targetplatform\"/>\n\t\t\t\t\t\t\t<builder buildPath=\"${workspace_loc:/DSPBoardH7}/Debug\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.builder.655802497\" keepEnvironmentInBuildfile=\"false\" managedBuildOn=\"true\" name=\"Gnu Make Builder\" parallelBuildOn=\"true\" parallelizationNumber=\"unlimited\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.builder\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.1210074346\" name=\"MCU GCC Assembler\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler\">\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.option.debuglevel.1972614860\" name=\"Debug level\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.option.debuglevel\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.option.debuglevel.value.g3\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<option IS_BUILTIN_EMPTY=\"false\" IS_VALUE_EMPTY=\"false\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.option.includepaths.1875080037\" name=\"Include paths (-I)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.option.includepaths\" useByScannerDiscovery=\"false\" valueType=\"includePath\">\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;C:\\Users\\casht\\repos\\torqueknob\\BeetTweek-Firmware\\STM32Utilities\\Inc&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;C:\\Users\\casht\\repos\\torqueknob\\API&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/CMSIS/DSP/Include\"/>\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t<option IS_BUILTIN_EMPTY=\"false\" IS_VALUE_EMPTY=\"false\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.option.definedsymbols.706488090\" name=\"Define symbols (-D)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.option.definedsymbols\" useByScannerDiscovery=\"false\" valueType=\"definedSymbols\">\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"ARM_MATH_CM7\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"__FPU_PRESENT\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"DEBUG\"/>\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t<inputType id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.input.1416597328\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.assembler.input\"/>\n\t\t\t\t\t\t\t</tool>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.1602729043\" name=\"MCU GCC Compiler\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler\">\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.debuglevel.128394467\" name=\"Debug level\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.debuglevel\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.debuglevel.value.g3\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.optimization.level.1470270020\" name=\"Optimization level\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.optimization.level\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.optimization.level.value.o0\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<option IS_BUILTIN_EMPTY=\"false\" IS_VALUE_EMPTY=\"false\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.definedsymbols.968176084\" name=\"Define symbols (-D)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.definedsymbols\" useByScannerDiscovery=\"false\" valueType=\"definedSymbols\">\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"USE_HAL_DRIVER\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"__FPU_PRESENT\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"ARM_MATH_CM7\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"STM32H743xx\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"DEBUG\"/>\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t<option IS_BUILTIN_EMPTY=\"false\" IS_VALUE_EMPTY=\"false\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.includepaths.1850638278\" name=\"Include paths (-I)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.includepaths\" useByScannerDiscovery=\"false\" valueType=\"includePath\">\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Core/Inc\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/STM32H7xx_HAL_Driver/Inc\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/STM32H7xx_HAL_Driver/Inc/Legacy\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/CMSIS/Device/ST/STM32H7xx/Include\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/CMSIS/Include\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/CMSIS/DSP/Include\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;C:\\Users\\casht\\repos\\eurorack-beettweek\\BeetTweek-Firmware\\STM32Utilities\\Inc&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;C:\\Users\\casht\\repos\\eurorack-beettweek\\BeetTweek-Firmware\\SharedSource&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;C:\\Users\\casht\\repos\\eurorack-beettweek\\API&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../FATFS/Target\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../FATFS/App\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Middlewares/Third_Party/FatFs/src\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../USB_DEVICE/App\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../USB_DEVICE/Target\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\"/>\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.fnostrictaliasing.1214087071\" name=\"Disable &quot;strict aliasing&quot; optimization (-fno-strict-aliasing)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.option.fnostrictaliasing\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t\t<inputType id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.input.c.2044977521\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.input.c\"/>\n\t\t\t\t\t\t\t</tool>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.1515842450\" name=\"MCU G++ Compiler\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler\">\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.debuglevel.705579435\" name=\"Debug level\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.debuglevel\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.debuglevel.value.g3\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.optimization.level.603008130\" name=\"Optimization level\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.optimization.level\" useByScannerDiscovery=\"false\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.optimization.level.value.o0\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<option IS_BUILTIN_EMPTY=\"false\" IS_VALUE_EMPTY=\"false\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.definedsymbols.1399795779\" name=\"Define symbols (-D)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.definedsymbols\" useByScannerDiscovery=\"false\" valueType=\"definedSymbols\">\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"USE_HAL_DRIVER\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"__FPU_PRESENT\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"ARM_MATH_CM7\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"STM32H743xx\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"DEBUG\"/>\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t<option IS_BUILTIN_EMPTY=\"false\" IS_VALUE_EMPTY=\"false\" id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.includepaths.876421844\" name=\"Include paths (-I)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.includepaths\" useByScannerDiscovery=\"false\" valueType=\"includePath\">\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Core/Inc\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/STM32H7xx_HAL_Driver/Inc\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/STM32H7xx_HAL_Driver/Inc/Legacy\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/CMSIS/Device/ST/STM32H7xx/Include\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/CMSIS/Include\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Drivers/CMSIS/DSP/Include\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;C:\\Users\\casht\\repos\\eurorack-beettweek\\BeetTweek-Firmware\\STM32Utilities\\Inc&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;C:\\Users\\casht\\repos\\eurorack-beettweek\\API&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;C:\\Users\\casht\\repos\\eurorack-beettweek\\BeetTweek-Firmware\\SharedSource&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../FATFS/Target\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../FATFS/App\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Middlewares/Third_Party/FatFs/src\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"&quot;C:\\Users\\casht\\repos\\eurorack-beettweek\\BeetTweek-Firmware\\MathExtras_DSP&quot;\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../USB_DEVICE/App\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../USB_DEVICE/Target\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\"/>\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.fnostrictaliasing.1579511273\" name=\"Disable &quot;strict aliasing&quot; optimization (-fno-strict-aliasing)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.fnostrictaliasing\" useByScannerDiscovery=\"false\" value=\"true\" valueType=\"boolean\"/>\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.languagestandard.1984880175\" name=\"Language standard\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.languagestandard\" useByScannerDiscovery=\"true\" value=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.option.languagestandard.value.gnupp17\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<inputType id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.input.cpp.1805555894\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.input.cpp\"/>\n\t\t\t\t\t\t\t</tool>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.linker.404185203\" name=\"MCU GCC Linker\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.linker\">\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.linker.option.script.1830941662\" name=\"Linker Script (-T)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.linker.option.script\" value=\"${workspace_loc:/${ProjName}/STM32H743ZITX_FLASH.ld}\" valueType=\"string\"/>\n\t\t\t\t\t\t\t</tool>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.linker.1269640898\" name=\"MCU G++ Linker\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.linker\">\n\t\t\t\t\t\t\t\t<option id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.linker.option.script.1295705396\" name=\"Linker Script (-T)\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.linker.option.script\" useByScannerDiscovery=\"false\" value=\"${workspace_loc:/${ProjName}/STM32H743ZITX_FLASH.ld}\" valueType=\"string\"/>\n\t\t\t\t\t\t\t\t<inputType id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.linker.input.47153514\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.linker.input\">\n\t\t\t\t\t\t\t\t\t<additionalInput kind=\"additionalinputdependency\" paths=\"$(USER_OBJS)\"/>\n\t\t\t\t\t\t\t\t\t<additionalInput kind=\"additionalinput\" paths=\"$(LIBS)\"/>\n\t\t\t\t\t\t\t\t</inputType>\n\t\t\t\t\t\t\t</tool>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.archiver.980716481\" name=\"MCU GCC Archiver\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.archiver\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.size.677721200\" name=\"MCU Size\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.size\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objdump.listfile.1731492927\" name=\"MCU Output Converter list file\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objdump.listfile\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.hex.1724395333\" name=\"MCU Output Converter Hex\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.hex\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.binary.1432879283\" name=\"MCU Output Converter Binary\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.binary\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.verilog.2134462334\" name=\"MCU Output Converter Verilog\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.verilog\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.srec.61238235\" name=\"MCU Output Converter Motorola S-rec\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.srec\"/>\n\t\t\t\t\t\t\t<tool id=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.symbolsrec.325210179\" name=\"MCU Output Converter Motorola S-rec with symbols\" superClass=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.objcopy.symbolsrec\"/>\n\t\t\t\t\t\t</toolChain>\n\t\t\t\t\t</folderInfo>\n\t\t\t\t\t<sourceEntries>\n\t\t\t\t\t\t<entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"SharedSource\"/>\n\t\t\t\t\t\t<entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"MathExtras_DSP\"/>\n\t\t\t\t\t\t<entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"Core\"/>\n\t\t\t\t\t\t<entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"FATFS\"/>\n\t\t\t\t\t\t<entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"STM32Utilities\"/>\n\t\t\t\t\t\t<entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"Middlewares\"/>\n\t\t\t\t\t\t<entry excluding=\"Core\" flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"Drivers\"/>\n\t\t\t\t\t\t<entry flags=\"VALUE_WORKSPACE_PATH|RESOLVED\" kind=\"sourcePath\" name=\"USB_DEVICE\"/>\n\t\t\t\t\t</sourceEntries>\n\t\t\t\t</configuration>\n\t\t\t</storageModule>\n\t\t\t<storageModule moduleId=\"org.eclipse.cdt.core.externalSettings\"/>\n\t\t</cconfiguration>\n\t</storageModule>\n\t<storageModule moduleId=\"cdtBuildSystem\" version=\"4.0.0\">\n\t\t<project id=\"DSPBoardH7.null.1878284043\" name=\"DSPBoardH7\"/>\n\t</storageModule>\n\t<storageModule moduleId=\"org.eclipse.cdt.core.LanguageSettingsProviders\"/>\n\t<storageModule moduleId=\"scannerConfiguration\">\n\t\t<autodiscovery enabled=\"true\" problemReportingEnabled=\"true\" selectedProfileId=\"\"/>\n\t\t<scannerConfigBuildInfo instanceId=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.debug.1352964405;com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.debug.1352964405.;com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.1386882065;com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.input.c.1930849222\">\n\t\t\t<autodiscovery enabled=\"false\" problemReportingEnabled=\"true\" selectedProfileId=\"\"/>\n\t\t</scannerConfigBuildInfo>\n\t\t<scannerConfigBuildInfo instanceId=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.debug.1352964405;com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.debug.1352964405.;com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.656727419;com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.input.cpp.1479572528\">\n\t\t\t<autodiscovery enabled=\"false\" problemReportingEnabled=\"true\" selectedProfileId=\"\"/>\n\t\t</scannerConfigBuildInfo>\n\t\t<scannerConfigBuildInfo instanceId=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.release.1333664615;com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.release.1333664615.;com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.324376000;com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.cpp.compiler.input.cpp.1385936172\">\n\t\t\t<autodiscovery enabled=\"false\" problemReportingEnabled=\"true\" selectedProfileId=\"\"/>\n\t\t</scannerConfigBuildInfo>\n\t\t<scannerConfigBuildInfo instanceId=\"com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.release.1333664615;com.st.stm32cube.ide.mcu.gnu.managedbuild.config.exe.release.1333664615.;com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.1436342137;com.st.stm32cube.ide.mcu.gnu.managedbuild.tool.c.compiler.input.c.676187731\">\n\t\t\t<autodiscovery enabled=\"false\" problemReportingEnabled=\"true\" selectedProfileId=\"\"/>\n\t\t</scannerConfigBuildInfo>\n\t</storageModule>\n\t<storageModule moduleId=\"refreshScope\" versionNumber=\"2\">\n\t\t<configuration configurationName=\"Debug\">\n\t\t\t<resource resourceType=\"PROJECT\" workspacePath=\"/DSPBoardH7\"/>\n\t\t</configuration>\n\t\t<configuration configurationName=\"Release\">\n\t\t\t<resource resourceType=\"PROJECT\" workspacePath=\"/DSPBoardH7\"/>\n\t\t</configuration>\n\t</storageModule>\n\t<storageModule moduleId=\"org.eclipse.cdt.make.core.buildtargets\"/>\n\t<storageModule moduleId=\"org.eclipse.cdt.internal.ui.text.commentOwnerProjectMappings\"/>\n</cproject>",
			"file": "/C/Users/casht/Desktop/TESTFOLDER/BeetTweek-Firmware/DSPBoardH7/.cproject.old",
			"file_size": 50049,
			"file_write_time": 132962546471880625,
			"settings":
			{
				"buffer_size": 49716,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "/C/Users/casht/repos/eurorack-beettweek/BeetTweek-Firmware/DSPBoardH7/.project.templated",
			"settings":
			{
				"buffer_size": 1764,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					12,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAfDgAAPD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHByb2plY3REZXNjcmlwdGlvbj4KPHByb2plY3REZXNjcmlwdGlvbj4KCTxuYW1lPkRTUEJvYXJkSDc8L25hbWU+Cgk8bmFtZT5EU1BCb2FyZEg3PC9uYW1lPgoJPGNvbW1lbnQ+PC9jb21tZW50PgoJPGNvbW1lbnQ+PC9jb21tZW50PgoJPHByb2plY3RzPgoJPHByb2plY3RzPgoJPC9wcm9qZWN0cz4KCTwvcHJvamVjdHM+Cgk8YnVpbGRTcGVjPgoJPGJ1aWxkU3BlYz4KCQk8YnVpbGRDb21tYW5kPgoJCTxidWlsZENvbW1hbmQ+CgkJCTxuYW1lPm9yZy5lY2xpcHNlLmNkdC5tYW5hZ2VkYnVpbGRlci5jb3JlLmdlbm1ha2VidWlsZGVyPC9uYW1lPgoJCQk8bmFtZT5vcmcuZWNsaXBzZS5jZHQubWFuYWdlZGJ1aWxkZXIuY29yZS5nZW5tYWtlYnVpbGRlcjwvbmFtZT4KCQkJPHRyaWdnZXJzPmNsZWFuLGZ1bGwsaW5jcmVtZW50YWwsPC90cmlnZ2Vycz4KCQkJPHRyaWdnZXJzPmNsZWFuLGZ1bGwsaW5jcmVtZW50YWwsPC90cmlnZ2Vycz4KCQkJPGFyZ3VtZW50cz4KCQkJPGFyZ3VtZW50cz4KCQkJPC9hcmd1bWVudHM+CgkJCTwvYXJndW1lbnRzPgoJCTwvYnVpbGRDb21tYW5kPgoJCTwvYnVpbGRDb21tYW5kPgoJCTxidWlsZENvbW1hbmQ+CgkJPGJ1aWxkQ29tbWFuZD4KCQkJPG5hbWU+b3JnLmVjbGlwc2UuY2R0Lm1hbmFnZWRidWlsZGVyLmNvcmUuU2Nhbm5lckNvbmZpZ0J1aWxkZXI8L25hbWU+CgkJCTxuYW1lPm9yZy5lY2xpcHNlLmNkdC5tYW5hZ2VkYnVpbGRlci5jb3JlLlNjYW5uZXJDb25maWdCdWlsZGVyPC9uYW1lPgoJCQk8dHJpZ2dlcnM+ZnVsbCxpbmNyZW1lbnRhbCw8L3RyaWdnZXJzPgoJCQk8dHJpZ2dlcnM+ZnVsbCxpbmNyZW1lbnRhbCw8L3RyaWdnZXJzPgoJCQk8YXJndW1lbnRzPgoJCQk8YXJndW1lbnRzPgoJCQk8L2FyZ3VtZW50cz4KCQkJPC9hcmd1bWVudHM+CgkJPC9idWlsZENvbW1hbmQ+CgkJPC9idWlsZENvbW1hbmQ+Cgk8L2J1aWxkU3BlYz4KCTwvYnVpbGRTcGVjPgoJPG5hdHVyZXM+Cgk8bmF0dXJlcz4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVUHJvamVjdE5hdHVyZTwvbmF0dXJlPgoJCTxuYXR1cmU+Y29tLnN0LnN0bTMyY3ViZS5pZGUubWN1Lk1DVUN1YmVQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVQ3ViZVByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5jb3JlLmNuYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5jb3JlLmNuYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5jb3JlLmNjbmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5vcmcuZWNsaXBzZS5jZHQuY29yZS5jY25hdHVyZTwvbmF0dXJlPgoJCTxuYXR1cmU+Y29tLnN0LnN0bTMyY3ViZS5pZGUubWN1Lk1DVUN1YmVJZGVTZXJ2aWNlc1JldkFldjJQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVQ3ViZUlkZVNlcnZpY2VzUmV2QWV2MlByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VBZHZhbmNlZFN0cnVjdHVyZVByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VBZHZhbmNlZFN0cnVjdHVyZVByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VFbmRVc2VyRGlzYWJsZWRUcnVzdFpvbmVQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVRW5kVXNlckRpc2FibGVkVHJ1c3Rab25lUHJvamVjdE5hdHVyZTwvbmF0dXJlPgoJCTxuYXR1cmU+Y29tLnN0LnN0bTMyY3ViZS5pZGUubWN1Lk1DVVNpbmdsZUNwdVByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VTaW5nbGVDcHVQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVUm9vdFByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VSb290UHJvamVjdE5hdHVyZTwvbmF0dXJlPgoJCTxuYXR1cmU+b3JnLmVjbGlwc2UuY2R0Lm1hbmFnZWRidWlsZGVyLmNvcmUubWFuYWdlZEJ1aWxkTmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5vcmcuZWNsaXBzZS5jZHQubWFuYWdlZGJ1aWxkZXIuY29yZS5tYW5hZ2VkQnVpbGROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5tYW5hZ2VkYnVpbGRlci5jb3JlLlNjYW5uZXJDb25maWdOYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5tYW5hZ2VkYnVpbGRlci5jb3JlLlNjYW5uZXJDb25maWdOYXR1cmU8L25hdHVyZT4KCTwvbmF0dXJlcz4KCTwvbmF0dXJlcz4KCTxsaW5rZWRSZXNvdXJjZXM+Cgk8bGlua2VkUmVzb3VyY2VzPgoJCTxsaW5rPgoJCTxsaW5rPgoJCQk8bmFtZT5NYXRoRXh0cmFzX0RTUDwvbmFtZT4KCQkJPG5hbWU+TWF0aEV4dHJhc19EU1A8L25hbWU+CgkJCTx0eXBlPjI8L3R5cGU+CgkJCTx0eXBlPjI8L3R5cGU+CgkJCTxsb2NhdGlvbj5DOi9Vc2Vycy9jYXNodC9yZXBvcy9ldXJvcmFjay1iZWV0dHdlZWsvQmVldFR3ZWVrLUZpcm13YXJlL01hdGhFeHRyYXNfRFNQPC9sb2NhdGlvbj4KCQkJPGxvY2F0aW9uPiR7Uk9PVF9ESVJ9QmVldFR3ZWVrLUZpcm13YXJlL01hdGhFeHRyYXNfRFNQPC9sb2NhdGlvbj4KCQk8L2xpbms+CgkJPC9saW5rPgoJCTxsaW5rPgoJCTxsaW5rPgoJCQk8bmFtZT5TVE0zMlV0aWxpdGllczwvbmFtZT4KCQkJPG5hbWU+U1RNMzJVdGlsaXRpZXM8L25hbWU+CgkJCTx0eXBlPjI8L3R5cGU+CgkJCTx0eXBlPjI8L3R5cGU+CgkJCTxsb2NhdGlvbj5DOi9Vc2Vycy9jYXNodC9yZXBvcy9ldXJvcmFjay1iZWV0dHdlZWsvQmVldFR3ZWVrLUZpcm13YXJlL1NUTTMyVXRpbGl0aWVzPC9sb2NhdGlvbj4KCQkJPGxvY2F0aW9uPiR7Uk9PVF9ESVJ9QmVldFR3ZWVrLUZpcm13YXJlL1NUTTMyVXRpbGl0aWVzPC9sb2NhdGlvbj4KCQk8L2xpbms+CgkJPC9saW5rPgoJCTxsaW5rPgoJCTxsaW5rPgoJCQk8bmFtZT5TaGFyZWRTb3VyY2U8L25hbWU+CgkJCTxuYW1lPlNoYXJlZFNvdXJjZTwvbmFtZT4KCQkJPHR5cGU+MjwvdHlwZT4KCQkJPHR5cGU+MjwvdHlwZT4KCQkJPGxvY2F0aW9uPkM6L1VzZXJzL2Nhc2h0L3JlcG9zL2V1cm9yYWNrLWJlZXR0d2Vlay9CZWV0VHdlZWstRmlybXdhcmUvU2hhcmVkU291cmNlPC9sb2NhdGlvbj4KCQkJPGxvY2F0aW9uPiR7Uk9PVF9ESVJ9QmVldFR3ZWVrLUZpcm13YXJlL1NoYXJlZFNvdXJjZTwvbG9jYXRpb24+CgkJPC9saW5rPgoJCTwvbGluaz4KCTwvbGlua2VkUmVzb3VyY2VzPgoJPC9saW5rZWRSZXNvdXJjZXM+CjwvcHJvamVjdERlc2NyaXB0aW9uPgo8L3Byb2plY3REZXNjcmlwdGlvbj4KAAAAAAAAAAAfDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHQwAAAAAAAD2CwAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAfDgAAPD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHByb2plY3REZXNjcmlwdGlvbj4KPHByb2plY3REZXNjcmlwdGlvbj4KCTxuYW1lPkRTUEJvYXJkSDc8L25hbWU+Cgk8bmFtZT5EU1BCb2FyZEg3PC9uYW1lPgoJPGNvbW1lbnQ+PC9jb21tZW50PgoJPGNvbW1lbnQ+PC9jb21tZW50PgoJPHByb2plY3RzPgoJPHByb2plY3RzPgoJPC9wcm9qZWN0cz4KCTwvcHJvamVjdHM+Cgk8YnVpbGRTcGVjPgoJPGJ1aWxkU3BlYz4KCQk8YnVpbGRDb21tYW5kPgoJCTxidWlsZENvbW1hbmQ+CgkJCTxuYW1lPm9yZy5lY2xpcHNlLmNkdC5tYW5hZ2VkYnVpbGRlci5jb3JlLmdlbm1ha2VidWlsZGVyPC9uYW1lPgoJCQk8bmFtZT5vcmcuZWNsaXBzZS5jZHQubWFuYWdlZGJ1aWxkZXIuY29yZS5nZW5tYWtlYnVpbGRlcjwvbmFtZT4KCQkJPHRyaWdnZXJzPmNsZWFuLGZ1bGwsaW5jcmVtZW50YWwsPC90cmlnZ2Vycz4KCQkJPHRyaWdnZXJzPmNsZWFuLGZ1bGwsaW5jcmVtZW50YWwsPC90cmlnZ2Vycz4KCQkJPGFyZ3VtZW50cz4KCQkJPGFyZ3VtZW50cz4KCQkJPC9hcmd1bWVudHM+CgkJCTwvYXJndW1lbnRzPgoJCTwvYnVpbGRDb21tYW5kPgoJCTwvYnVpbGRDb21tYW5kPgoJCTxidWlsZENvbW1hbmQ+CgkJPGJ1aWxkQ29tbWFuZD4KCQkJPG5hbWU+b3JnLmVjbGlwc2UuY2R0Lm1hbmFnZWRidWlsZGVyLmNvcmUuU2Nhbm5lckNvbmZpZ0J1aWxkZXI8L25hbWU+CgkJCTxuYW1lPm9yZy5lY2xpcHNlLmNkdC5tYW5hZ2VkYnVpbGRlci5jb3JlLlNjYW5uZXJDb25maWdCdWlsZGVyPC9uYW1lPgoJCQk8dHJpZ2dlcnM+ZnVsbCxpbmNyZW1lbnRhbCw8L3RyaWdnZXJzPgoJCQk8dHJpZ2dlcnM+ZnVsbCxpbmNyZW1lbnRhbCw8L3RyaWdnZXJzPgoJCQk8YXJndW1lbnRzPgoJCQk8YXJndW1lbnRzPgoJCQk8L2FyZ3VtZW50cz4KCQkJPC9hcmd1bWVudHM+CgkJPC9idWlsZENvbW1hbmQ+CgkJPC9idWlsZENvbW1hbmQ+Cgk8L2J1aWxkU3BlYz4KCTwvYnVpbGRTcGVjPgoJPG5hdHVyZXM+Cgk8bmF0dXJlcz4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVUHJvamVjdE5hdHVyZTwvbmF0dXJlPgoJCTxuYXR1cmU+Y29tLnN0LnN0bTMyY3ViZS5pZGUubWN1Lk1DVUN1YmVQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVQ3ViZVByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5jb3JlLmNuYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5jb3JlLmNuYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5jb3JlLmNjbmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5vcmcuZWNsaXBzZS5jZHQuY29yZS5jY25hdHVyZTwvbmF0dXJlPgoJCTxuYXR1cmU+Y29tLnN0LnN0bTMyY3ViZS5pZGUubWN1Lk1DVUN1YmVJZGVTZXJ2aWNlc1JldkFldjJQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVQ3ViZUlkZVNlcnZpY2VzUmV2QWV2MlByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VBZHZhbmNlZFN0cnVjdHVyZVByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VBZHZhbmNlZFN0cnVjdHVyZVByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VFbmRVc2VyRGlzYWJsZWRUcnVzdFpvbmVQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVRW5kVXNlckRpc2FibGVkVHJ1c3Rab25lUHJvamVjdE5hdHVyZTwvbmF0dXJlPgoJCTxuYXR1cmU+Y29tLnN0LnN0bTMyY3ViZS5pZGUubWN1Lk1DVVNpbmdsZUNwdVByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VTaW5nbGVDcHVQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVUm9vdFByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VSb290UHJvamVjdE5hdHVyZTwvbmF0dXJlPgoJCTxuYXR1cmU+b3JnLmVjbGlwc2UuY2R0Lm1hbmFnZWRidWlsZGVyLmNvcmUubWFuYWdlZEJ1aWxkTmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5vcmcuZWNsaXBzZS5jZHQubWFuYWdlZGJ1aWxkZXIuY29yZS5tYW5hZ2VkQnVpbGROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5tYW5hZ2VkYnVpbGRlci5jb3JlLlNjYW5uZXJDb25maWdOYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5tYW5hZ2VkYnVpbGRlci5jb3JlLlNjYW5uZXJDb25maWdOYXR1cmU8L25hdHVyZT4KCTwvbmF0dXJlcz4KCTwvbmF0dXJlcz4KCTxsaW5rZWRSZXNvdXJjZXM+Cgk8bGlua2VkUmVzb3VyY2VzPgoJCTxsaW5rPgoJCTxsaW5rPgoJCQk8bmFtZT5NYXRoRXh0cmFzX0RTUDwvbmFtZT4KCQkJPG5hbWU+TWF0aEV4dHJhc19EU1A8L25hbWU+CgkJCTx0eXBlPjI8L3R5cGU+CgkJCTx0eXBlPjI8L3R5cGU+CgkJCTxsb2NhdGlvbj5DOi9Vc2Vycy9jYXNodC9yZXBvcy9ldXJvcmFjay1iZWV0dHdlZWsvQmVldFR3ZWVrLUZpcm13YXJlL01hdGhFeHRyYXNfRFNQPC9sb2NhdGlvbj4KCQkJPGxvY2F0aW9uPiR7Uk9PVF9ESVJ9QmVldFR3ZWVrLUZpcm13YXJlL01hdGhFeHRyYXNfRFNQPC9sb2NhdGlvbj4KCQk8L2xpbms+CgkJPC9saW5rPgoJCTxsaW5rPgoJCTxsaW5rPgoJCQk8bmFtZT5TVE0zMlV0aWxpdGllczwvbmFtZT4KCQkJPG5hbWU+U1RNMzJVdGlsaXRpZXM8L25hbWU+CgkJCTx0eXBlPjI8L3R5cGU+CgkJCTx0eXBlPjI8L3R5cGU+CgkJCTxsb2NhdGlvbj5DOi9Vc2Vycy9jYXNodC9yZXBvcy9ldXJvcmFjay1iZWV0dHdlZWsvQmVldFR3ZWVrLUZpcm13YXJlL1NUTTMyVXRpbGl0aWVzPC9sb2NhdGlvbj4KCQkJPGxvY2F0aW9uPiR7Uk9PVF9ESVJ9QmVldFR3ZWVrLUZpcm13YXJlL1NUTTMyVXRpbGl0aWVzPC9sb2NhdGlvbj4KCQk8L2xpbms+CgkJPC9saW5rPgoJCTxsaW5rPgoJCTxsaW5rPgoJCQk8bmFtZT5TaGFyZWRTb3VyY2U8L25hbWU+CgkJCTxuYW1lPlNoYXJlZFNvdXJjZTwvbmFtZT4KCQkJPHR5cGU+MjwvdHlwZT4KCQkJPHR5cGU+MjwvdHlwZT4KCQkJPGxvY2F0aW9uPkM6L1VzZXJzL2Nhc2h0L3JlcG9zL2V1cm9yYWNrLWJlZXR0d2Vlay9CZWV0VHdlZWstRmlybXdhcmUvU2hhcmVkU291cmNlPC9sb2NhdGlvbj4KCQkJPGxvY2F0aW9uPiR7Uk9PVF9ESVJ9QmVldFR3ZWVrLUZpcm13YXJlL1NoYXJlZFNvdXJjZTwvbG9jYXRpb24+CgkJPC9saW5rPgoJCTwvbGluaz4KCTwvbGlua2VkUmVzb3VyY2VzPgoJPC9saW5rZWRSZXNvdXJjZXM+CjwvcHJvamVjdERlc2NyaXB0aW9uPgo8L3Byb2plY3REZXNjcmlwdGlvbj4KAAAAAAAAAADkBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArAwAAAAAAACsDAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADkBgAAPD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHByb2plY3REZXNjcmlwdGlvbj4KCTxuYW1lPkRTUEJvYXJkSDc8L25hbWU+Cgk8Y29tbWVudD48L2NvbW1lbnQ+Cgk8cHJvamVjdHM+Cgk8L3Byb2plY3RzPgoJPGJ1aWxkU3BlYz4KCQk8YnVpbGRDb21tYW5kPgoJCQk8bmFtZT5vcmcuZWNsaXBzZS5jZHQubWFuYWdlZGJ1aWxkZXIuY29yZS5nZW5tYWtlYnVpbGRlcjwvbmFtZT4KCQkJPHRyaWdnZXJzPmNsZWFuLGZ1bGwsaW5jcmVtZW50YWwsPC90cmlnZ2Vycz4KCQkJPGFyZ3VtZW50cz4KCQkJPC9hcmd1bWVudHM+CgkJPC9idWlsZENvbW1hbmQ+CgkJPGJ1aWxkQ29tbWFuZD4KCQkJPG5hbWU+b3JnLmVjbGlwc2UuY2R0Lm1hbmFnZWRidWlsZGVyLmNvcmUuU2Nhbm5lckNvbmZpZ0J1aWxkZXI8L25hbWU+CgkJCTx0cmlnZ2Vycz5mdWxsLGluY3JlbWVudGFsLDwvdHJpZ2dlcnM+CgkJCTxhcmd1bWVudHM+CgkJCTwvYXJndW1lbnRzPgoJCTwvYnVpbGRDb21tYW5kPgoJPC9idWlsZFNwZWM+Cgk8bmF0dXJlcz4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVQ3ViZVByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5jb3JlLmNuYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5jb3JlLmNjbmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVQ3ViZUlkZVNlcnZpY2VzUmV2QWV2MlByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VBZHZhbmNlZFN0cnVjdHVyZVByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VFbmRVc2VyRGlzYWJsZWRUcnVzdFpvbmVQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVU2luZ2xlQ3B1UHJvamVjdE5hdHVyZTwvbmF0dXJlPgoJCTxuYXR1cmU+Y29tLnN0LnN0bTMyY3ViZS5pZGUubWN1Lk1DVVJvb3RQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5vcmcuZWNsaXBzZS5jZHQubWFuYWdlZGJ1aWxkZXIuY29yZS5tYW5hZ2VkQnVpbGROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5tYW5hZ2VkYnVpbGRlci5jb3JlLlNjYW5uZXJDb25maWdOYXR1cmU8L25hdHVyZT4KCTwvbmF0dXJlcz4KCTxsaW5rZWRSZXNvdXJjZXM+CgkJPGxpbms+CgkJCTxuYW1lPk1hdGhFeHRyYXNfRFNQPC9uYW1lPgoJCQk8dHlwZT4yPC90eXBlPgoJCQk8bG9jYXRpb24+JHtST09UX0RJUn1CZWV0VHdlZWstRmlybXdhcmUvTWF0aEV4dHJhc19EU1A8L2xvY2F0aW9uPgoJCTwvbGluaz4KCQk8bGluaz4KCQkJPG5hbWU+U1RNMzJVdGlsaXRpZXM8L25hbWU+CgkJCTx0eXBlPjI8L3R5cGU+CgkJCTxsb2NhdGlvbj4ke1JPT1RfRElSfUJlZXRUd2Vlay1GaXJtd2FyZS9TVE0zMlV0aWxpdGllczwvbG9jYXRpb24+CgkJPC9saW5rPgoJCTxsaW5rPgoJCQk8bmFtZT5TaGFyZWRTb3VyY2U8L25hbWU+CgkJCTx0eXBlPjI8L3R5cGU+CgkJCTxsb2NhdGlvbj4ke1JPT1RfRElSfUJlZXRUd2Vlay1GaXJtd2FyZS9TaGFyZWRTb3VyY2U8L2xvY2F0aW9uPgoJCTwvbGluaz4KCTwvbGlua2VkUmVzb3VyY2VzPgo8L3Byb2plY3REZXNjcmlwdGlvbj4KAAAAAAAAAADkBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5AYAAAAAAADkBgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<projectDescription>\n\t<name>DSPBoardH7</name>\n\t<comment></comment>\n\t<projects>\n\t</projects>\n\t<buildSpec>\n\t\t<buildCommand>\n\t\t\t<name>org.eclipse.cdt.managedbuilder.core.genmakebuilder</name>\n\t\t\t<triggers>clean,full,incremental,</triggers>\n\t\t\t<arguments>\n\t\t\t</arguments>\n\t\t</buildCommand>\n\t\t<buildCommand>\n\t\t\t<name>org.eclipse.cdt.managedbuilder.core.ScannerConfigBuilder</name>\n\t\t\t<triggers>full,incremental,</triggers>\n\t\t\t<arguments>\n\t\t\t</arguments>\n\t\t</buildCommand>\n\t</buildSpec>\n\t<natures>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCUProjectNature</nature>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCUCubeProjectNature</nature>\n\t\t<nature>org.eclipse.cdt.core.cnature</nature>\n\t\t<nature>org.eclipse.cdt.core.ccnature</nature>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCUCubeIdeServicesRevAev2ProjectNature</nature>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCUAdvancedStructureProjectNature</nature>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCUEndUserDisabledTrustZoneProjectNature</nature>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCUSingleCpuProjectNature</nature>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCURootProjectNature</nature>\n\t\t<nature>org.eclipse.cdt.managedbuilder.core.managedBuildNature</nature>\n\t\t<nature>org.eclipse.cdt.managedbuilder.core.ScannerConfigNature</nature>\n\t</natures>\n\t<linkedResources>\n\t\t<link>\n\t\t\t<name>MathExtras_DSP</name>\n\t\t\t<type>2</type>\n\t\t\t<location>C:/Users/casht/repos/eurorack-beettweek/BeetTweek-Firmware/MathExtras_DSP</location>\n\t\t</link>\n\t\t<link>\n\t\t\t<name>STM32Utilities</name>\n\t\t\t<type>2</type>\n\t\t\t<location>C:/Users/casht/repos/eurorack-beettweek/BeetTweek-Firmware/STM32Utilities</location>\n\t\t</link>\n\t\t<link>\n\t\t\t<name>SharedSource</name>\n\t\t\t<type>2</type>\n\t\t\t<location>C:/Users/casht/repos/eurorack-beettweek/BeetTweek-Firmware/SharedSource</location>\n\t\t</link>\n\t</linkedResources>\n</projectDescription>\n",
			"file": "/C/Users/casht/repos/eurorack-beettweek/BeetTweek-Firmware/DSPBoardH7/.project.old",
			"file_size": 1902,
			"file_write_time": 132888078930352166,
			"settings":
			{
				"buffer_size": 1851,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/casht/repos/eurorack-beettweek/BeetTweek-Firmware/DSPBoardH7/.cproject.templated",
			"settings":
			{
				"buffer_size": 49310,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<projectDescription>\n\t<name>DSPBoardH7</name>\n\t<comment></comment>\n\t<projects>\n\t</projects>\n\t<buildSpec>\n\t\t<buildCommand>\n\t\t\t<name>org.eclipse.cdt.managedbuilder.core.genmakebuilder</name>\n\t\t\t<triggers>clean,full,incremental,</triggers>\n\t\t\t<arguments>\n\t\t\t</arguments>\n\t\t</buildCommand>\n\t\t<buildCommand>\n\t\t\t<name>org.eclipse.cdt.managedbuilder.core.ScannerConfigBuilder</name>\n\t\t\t<triggers>full,incremental,</triggers>\n\t\t\t<arguments>\n\t\t\t</arguments>\n\t\t</buildCommand>\n\t</buildSpec>\n\t<natures>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCUProjectNature</nature>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCUCubeProjectNature</nature>\n\t\t<nature>org.eclipse.cdt.core.cnature</nature>\n\t\t<nature>org.eclipse.cdt.core.ccnature</nature>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCUCubeIdeServicesRevAev2ProjectNature</nature>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCUAdvancedStructureProjectNature</nature>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCUEndUserDisabledTrustZoneProjectNature</nature>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCUSingleCpuProjectNature</nature>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCURootProjectNature</nature>\n\t\t<nature>org.eclipse.cdt.managedbuilder.core.managedBuildNature</nature>\n\t\t<nature>org.eclipse.cdt.managedbuilder.core.ScannerConfigNature</nature>\n\t</natures>\n\t<linkedResources>\n\t\t<link>\n\t\t\t<name>MathExtras_DSP</name>\n\t\t\t<type>2</type>\n\t\t\t<location>C:/Users/casht/Desktop/TESTFOLDER/BeetTweek-Firmware/MathExtras_DSP</location>\n\t\t</link>\n\t\t<link>\n\t\t\t<name>STM32Utilities</name>\n\t\t\t<type>2</type>\n\t\t\t<location>C:/Users/casht/Desktop/TESTFOLDER/BeetTweek-Firmware/STM32Utilities</location>\n\t\t</link>\n\t\t<link>\n\t\t\t<name>SharedSource</name>\n\t\t\t<type>2</type>\n\t\t\t<location>C:/Users/casht/Desktop/TESTFOLDER/BeetTweek-Firmware/SharedSource</location>\n\t\t</link>\n\t</linkedResources>\n</projectDescription>\n",
			"file": "/C/Users/casht/Desktop/TESTFOLDER/BeetTweek-Firmware/DSPBoardH7/.project.deployed",
			"file_size": 1884,
			"file_write_time": 133124822052915424,
			"settings":
			{
				"buffer_size": 1833,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABiBwAAPD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHByb2plY3REZXNjcmlwdGlvbj4KCTxuYW1lPkRTUEJvYXJkSDc8L25hbWU+Cgk8Y29tbWVudD48L2NvbW1lbnQ+Cgk8cHJvamVjdHM+Cgk8L3Byb2plY3RzPgoJPGJ1aWxkU3BlYz4KCQk8YnVpbGRDb21tYW5kPgoJCQk8bmFtZT5vcmcuZWNsaXBzZS5jZHQubWFuYWdlZGJ1aWxkZXIuY29yZS5nZW5tYWtlYnVpbGRlcjwvbmFtZT4KCQkJPHRyaWdnZXJzPmNsZWFuLGZ1bGwsaW5jcmVtZW50YWwsPC90cmlnZ2Vycz4KCQkJPGFyZ3VtZW50cz4KCQkJPC9hcmd1bWVudHM+CgkJPC9idWlsZENvbW1hbmQ+CgkJPGJ1aWxkQ29tbWFuZD4KCQkJPG5hbWU+b3JnLmVjbGlwc2UuY2R0Lm1hbmFnZWRidWlsZGVyLmNvcmUuU2Nhbm5lckNvbmZpZ0J1aWxkZXI8L25hbWU+CgkJCTx0cmlnZ2Vycz5mdWxsLGluY3JlbWVudGFsLDwvdHJpZ2dlcnM+CgkJCTxhcmd1bWVudHM+CgkJCTwvYXJndW1lbnRzPgoJCTwvYnVpbGRDb21tYW5kPgoJPC9idWlsZFNwZWM+Cgk8bmF0dXJlcz4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVQ3ViZVByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5jb3JlLmNuYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5jb3JlLmNjbmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVQ3ViZUlkZVNlcnZpY2VzUmV2QWV2MlByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VBZHZhbmNlZFN0cnVjdHVyZVByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VFbmRVc2VyRGlzYWJsZWRUcnVzdFpvbmVQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVU2luZ2xlQ3B1UHJvamVjdE5hdHVyZTwvbmF0dXJlPgoJCTxuYXR1cmU+Y29tLnN0LnN0bTMyY3ViZS5pZGUubWN1Lk1DVVJvb3RQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5vcmcuZWNsaXBzZS5jZHQubWFuYWdlZGJ1aWxkZXIuY29yZS5tYW5hZ2VkQnVpbGROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5tYW5hZ2VkYnVpbGRlci5jb3JlLlNjYW5uZXJDb25maWdOYXR1cmU8L25hdHVyZT4KCTwvbmF0dXJlcz4KCTxsaW5rZWRSZXNvdXJjZXM+CgkJPGxpbms+CgkJCTxuYW1lPk1hdGhFeHRyYXNfRFNQPC9uYW1lPgoJCQk8dHlwZT4yPC90eXBlPgoJCQk8bG9jYXRpb24+QzpcVXNlcnNcY2FzaHRcRGVza3RvcFxURVNURk9MREVSXEJlZXRUd2Vlay1GaXJtd2FyZVxCZWV0VHdlZWstRmlybXdhcmUvTWF0aEV4dHJhc19EU1A8L2xvY2F0aW9uPgoJCTwvbGluaz4KCQk8bGluaz4KCQkJPG5hbWU+U1RNMzJVdGlsaXRpZXM8L25hbWU+CgkJCTx0eXBlPjI8L3R5cGU+CgkJCTxsb2NhdGlvbj5DOlxVc2Vyc1xjYXNodFxEZXNrdG9wXFRFU1RGT0xERVJcQmVldFR3ZWVrLUZpcm13YXJlXEJlZXRUd2Vlay1GaXJtd2FyZS9TVE0zMlV0aWxpdGllczwvbG9jYXRpb24+CgkJPC9saW5rPgoJCTxsaW5rPgoJCQk8bmFtZT5TaGFyZWRTb3VyY2U8L25hbWU+CgkJCTx0eXBlPjI8L3R5cGU+CgkJCTxsb2NhdGlvbj5DOlxVc2Vyc1xjYXNodFxEZXNrdG9wXFRFU1RGT0xERVJcQmVldFR3ZWVrLUZpcm13YXJlXEJlZXRUd2Vlay1GaXJtd2FyZS9TaGFyZWRTb3VyY2U8L2xvY2F0aW9uPgoJCTwvbGluaz4KCTwvbGlua2VkUmVzb3VyY2VzPgo8L3Byb2plY3REZXNjcmlwdGlvbj4KAAAAAAAAAAApBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiwYAAAAAAACLBgAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAApBwAAPD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHByb2plY3REZXNjcmlwdGlvbj4KCTxuYW1lPkRTUEJvYXJkSDc8L25hbWU+Cgk8Y29tbWVudD48L2NvbW1lbnQ+Cgk8cHJvamVjdHM+Cgk8L3Byb2plY3RzPgoJPGJ1aWxkU3BlYz4KCQk8YnVpbGRDb21tYW5kPgoJCQk8bmFtZT5vcmcuZWNsaXBzZS5jZHQubWFuYWdlZGJ1aWxkZXIuY29yZS5nZW5tYWtlYnVpbGRlcjwvbmFtZT4KCQkJPHRyaWdnZXJzPmNsZWFuLGZ1bGwsaW5jcmVtZW50YWwsPC90cmlnZ2Vycz4KCQkJPGFyZ3VtZW50cz4KCQkJPC9hcmd1bWVudHM+CgkJPC9idWlsZENvbW1hbmQ+CgkJPGJ1aWxkQ29tbWFuZD4KCQkJPG5hbWU+b3JnLmVjbGlwc2UuY2R0Lm1hbmFnZWRidWlsZGVyLmNvcmUuU2Nhbm5lckNvbmZpZ0J1aWxkZXI8L25hbWU+CgkJCTx0cmlnZ2Vycz5mdWxsLGluY3JlbWVudGFsLDwvdHJpZ2dlcnM+CgkJCTxhcmd1bWVudHM+CgkJCTwvYXJndW1lbnRzPgoJCTwvYnVpbGRDb21tYW5kPgoJPC9idWlsZFNwZWM+Cgk8bmF0dXJlcz4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVQ3ViZVByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5jb3JlLmNuYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5jb3JlLmNjbmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVQ3ViZUlkZVNlcnZpY2VzUmV2QWV2MlByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VBZHZhbmNlZFN0cnVjdHVyZVByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VFbmRVc2VyRGlzYWJsZWRUcnVzdFpvbmVQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVU2luZ2xlQ3B1UHJvamVjdE5hdHVyZTwvbmF0dXJlPgoJCTxuYXR1cmU+Y29tLnN0LnN0bTMyY3ViZS5pZGUubWN1Lk1DVVJvb3RQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5vcmcuZWNsaXBzZS5jZHQubWFuYWdlZGJ1aWxkZXIuY29yZS5tYW5hZ2VkQnVpbGROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5tYW5hZ2VkYnVpbGRlci5jb3JlLlNjYW5uZXJDb25maWdOYXR1cmU8L25hdHVyZT4KCTwvbmF0dXJlcz4KCTxsaW5rZWRSZXNvdXJjZXM+CgkJPGxpbms+CgkJCTxuYW1lPk1hdGhFeHRyYXNfRFNQPC9uYW1lPgoJCQk8dHlwZT4yPC90eXBlPgoJCQk8bG9jYXRpb24+QzpcVXNlcnNcY2FzaHRcRGVza3RvcFxURVNURk9MREVSXEJlZXRUd2Vlay1GaXJtd2FyZS9NYXRoRXh0cmFzX0RTUDwvbG9jYXRpb24+CgkJPC9saW5rPgoJCTxsaW5rPgoJCQk8bmFtZT5TVE0zMlV0aWxpdGllczwvbmFtZT4KCQkJPHR5cGU+MjwvdHlwZT4KCQkJPGxvY2F0aW9uPkM6XFVzZXJzXGNhc2h0XERlc2t0b3BcVEVTVEZPTERFUlxCZWV0VHdlZWstRmlybXdhcmUvU1RNMzJVdGlsaXRpZXM8L2xvY2F0aW9uPgoJCTwvbGluaz4KCQk8bGluaz4KCQkJPG5hbWU+U2hhcmVkU291cmNlPC9uYW1lPgoJCQk8dHlwZT4yPC90eXBlPgoJCQk8bG9jYXRpb24+QzpcVXNlcnNcY2FzaHRcRGVza3RvcFxURVNURk9MREVSXEJlZXRUd2Vlay1GaXJtd2FyZS9TaGFyZWRTb3VyY2U8L2xvY2F0aW9uPgoJCTwvbGluaz4KCTwvbGlua2VkUmVzb3VyY2VzPgo8L3Byb2plY3REZXNjcmlwdGlvbj4KAAAAAAAAAAApBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiwYAAAAAAACLBgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<projectDescription>\n\t<name>DSPBoardH7</name>\n\t<comment></comment>\n\t<projects>\n\t</projects>\n\t<buildSpec>\n\t\t<buildCommand>\n\t\t\t<name>org.eclipse.cdt.managedbuilder.core.genmakebuilder</name>\n\t\t\t<triggers>clean,full,incremental,</triggers>\n\t\t\t<arguments>\n\t\t\t</arguments>\n\t\t</buildCommand>\n\t\t<buildCommand>\n\t\t\t<name>org.eclipse.cdt.managedbuilder.core.ScannerConfigBuilder</name>\n\t\t\t<triggers>full,incremental,</triggers>\n\t\t\t<arguments>\n\t\t\t</arguments>\n\t\t</buildCommand>\n\t</buildSpec>\n\t<natures>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCUProjectNature</nature>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCUCubeProjectNature</nature>\n\t\t<nature>org.eclipse.cdt.core.cnature</nature>\n\t\t<nature>org.eclipse.cdt.core.ccnature</nature>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCUCubeIdeServicesRevAev2ProjectNature</nature>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCUAdvancedStructureProjectNature</nature>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCUEndUserDisabledTrustZoneProjectNature</nature>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCUSingleCpuProjectNature</nature>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCURootProjectNature</nature>\n\t\t<nature>org.eclipse.cdt.managedbuilder.core.managedBuildNature</nature>\n\t\t<nature>org.eclipse.cdt.managedbuilder.core.ScannerConfigNature</nature>\n\t</natures>\n\t<linkedResources>\n\t\t<link>\n\t\t\t<name>MathExtras_DSP</name>\n\t\t\t<type>2</type>\n\t\t\t<location>C:/Users/casht/Desktop/TESTFOLDER/BeetTweek-Firmware/MathExtras_DSP</location>\n\t\t</link>\n\t\t<link>\n\t\t\t<name>STM32Utilities</name>\n\t\t\t<type>2</type>\n\t\t\t<location>C:/Users/casht/Desktop/TESTFOLDER/BeetTweek-Firmware/STM32Utilities</location>\n\t\t</link>\n\t\t<link>\n\t\t\t<name>SharedSource</name>\n\t\t\t<type>2</type>\n\t\t\t<location>C:/Users/casht/Desktop/TESTFOLDER/BeetTweek-Firmware/SharedSource</location>\n\t\t</link>\n\t</linkedResources>\n</projectDescription>\n",
			"file": "/C/Users/casht/Desktop/TESTFOLDER/BeetTweek-Firmware/DSPBoardH7/.project",
			"file_size": 1884,
			"file_write_time": 133124825179779020,
			"settings":
			{
				"buffer_size": 1833,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAApBwAAPD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHByb2plY3REZXNjcmlwdGlvbj4KCTxuYW1lPkRTUEJvYXJkSDc8L25hbWU+Cgk8Y29tbWVudD48L2NvbW1lbnQ+Cgk8cHJvamVjdHM+Cgk8L3Byb2plY3RzPgoJPGJ1aWxkU3BlYz4KCQk8YnVpbGRDb21tYW5kPgoJCQk8bmFtZT5vcmcuZWNsaXBzZS5jZHQubWFuYWdlZGJ1aWxkZXIuY29yZS5nZW5tYWtlYnVpbGRlcjwvbmFtZT4KCQkJPHRyaWdnZXJzPmNsZWFuLGZ1bGwsaW5jcmVtZW50YWwsPC90cmlnZ2Vycz4KCQkJPGFyZ3VtZW50cz4KCQkJPC9hcmd1bWVudHM+CgkJPC9idWlsZENvbW1hbmQ+CgkJPGJ1aWxkQ29tbWFuZD4KCQkJPG5hbWU+b3JnLmVjbGlwc2UuY2R0Lm1hbmFnZWRidWlsZGVyLmNvcmUuU2Nhbm5lckNvbmZpZ0J1aWxkZXI8L25hbWU+CgkJCTx0cmlnZ2Vycz5mdWxsLGluY3JlbWVudGFsLDwvdHJpZ2dlcnM+CgkJCTxhcmd1bWVudHM+CgkJCTwvYXJndW1lbnRzPgoJCTwvYnVpbGRDb21tYW5kPgoJPC9idWlsZFNwZWM+Cgk8bmF0dXJlcz4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVQ3ViZVByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5jb3JlLmNuYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5jb3JlLmNjbmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVQ3ViZUlkZVNlcnZpY2VzUmV2QWV2MlByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VBZHZhbmNlZFN0cnVjdHVyZVByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VFbmRVc2VyRGlzYWJsZWRUcnVzdFpvbmVQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVU2luZ2xlQ3B1UHJvamVjdE5hdHVyZTwvbmF0dXJlPgoJCTxuYXR1cmU+Y29tLnN0LnN0bTMyY3ViZS5pZGUubWN1Lk1DVVJvb3RQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5vcmcuZWNsaXBzZS5jZHQubWFuYWdlZGJ1aWxkZXIuY29yZS5tYW5hZ2VkQnVpbGROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5tYW5hZ2VkYnVpbGRlci5jb3JlLlNjYW5uZXJDb25maWdOYXR1cmU8L25hdHVyZT4KCTwvbmF0dXJlcz4KCTxsaW5rZWRSZXNvdXJjZXM+CgkJPGxpbms+CgkJCTxuYW1lPk1hdGhFeHRyYXNfRFNQPC9uYW1lPgoJCQk8dHlwZT4yPC90eXBlPgoJCQk8bG9jYXRpb24+QzpcVXNlcnNcY2FzaHRcRGVza3RvcFxURVNURk9MREVSXEJlZXRUd2Vlay1GaXJtd2FyZS9NYXRoRXh0cmFzX0RTUDwvbG9jYXRpb24+CgkJPC9saW5rPgoJCTxsaW5rPgoJCQk8bmFtZT5TVE0zMlV0aWxpdGllczwvbmFtZT4KCQkJPHR5cGU+MjwvdHlwZT4KCQkJPGxvY2F0aW9uPkM6XFVzZXJzXGNhc2h0XERlc2t0b3BcVEVTVEZPTERFUlxCZWV0VHdlZWstRmlybXdhcmUvU1RNMzJVdGlsaXRpZXM8L2xvY2F0aW9uPgoJCTwvbGluaz4KCQk8bGluaz4KCQkJPG5hbWU+U2hhcmVkU291cmNlPC9uYW1lPgoJCQk8dHlwZT4yPC90eXBlPgoJCQk8bG9jYXRpb24+QzpcVXNlcnNcY2FzaHRcRGVza3RvcFxURVNURk9MREVSXEJlZXRUd2Vlay1GaXJtd2FyZS9TaGFyZWRTb3VyY2U8L2xvY2F0aW9uPgoJCTwvbGluaz4KCTwvbGlua2VkUmVzb3VyY2VzPgo8L3Byb2plY3REZXNjcmlwdGlvbj4KAAAAAAAAAAApBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAawYAAAAAAABrBgAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAApBwAAPD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHByb2plY3REZXNjcmlwdGlvbj4KCTxuYW1lPkRTUEJvYXJkSDc8L25hbWU+Cgk8Y29tbWVudD48L2NvbW1lbnQ+Cgk8cHJvamVjdHM+Cgk8L3Byb2plY3RzPgoJPGJ1aWxkU3BlYz4KCQk8YnVpbGRDb21tYW5kPgoJCQk8bmFtZT5vcmcuZWNsaXBzZS5jZHQubWFuYWdlZGJ1aWxkZXIuY29yZS5nZW5tYWtlYnVpbGRlcjwvbmFtZT4KCQkJPHRyaWdnZXJzPmNsZWFuLGZ1bGwsaW5jcmVtZW50YWwsPC90cmlnZ2Vycz4KCQkJPGFyZ3VtZW50cz4KCQkJPC9hcmd1bWVudHM+CgkJPC9idWlsZENvbW1hbmQ+CgkJPGJ1aWxkQ29tbWFuZD4KCQkJPG5hbWU+b3JnLmVjbGlwc2UuY2R0Lm1hbmFnZWRidWlsZGVyLmNvcmUuU2Nhbm5lckNvbmZpZ0J1aWxkZXI8L25hbWU+CgkJCTx0cmlnZ2Vycz5mdWxsLGluY3JlbWVudGFsLDwvdHJpZ2dlcnM+CgkJCTxhcmd1bWVudHM+CgkJCTwvYXJndW1lbnRzPgoJCTwvYnVpbGRDb21tYW5kPgoJPC9idWlsZFNwZWM+Cgk8bmF0dXJlcz4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVQ3ViZVByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5jb3JlLmNuYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5jb3JlLmNjbmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVQ3ViZUlkZVNlcnZpY2VzUmV2QWV2MlByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VBZHZhbmNlZFN0cnVjdHVyZVByb2plY3ROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPmNvbS5zdC5zdG0zMmN1YmUuaWRlLm1jdS5NQ1VFbmRVc2VyRGlzYWJsZWRUcnVzdFpvbmVQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5jb20uc3Quc3RtMzJjdWJlLmlkZS5tY3UuTUNVU2luZ2xlQ3B1UHJvamVjdE5hdHVyZTwvbmF0dXJlPgoJCTxuYXR1cmU+Y29tLnN0LnN0bTMyY3ViZS5pZGUubWN1Lk1DVVJvb3RQcm9qZWN0TmF0dXJlPC9uYXR1cmU+CgkJPG5hdHVyZT5vcmcuZWNsaXBzZS5jZHQubWFuYWdlZGJ1aWxkZXIuY29yZS5tYW5hZ2VkQnVpbGROYXR1cmU8L25hdHVyZT4KCQk8bmF0dXJlPm9yZy5lY2xpcHNlLmNkdC5tYW5hZ2VkYnVpbGRlci5jb3JlLlNjYW5uZXJDb25maWdOYXR1cmU8L25hdHVyZT4KCTwvbmF0dXJlcz4KCTxsaW5rZWRSZXNvdXJjZXM+CgkJPGxpbms+CgkJCTxuYW1lPk1hdGhFeHRyYXNfRFNQPC9uYW1lPgoJCQk8dHlwZT4yPC90eXBlPgoJCQk8bG9jYXRpb24+QzovVXNlcnMvY2FzaHQvRGVza3RvcC9URVNURk9MREVSL0JlZXRUd2Vlay1GaXJtd2FyZS9NYXRoRXh0cmFzX0RTUDwvbG9jYXRpb24+CgkJPC9saW5rPgoJCTxsaW5rPgoJCQk8bmFtZT5TVE0zMlV0aWxpdGllczwvbmFtZT4KCQkJPHR5cGU+MjwvdHlwZT4KCQkJPGxvY2F0aW9uPkM6L1VzZXJzL2Nhc2h0L0Rlc2t0b3AvVEVTVEZPTERFUi9CZWV0VHdlZWstRmlybXdhcmUvU1RNMzJVdGlsaXRpZXM8L2xvY2F0aW9uPgoJCTwvbGluaz4KCQk8bGluaz4KCQkJPG5hbWU+U2hhcmVkU291cmNlPC9uYW1lPgoJCQk8dHlwZT4yPC90eXBlPgoJCQk8bG9jYXRpb24+QzovVXNlcnMvY2FzaHQvRGVza3RvcC9URVNURk9MREVSL0JlZXRUd2Vlay1GaXJtd2FyZS9TaGFyZWRTb3VyY2U8L2xvY2F0aW9uPgoJCTwvbGluaz4KCTwvbGlua2VkUmVzb3VyY2VzPgo8L3Byb2plY3REZXNjcmlwdGlvbj4KAAAAAAAAAAApBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAawYAAAAAAABrBgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<projectDescription>\n\t<name>DSPBoardH7</name>\n\t<comment></comment>\n\t<projects>\n\t</projects>\n\t<buildSpec>\n\t\t<buildCommand>\n\t\t\t<name>org.eclipse.cdt.managedbuilder.core.genmakebuilder</name>\n\t\t\t<triggers>clean,full,incremental,</triggers>\n\t\t\t<arguments>\n\t\t\t</arguments>\n\t\t</buildCommand>\n\t\t<buildCommand>\n\t\t\t<name>org.eclipse.cdt.managedbuilder.core.ScannerConfigBuilder</name>\n\t\t\t<triggers>full,incremental,</triggers>\n\t\t\t<arguments>\n\t\t\t</arguments>\n\t\t</buildCommand>\n\t</buildSpec>\n\t<natures>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCUProjectNature</nature>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCUCubeProjectNature</nature>\n\t\t<nature>org.eclipse.cdt.core.cnature</nature>\n\t\t<nature>org.eclipse.cdt.core.ccnature</nature>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCUCubeIdeServicesRevAev2ProjectNature</nature>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCUAdvancedStructureProjectNature</nature>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCUEndUserDisabledTrustZoneProjectNature</nature>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCUSingleCpuProjectNature</nature>\n\t\t<nature>com.st.stm32cube.ide.mcu.MCURootProjectNature</nature>\n\t\t<nature>org.eclipse.cdt.managedbuilder.core.managedBuildNature</nature>\n\t\t<nature>org.eclipse.cdt.managedbuilder.core.ScannerConfigNature</nature>\n\t</natures>\n\t<linkedResources>\n\t\t<link>\n\t\t\t<name>MathExtras_DSP</name>\n\t\t\t<type>2</type>\n\t\t\t<location>C:/Users/casht/repos/eurorack-beettweek/BeetTweek-Firmware/MathExtras_DSP</location>\n\t\t</link>\n\t\t<link>\n\t\t\t<name>STM32Utilities</name>\n\t\t\t<type>2</type>\n\t\t\t<location>C:/Users/casht/repos/eurorack-beettweek/BeetTweek-Firmware/STM32Utilities</location>\n\t\t</link>\n\t\t<link>\n\t\t\t<name>SharedSource</name>\n\t\t\t<type>2</type>\n\t\t\t<location>C:/Users/casht/repos/eurorack-beettweek/BeetTweek-Firmware/SharedSource</location>\n\t\t</link>\n\t</linkedResources>\n</projectDescription>\n",
			"file": "/C/Users/casht/Desktop/TESTFOLDER/BeetTweek-Firmware/DSPBoardH7/.project.old",
			"file_size": 1902,
			"file_write_time": 132888078930352166,
			"settings":
			{
				"buffer_size": 1851,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "\n\n#include \"clCommon.h\"\n\n\n//#define FLATMAP\n#define ALL_EXPLORED\n//#define NO_ZSHADING\n//#define PEEP_ALL_ALWAYS_VISIBLE\n//#define PEEP_DISABLE_TILECORRECTIONS\n#define PEEP_PATH_CROWD (4)\n\n//#define DEBUG_PATHS\n\n#include \"clGUI.h\"\n\n\n\nRETURN_POINTER SynchronizedClientState* ThisClient(ALL_CORE_PARAMS)\n{\n    return &gameState->clientStates[gameStateActions->clientId];\n}\n\n\n\n\nvoid Print_GE_INT2(ge_int2 v)\n{\n    printf(\"{%d,%d}\\n\", v.x, v.y);\n}\nvoid Print_GE_INT3(ge_int3 v)\n{\n    printf(\"{%d,%d,%d}\\n\", v.x, v.y, v.z);\n}\nvoid Print_GE_UINT3(ge_uint3 v)\n{\n    printf(\"{%u,%u,%u}\\n\", v.x, v.y, v.z);\n}\nvoid Print_GE_SHORT3(ge_short3 v)\n{\n    printf(\"{%d,%d,%d}\\n\", v.x, v.y, v.z);\n}\nvoid PrintFloat2(float2 v)\n{\n    printf(\"{%f,%f}\\n\", v.x, v.y);\n}\nvoid PrintFloat3(float3 v)\n{\n    printf(\"{%f,%f,%f}\\n\", v.x, v.y, v.z);\n}\nvoid PrintFloat4(float4 v)\n{\n    printf(\"{%f,%f,%f,%f}\\n\", v.x, v.y, v.z, v.w);\n}\n\n\n\ninline cl_uint BITBANK_GET_SUBNUMBER_UINT(cl_uint bank, cl_int lsbBitIdx, cl_int numBits)\n{\n    cl_uint mask = 0;\n    for (int i = 0; i < numBits; i++)\n    {\n        mask |= (1 << (i + lsbBitIdx));\n    }\n\n\n    return ((bank & mask) >> lsbBitIdx);\n}\n\n\ninline void BITBANK_SET_SUBNUMBER_UINT(cl_uint* bank, cl_int lsbBitIdx, cl_int numBits, cl_uint number)\n{\n    int i = 0;\n    \n\n    cl_uint mask = 0;\n    for (int i = 0; i < numBits; i++)\n    {\n        mask |= (1 << (i + lsbBitIdx));\n    }\n\n    *bank &= ~mask;//clear the region\n    *bank |= ((number << lsbBitIdx) & mask);\n}\n\n\n\n///----------------------------------------------------------------------------------------------------------------\n///\n/// \n\n\ninline MapTile MapDataGetTile(cl_uint tileData) {\n    return (MapTile)BITBANK_GET_SUBNUMBER_UINT(tileData, 0, 8);\n}\ninline void MapDataSetTile(PARAM_GLOBAL_POINTER cl_uint* tileData, MapTile tile) {\n    cl_uint tmp = *tileData;\n    BITBANK_SET_SUBNUMBER_UINT(&tmp, 0, 8, tile);\n    *tileData = tmp;\n}\n\ninline int MapTileGetRotation(cl_uint tileData) {\n    return BITBANK_GET_SUBNUMBER_UINT(tileData, 8, 2);\n}\n\nRETURN_POINTER cl_uint* MapGetDataPointerFromCoord(ALL_CORE_PARAMS, ge_int3 mapcoord)\n{\n    return &(gameState->map.levels[(mapcoord).z].data[(mapcoord).x][(mapcoord).y]);\n}\n\nMapTile MapGetTileFromCoord(ALL_CORE_PARAMS, ge_int3 mapcoord)\n{\n    return MapDataGetTile(gameState->map.levels[(mapcoord).z].data[(mapcoord).x][(mapcoord).y]);\n}\n\ncl_uchar MapRidgeType(ALL_CORE_PARAMS, ge_int3 mapCoords, ge_int3 enterDir)\n{\n    USE_POINTER cl_uint* data = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, mapCoords);\n\n    if (MapDataGetTile(*data) == MapTile_NONE)\n        return 0;\n\n\n    /*offsets[0] = (ge_int3){ 1, 0, 0 };\n    offsets[1] = (ge_int3){ -1, 0, 0 };\n    offsets[2] = (ge_int3){ 0, -1, 0 };\n    offsets[3] = (ge_int3){ 0, 1, 0 };\n    offsets[4] = (ge_int3){ 0, 0, 1 };\n    offsets[5] = (ge_int3){ 0, 0, -1 };*/\n\n    if (VECTOR3_EQUAL(enterDir, staticData->directionalOffsets[0]))\n    {\n        return 2 - (BITGET_MF(*data, MapTileFlags_LowCornerBTMLEFT) + BITGET_MF(*data, MapTileFlags_LowCornerTPLEFT));\n    }\n    else if (VECTOR3_EQUAL(enterDir, staticData->directionalOffsets[1]))\n    {\n        return 2 - (BITGET_MF(*data, MapTileFlags_LowCornerBTMRIGHT) + BITGET_MF(*data, MapTileFlags_LowCornerTPRIGHT));\n    }\n    else if (VECTOR3_EQUAL(enterDir, staticData->directionalOffsets[2]))\n    {\n        return 2 - (BITGET_MF(*data, MapTileFlags_LowCornerBTMRIGHT) + BITGET_MF(*data, MapTileFlags_LowCornerBTMLEFT));\n    }\n    else if (VECTOR3_EQUAL(enterDir, staticData->directionalOffsets[3]))\n    {\n        return 2 - (BITGET_MF(*data, MapTileFlags_LowCornerTPRIGHT) + BITGET_MF(*data, MapTileFlags_LowCornerTPLEFT));\n    }\n    return 2;\n}\n\ncl_uchar MapDataHas2LowAdjacentCorners( cl_uint* data)\n{\n    if (BITGET_MF(*data, MapTileFlags_LowCornerTPLEFT) + BITGET_MF(*data, MapTileFlags_LowCornerTPRIGHT) == 2)\n        return 1;\n\n    if (BITGET_MF(*data, MapTileFlags_LowCornerTPRIGHT) + BITGET_MF(*data, MapTileFlags_LowCornerBTMRIGHT) == 2)\n        return 2;\n\n    if (BITGET_MF(*data, MapTileFlags_LowCornerBTMRIGHT) + BITGET_MF(*data, MapTileFlags_LowCornerBTMLEFT) == 2)\n        return 3;\n\n    if (BITGET_MF(*data, MapTileFlags_LowCornerBTMLEFT) + BITGET_MF(*data, MapTileFlags_LowCornerTPLEFT) == 2)\n        return 4;\n\n    return 0;\n}\n\ncl_uchar MapHas2LowAdjacentCorners(ALL_CORE_PARAMS, ge_int3 mapCoords)\n{\n    USE_POINTER cl_uint* data = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, mapCoords);\n    cl_uint localCopy = *data;\n    return MapDataHas2LowAdjacentCorners(&localCopy);\n}\n\n\ncl_uchar MapTileDataHasLowCorner(cl_int tileData)\n{\n    return BITBANK_GET_SUBNUMBER_UINT(tileData, MapTileFlags_LowCornerTPLEFT, 4);\n}\n\n\ncl_uchar MapTileData_TileSolid(cl_int tileData)\n{\n    if(MapTileDataHasLowCorner(tileData) == 0 && MapDataGetTile(tileData) != MapTile_NONE)\n    {\n        return 1;\n    }\n    else \n        return 0;\n}\n\ncl_uchar MapTileData_PeepCount(cl_uint tileData)\n{\n    return BITBANK_GET_SUBNUMBER_UINT(tileData, MapTileFlags_PeepCount0, 3);\n}\nvoid MapTileData_SetPeepCount(cl_uint* tileData, cl_uchar peepCount)\n{\n    peepCount = clamp((int)peepCount,0, 7);\n    BITBANK_SET_SUBNUMBER_UINT(tileData, MapTileFlags_PeepCount0, 3, peepCount);\n}\n\ncl_uchar MapHasLowCorner(ALL_CORE_PARAMS, ge_int3 mapCoords)\n{\n    USE_POINTER cl_uint* data = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, mapCoords);\n\n    if (MapDataGetTile(*data) == MapTile_NONE)\n        return 0;\n\n    return MapTileDataHasLowCorner(*data);\n}\ncl_uchar MapDataLowCornerCount(cl_int tileData)\n{\n    return (BITGET_MF(tileData, MapTileFlags_LowCornerTPLEFT) +\n        BITGET_MF(tileData, MapTileFlags_LowCornerTPRIGHT) +\n        BITGET_MF(tileData, MapTileFlags_LowCornerBTMRIGHT) +\n        BITGET_MF(tileData, MapTileFlags_LowCornerBTMLEFT));\n}\ncl_uchar MapLowCornerCount(ALL_CORE_PARAMS, ge_int3 mapCoords)\n{\n    USE_POINTER cl_uint* data = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, mapCoords);\n\n    if (MapDataGetTile(*data) == MapTile_NONE)\n        return 0;\n\n    return MapDataLowCornerCount(*data);\n}\n\ncl_uchar MapDataXLevel( cl_uint* data)\n{\n    if(MapDataHas2LowAdjacentCorners(data) > 0 && MapDataLowCornerCount(*data) == 2)\n    {\n        return 1;//mid x\n    }\n    else if(MapDataLowCornerCount(*data) == 3)\n    {\n        return 0;//low x\n    }\n    else \n        return 2;//high x\n}\n\ncl_uchar MapTileXLevel(ALL_CORE_PARAMS, ge_int3 mapCoords)\n{\n    USE_POINTER cl_uint* data = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, mapCoords);\n    cl_uint localCopy = *data;\n    return MapDataXLevel(&localCopy);\n}\n\ncl_uchar MapTileCoordStandInValid(ALL_CORE_PARAMS, ge_int3 mapcoord)\n{\n    USE_POINTER cl_uint* data = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, mapcoord);\n    MapTile tile = MapDataGetTile(*data);\n    if (tile == MapTile_NONE)\n    {\n        return 1;\n    }\n    else\n    {\n        if(MapDataLowCornerCount(*data) > 0)\n            return 1;\n    }\n    return 0;\n}\n\n\ncl_uchar MapTileCoordEnterable(ALL_CORE_PARAMS, ge_int3 mapcoord, ge_int3 enterDirection)\n{\n    USE_POINTER cl_uint* data = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, mapcoord);\n    MapTile tile = MapDataGetTile(*data);\n    if (tile == MapTile_NONE)\n    {   \n        return 1;\n        //if(enterDirection.z < 0)\n        //    return 0;\n\n\n\n        ge_int3 downCoord = mapcoord;\n        downCoord.z--;\n        USE_POINTER cl_uint* downData = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, downCoord);\n        if( MapDataGetTile(*downData) != MapTile_NONE)\n            return 1;\n\n\n\n\n\n    }\n    else\n        return 0;\n\n    //  if(MapDataLowCornerCount(*data) == 0)//cant enter full blocks\n    // {\n    //     return 0;\n    // }\n    // else if(enterDirection.z == 0)//entering partial block from the side\n    // {\n    //     cl_uchar ridgeType = MapRidgeType(ALL_CORE_PARAMS_PASS, mapcoord, enterDirection);\n    //     if (ridgeType == 0)\n    //         return 1;\n    // }\n    // else if(enterDirection.z > 0)//entering partial block from below\n    // {\n    //     return 1;\n    //     ge_int3 dirNoZ = enterDirection;\n    //     dirNoZ.z = 0;\n    //     cl_uchar ridgeType = MapRidgeType(ALL_CORE_PARAMS_PASS, mapcoord, dirNoZ);\n    //     if (ridgeType == 0)//running up continued ramp case.\n    //         return 1;\n\n    // }\n    // else if(enterDirection.z < 0)//entering partial block from above\n    // {\n    //     return 1;\n    //     if(MapDataLowCornerCount(*data) > 0)//could be a ramp \n    //         return 1;\n    // }\n    // return 0;\n}\n\n\nvoid Machine_InitRecipes(ALL_CORE_PARAMS)\n{\n   USE_POINTER MachineRecipe* recip = &gameState->machineRecipes[MachineRecipe_IRON_ORE_CRUSHING];\n   recip->numInputs = 1;\n   recip->numOutputs = 2;\n   recip->inputTypes[0] = ItemType_IRON_ORE;\n   recip->outputTypes[0] = ItemType_IRON_DUST;\n   recip->outputTypes[1] = ItemType_ROCK_DUST;\n\n   recip->inputRatio[0] = 1;\n   recip->outputRatio[0] = 1;\n   recip->outputRatio[1] = 5;\n\n\n\n    recip = &gameState->machineRecipes[MachineRecipe_IRON_DUST_SMELTING];\n    recip->numInputs = 1;\n    recip->numOutputs = 1;\n    recip->inputTypes[0] = ItemType_IRON_DUST;\n    recip->outputTypes[0] = ItemType_IRON_BAR;\n\n    recip->inputRatio[0] = 5;\n    recip->outputRatio[0] = 1;\n\n\n    gameState->validMachineRecipes[MachineTypes_CRUSHER][0] = MachineRecipe_IRON_ORE_CRUSHING;\n    gameState->validMachineRecipes[MachineTypes_SMELTER][0] = MachineRecipe_IRON_DUST_SMELTING;\n\n\n\n}\n\nvoid Machine_InitDescriptions(ALL_CORE_PARAMS)\n{\n    USE_POINTER MachineDesc* m = &gameState->machineDescriptions[MachineTypes_CRUSHER];\n    m->type = MachineTypes_CRUSHER;\n    m->tile = MapTile_MACHINE_CRUSHER;\n    m->processingTime = 30;\n\n\n    m = &gameState->machineDescriptions[MachineTypes_SMELTER];\n    m->type = MachineTypes_SMELTER;\n    m->tile = MapTile_MACHINE_FURNACE;\n    m->processingTime = 100;\n\n}\n\nvoid InitItemTypeTiles(ALL_CORE_PARAMS)\n{\n    gameState->ItemTypeTiles[ItemType_IRON_ORE].itemTile = ItemTile_Ore;\n    gameState->ItemTypeTiles[ItemType_IRON_DUST].itemTile = ItemTile_Dust;\n    gameState->ItemTypeTiles[ItemType_IRON_BAR].itemTile = ItemTile_Bar;\n    gameState->ItemTypeTiles[ItemType_ROCK_DUST].itemTile = ItemTile_Dust;\n\n\n    gameState->ItemColors[ItemType_IRON_ORE] = COLOR_ORANGE;\n    gameState->ItemColors[ItemType_IRON_DUST] = COLOR_ORANGE;\n    gameState->ItemColors[ItemType_IRON_BAR] = COLOR_ORANGE;\n    gameState->ItemColors[ItemType_ROCK_DUST] = COLOR_WHITE;\n}\n\noffsetPtr Machine_CreateMachine(ALL_CORE_PARAMS)\n{\n    offsetPtr ptr = gameState->nextMachineIdx;\n\n    bool loopSense = false;\n    do\n    {\n        gameState->nextMachineIdx++;\n        if(gameState->nextMachineIdx >= MAX_MACHINES)\n        {\n            gameState->nextMachineIdx = 0;\n            if(loopSense == true)\n            {\n                printf(\"Machine_CreateMachine Out of Machine Space (MAX_MACHINES)!\\n\");\n                return OFFSET_NULL;\n            }\n            loopSense=true;\n        }\n    }while(gameState->machines[gameState->nextMachineIdx].valid == true);\n\n    return ptr;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninline void AStarNodeInstantiate(PARAM_GLOBAL_POINTER AStarNode* node)\n{\n    \n    node->g_Q16 = TO_Q16(0);\n    node->h_Q16 = TO_Q16(0);\n    node->nextOPtr = OFFSET_NULL_3D;  \n    node->prevOPtr = OFFSET_NULL_3D;\n    node->tileIdx.x = -1;\n    node->tileIdx.y = -1;\n    node->tileIdx.z = -1;\n\n}\nvoid AStarInitPathNode(PARAM_GLOBAL_POINTER AStarPathNode* node)\n{\n    node->mapCoord_Q16 = (ge_int3){ 0,0,0 };\n    node->nextOPtr = OFFSET_NULL;\n    node->prevOPtr = OFFSET_NULL;\n\n}\n\n\nvoid AStarSearch_BFS_Instantiate(PARAM_GLOBAL_POINTER AStarSearch_BFS* search)\n{\n    for (int x = 0; x < MAPDIM; x++)\n    {\n        for (int y = 0; y < MAPDIM; y++)\n        {\n            for (int z = 0; z < MAPDEPTH; z++)\n            {\n                USE_POINTER AStarNode* node = &search->details[x][y][z];\n                AStarNodeInstantiate(node);\n\n\n                node->tileIdx = (ge_short3){x,y,z};\n\n                search->closedMap[x][y][z] = 0;\n                search->openMap[x][y][z] = 0;\n            }\n        }  \n    }\n\n    for(int i = 0; i < ASTARHEAPSIZE; i++)\n    {\n        search->openHeap_OPtrs[i] = OFFSET_NULL_3D;\n    }\n    \n    search->startNodeOPtr = OFFSET_NULL_3D;\n    search->endNodeOPtr = OFFSET_NULL_3D;\n    \n    search->openHeapSize = 0;\n    search->pathOPtr = OFFSET_NULL;\n\n}\nvoid AStarSearch_BFS_InstantiateParrallel(PARAM_GLOBAL_POINTER AStarSearch_BFS* search, cl_ulong idx, int x, int y, int z)\n{\n\n    USE_POINTER AStarNode* node = &search->details[x][y][z];\n    AStarNodeInstantiate(node);\n    node->tileIdx = (ge_short3){x,y,z};\n\n    search->closedMap[x][y][z] = 0;\n    search->openMap[x][y][z] = 0;\n\n\n\n    if(idx < ASTARHEAPSIZE)\n    {\n        search->openHeap_OPtrs[idx] = OFFSET_NULL_3D;\n       \n    }\n    \n    \n    search->startNodeOPtr = OFFSET_NULL_3D;\n    search->endNodeOPtr = OFFSET_NULL_3D;\n    search->openHeapSize = 0;\n    search->pathOPtr = OFFSET_NULL;\n\n\n}\n\n\n\n\ncl_uchar MapTileCoordValid(ge_int3 mapcoord, int xybuffer)\n{\n    if ((mapcoord.x >= xybuffer) && (mapcoord.y >= xybuffer) && mapcoord.z >= 0 && (mapcoord.x < MAPDIM-xybuffer) && (mapcoord.y < MAPDIM-xybuffer) && mapcoord.z < MAPDEPTH)\n    {\n        return 1;\n    }\n    return 0;\n}\ncl_uchar AStarNodeValid(PARAM_GLOBAL_POINTER AStarNode* node)\n{\n    return MapTileCoordValid(SHORT3_TO_INT3(node->tileIdx),1);\n}\ncl_uchar AStarNode2NodeTraversible(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER AStarNode* node, PARAM_GLOBAL_POINTER AStarNode* prevNode)\n{  \n\n    USE_POINTER cl_uint* fromTileData = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, SHORT3_TO_INT3(prevNode->tileIdx));\n    USE_POINTER cl_uint* toTileData = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, SHORT3_TO_INT3(node->tileIdx));\n\n    ge_int3 delta = INT3_SUB(SHORT3_TO_INT3(node->tileIdx), SHORT3_TO_INT3( prevNode->tileIdx ));\n    if (MapTileCoordEnterable(ALL_CORE_PARAMS_PASS, SHORT3_TO_INT3(node->tileIdx), delta) == 0)\n        return 0;\n\n    //must be adjacent to \n    bool adjacent = false;\n    for(int i = 0; i < 26; i++)\n    {\n        ge_int3 worldCoord = staticData->directionalOffsets[i] + SHORT3_TO_INT3(node->tileIdx);\n        MapTile tile = MapGetTileFromCoord(ALL_CORE_PARAMS_PASS, worldCoord);\n        if(tile != MapTile_NONE)\n        {\n            adjacent = true;\n            break;\n        }\n    }\n    if(adjacent == false)\n        return 0;\n\n\n    if(delta.z > 0)\n    {\n\n\n      //  if(MapDataGetTile(*fromTileData) == MapTile_NONE)\n     //       return 0;\n        //else could be a ramp\n\n    \n    }\n\n\n    return 1;\n\n\n\n\n}\n\nvoid MakeCardinalDirectionOffsets(PARAM_GLOBAL_POINTER ge_int3* offsets)\n{\n    offsets[0] = (ge_int3){ 1, 0, 0 };\n    offsets[1] = (ge_int3){ -1, 0, 0 };\n    offsets[2] = (ge_int3){ 0, -1, 0 };\n    offsets[3] = (ge_int3){ 0, 1, 0 };\n    offsets[4] = (ge_int3){ 0, 0, 1 };\n    offsets[5] = (ge_int3){ 0, 0, -1 };\n\n    offsets[6] = (ge_int3){ 1, 0, -1 };\n    offsets[7] = (ge_int3){ 0, 1, -1 };\n    offsets[8] = (ge_int3){ 1, 1, -1 };\n    offsets[9] = (ge_int3){ -1, 0, -1 };\n    offsets[10] = (ge_int3){ 0, -1, -1 };\n    offsets[11] = (ge_int3){ -1, -1, -1 };\n    offsets[12] = (ge_int3){ 1, -1, -1 };\n    offsets[13] = (ge_int3){ -1, 1, -1 };\n\n    offsets[14] = (ge_int3){ 1, 0, 1 };\n    offsets[15] = (ge_int3){ 0, 1, 1 };\n    offsets[16] = (ge_int3){ 1, 1, 1 };\n    offsets[17] = (ge_int3){ -1, 0, 1 };\n    offsets[18] = (ge_int3){ 0, -1, 1 };\n    offsets[19] = (ge_int3){ -1, -1, 1 };\n    offsets[20] = (ge_int3){ 1, -1, 1 };\n    offsets[21] = (ge_int3){ -1, 1, 1 };\n\n    offsets[22] = (ge_int3){ 1, 1, 0 };\n    offsets[23] = (ge_int3){ -1, 1, 0 };\n    offsets[24] = (ge_int3){ 1, -1, 0 };\n    offsets[25] = (ge_int3){ -1, -1, 0 };\n}\nint AStarOpenHeapKey(PARAM_GLOBAL_POINTER AStarSearch_BFS* search, PARAM_GLOBAL_POINTER AStarNode* node)\n{\n    //f\n    return node->g_Q16 + node->h_Q16;\n}\n\nvoid AStarOpenHeapTrickleDown(PARAM_GLOBAL_POINTER AStarSearch_BFS* search, cl_int index)\n{\n    cl_int largerChild;\n    USE_POINTER AStarNode* top;\n    offsetPtr3 topOPtr = search->openHeap_OPtrs[index];\n    OFFSET_TO_PTR_3D(search->details, topOPtr, top);\n\n\n    while (index < search->openHeapSize / 2)\n    {\n        int leftChild = 2 * index + 1;\n        int rightChild = leftChild + 1;\n\n        USE_POINTER AStarNode* leftChildNode;\n        OFFSET_TO_PTR_3D(search->details, search->openHeap_OPtrs[leftChild], leftChildNode)\n        USE_POINTER AStarNode* rightChildNode;\n        OFFSET_TO_PTR_3D(search->details, search->openHeap_OPtrs[rightChild], rightChildNode)\n\n        if ((rightChild < search->openHeapSize) && (AStarOpenHeapKey(search, leftChildNode) > AStarOpenHeapKey(search, rightChildNode)))\n            largerChild = rightChild;\n        else\n            largerChild = leftChild;\n\n        USE_POINTER AStarNode* largerChildNode;\n\n        OFFSET_TO_PTR_3D(search->details, search->openHeap_OPtrs[largerChild], largerChildNode)\n\n        if (AStarOpenHeapKey(search, top) <= AStarOpenHeapKey(search, largerChildNode))\n            break;\n\n        search->openHeap_OPtrs[index] = search->openHeap_OPtrs[largerChild];\n        index = largerChild;\n\n        \n    }\n    \n    search->openHeap_OPtrs[index] = topOPtr;\n}\n\noffsetPtr3 AStarOpenHeapRemove(PARAM_GLOBAL_POINTER AStarSearch_BFS* search)\n{\n    offsetPtr3 rootOPtr = search->openHeap_OPtrs[0];\n\n    search->openHeap_OPtrs[0] = search->openHeap_OPtrs[search->openHeapSize-1];\n    search->openHeapSize--;\n\n \n    AStarOpenHeapTrickleDown(search, 0);\n\n    return rootOPtr;\n}\n\noffsetPtr3 AStarRemoveFromOpen(PARAM_GLOBAL_POINTER AStarSearch_BFS* search)\n{\n\n    offsetPtr3 nodeOPtr = AStarOpenHeapRemove(search);\n    \n\n    USE_POINTER AStarNode* node;\n    OFFSET_TO_PTR_3D(search->details, nodeOPtr, node);\n\n    search->openMap[node->tileIdx.x][node->tileIdx.y][node->tileIdx.z] = 0;\n    return nodeOPtr;\n}\nvoid AStarAddToClosed(PARAM_GLOBAL_POINTER AStarSearch_BFS* search,PARAM_GLOBAL_POINTER AStarNode* node)\n{\n    search->closedMap[node->tileIdx.x][node->tileIdx.y][node->tileIdx.z] = 1;\n}\ncl_uchar AStarNodeInClosed(PARAM_GLOBAL_POINTER AStarSearch_BFS* search,PARAM_GLOBAL_POINTER AStarNode* node)\n{\n    return search->closedMap[node->tileIdx.x][node->tileIdx.y][node->tileIdx.z];\n}\n\ncl_uchar AStarNodeInOpen(PARAM_GLOBAL_POINTER AStarSearch_BFS* search, PARAM_GLOBAL_POINTER AStarNode* node)\n{\n    return search->openMap[node->tileIdx.x][node->tileIdx.y][node->tileIdx.z];\n}\n\n\nvoid AStarOpenHeapTrickleUp(PARAM_GLOBAL_POINTER AStarSearch_BFS* search, cl_int index)\n{\n    cl_int prev = (index - 1) / 2;\n    offsetPtr3 bottomOPtr = search->openHeap_OPtrs[index];\n\n    USE_POINTER AStarNode* bottomNode;\n    OFFSET_TO_PTR_3D(search->details, bottomOPtr, bottomNode);\n\n    USE_POINTER AStarNode* prevNode;\n    OFFSET_TO_PTR_3D(search->details, search->openHeap_OPtrs[prev], prevNode);\n\n    while (index > 0 && AStarOpenHeapKey(search, prevNode) > AStarOpenHeapKey(search, bottomNode))\n    {\n        search->openHeap_OPtrs[index] = search->openHeap_OPtrs[prev];\n        index = prev;\n        prev = (prev - 1) / 2;\n        OFFSET_TO_PTR_3D(search->details, search->openHeap_OPtrs[prev], prevNode);\n    }\n    search->openHeap_OPtrs[index] = bottomOPtr;\n}\n\n\nvoid AStarOpenHeapInsert(PARAM_GLOBAL_POINTER AStarSearch_BFS* search, offsetPtr3 nodeOPtr)\n{\n    search->openHeap_OPtrs[search->openHeapSize] = nodeOPtr;\n    AStarOpenHeapTrickleUp(search, search->openHeapSize);\n    search->openHeapSize++;\n    if (search->openHeapSize > ASTARHEAPSIZE)\n        printf(\"ERROR: AStarHeap Size Greater than ASTARHEAPSIZE!\\n\");\n\n}\nvoid AStarAddToOpen(PARAM_GLOBAL_POINTER AStarSearch_BFS* search, offsetPtr3 nodeOPtr)\n{\n    AStarOpenHeapInsert(search, nodeOPtr);\n\n    USE_POINTER AStarNode* node;\n    OFFSET_TO_PTR_3D(search->details, nodeOPtr, node);\n    search->openMap[node->tileIdx.x][node->tileIdx.y][node->tileIdx.z] = 1;\n}\n\noffsetPtr AStarPathStepsNextFreePathNode(PARAM_GLOBAL_POINTER AStarPathSteps* list)\n{\n    offsetPtr ptr = list->nextListIdx;\n    while ((list->pathNodes[ptr].nextOPtr != OFFSET_NULL))\n    {\n        ptr++;\n        if (ptr >= ASTARPATHSTEPSSIZE)\n            ptr = 0;\n        \n        if(ptr == list->nextListIdx)//wrap around\n        {\n            printf(\"No More Path Nodes Available.\\n\");\n            return OFFSET_NULL;\n        }\n    }\n    list->nextListIdx = ptr+1;\n    return ptr;\n}\n\n\n\n\n\nvoid AStarRemoveFromClosed(PARAM_GLOBAL_POINTER AStarSearch_BFS* search, PARAM_GLOBAL_POINTER AStarNode* node)\n{\n    search->closedMap[node->tileIdx.x][node->tileIdx.y][node->tileIdx.z] = 0;\n}\n\ncl_int AStarNodeDistanceHuristic(PARAM_GLOBAL_POINTER AStarSearch_BFS* search, PARAM_GLOBAL_POINTER AStarNode* nodeA, PARAM_GLOBAL_POINTER AStarNode* nodeB)\n{\n    return TO_Q16(abs(nodeA->tileIdx.x - nodeB->tileIdx.x) + abs(nodeA->tileIdx.y - nodeB->tileIdx.y) + abs(nodeA->tileIdx.z - nodeB->tileIdx.z));\n}\ncl_int AStarNodeDistanceHuristic_IDA(PARAM_GLOBAL_POINTER AStarSearch_IDA* search, ge_short3 locA, ge_short3 locB)\n{\n    return TO_Q16(abs(locA.x - locB.x) + abs(locA.y - locB.y) + abs(locA.z - locB.z));\n}\nvoid AStarPrintNodeStats(PARAM_GLOBAL_POINTER AStarNode* node)\n{\n    printf(\"Node: Loc: \");\n    Print_GE_SHORT3(node->tileIdx);\n    printf(\" H: %f, G: %f\\n\", FIXED2FLTQ16(node->h_Q16), FIXED2FLTQ16(node->g_Q16));\n}\nvoid AStarPrintPathNodeStats(PARAM_GLOBAL_POINTER AStarPathNode* node)\n{\n    printf(\"Node: Loc: \");\n    Print_GE_INT3_Q16(node->mapCoord_Q16);\n}\nvoid AStarPrintSearchPathTo(PARAM_GLOBAL_POINTER AStarSearch_BFS* search, ge_int3 destTile)\n{\n    USE_POINTER AStarNode* curNode = &search->details[destTile.x][destTile.y][destTile.z];\n    while (curNode != NULL)\n    {\n        AStarPrintNodeStats(curNode);\n        OFFSET_TO_PTR_3D(search->details, curNode->prevOPtr, curNode);\n    }\n}\nvoid AStarPrintSearchPathFrom(PARAM_GLOBAL_POINTER AStarSearch_BFS* search, ge_int3 startTile)\n{\n    USE_POINTER AStarNode* curNode = &search->details[startTile.x][startTile.y][startTile.z];\n    while (curNode != NULL)\n    {\n        AStarPrintNodeStats(curNode);\n        OFFSET_TO_PTR_3D(search->details, curNode->nextOPtr, curNode);\n    }\n}\n\nvoid AStarPrintPath(PARAM_GLOBAL_POINTER AStarPathSteps* paths, offsetPtr startNodeOPtr)\n{\n    USE_POINTER AStarPathNode* curNode;\n    OFFSET_TO_PTR(paths->pathNodes, startNodeOPtr, curNode);\n    while (curNode != NULL)\n    {\n        AStarPrintPathNodeStats(curNode);\n        OFFSET_TO_PTR(paths->pathNodes, curNode->nextOPtr, curNode);\n    }\n}\n\ncl_uchar GE_INT3_ENTRY_COUNT(ge_int3 a)\n{\n    int s = 0;\n    if (a.x != 0)\n        s++;\n    if (a.y != 0)\n        s++;\n    if (a.z != 0)\n        s++;\n\n    return s;\n}\n\ncl_uchar GE_INT3_SINGLE_ENTRY(ge_int3 a)\n{\n    int s = 0;\n    if (a.x != 0)\n        s++;\n    if (a.y != 0)\n        s++;\n    if (a.z != 0)\n        s++;\n\n    if (s == 1)\n        return 1;\n    else\n        return 0;\n}\n\n\n// Ret 1: [2,0,2],[-1,-1,0],[4,4,4],[3,0,0] etc\n// Ret 0: [2,0,1],[1,-1,1],[2,3,4],[0,0,0] etc\ncl_uchar GE_INT3_WHACHAMACOLIT1_ENTRY(ge_int3 a)\n{\n    if (INT3_ZERO(a))\n        return 0;\n\n    int n = a.x + a.y + a.z;\n    int s =0;\n    if (a.x != 0)\n        s++;\n    if (a.y != 0)\n        s++;\n    if (a.z != 0)\n        s++;\n\n    int f = 0;\n    if (a.x != 0)\n        f = a.x;\n    else if (a.y != 0)\n        f = a.y;\n    else if (a.z != 0)\n        f = a.z;\n\n\n    if ((n / s) == f)\n    {\n        return 1;\n    }\n    return 0;\n}\n\n\noffsetPtr AStarFormPathSteps(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER AStarSearch_BFS* search, PARAM_GLOBAL_POINTER AStarPathSteps* steps)\n{\n    //grab a unused Node from pathNodes, and start building the list .\n    offsetPtr3 curNodeOPtr =  search->startNodeOPtr;\n    USE_POINTER AStarNode* curNode;\n    OFFSET_TO_PTR_3D(search->details, curNodeOPtr, curNode);\n    CL_CHECK_NULL(curNode);\n\n    offsetPtr startNodeOPtr = OFFSET_NULL;\n    USE_POINTER AStarPathNode* pNP = NULL;\n    int i = 0;\n    while (curNode != NULL)\n    { \n\n        int index = AStarPathStepsNextFreePathNode(&gameState->paths);\n\n        USE_POINTER AStarPathNode* pN = &gameState->paths.pathNodes[index];\n\n        if (i == 0)\n            startNodeOPtr = index;\n\n\n        ge_int3 holdTileCoord = SHORT3_TO_INT3(  curNode->tileIdx  );\n\n        //put location at center of tile\n        ge_int3 tileCenter = GE_INT3_TO_Q16(holdTileCoord);\n        tileCenter.x += TO_Q16(1) >> 1;\n        tileCenter.y += TO_Q16(1) >> 1;\n        tileCenter.z += TO_Q16(1) >> 1;\n\n\n        pN->mapCoord_Q16 = tileCenter;\n\n        if (pNP != NULL)\n        {\n            pNP->nextOPtr = index;\n        }\n        pNP = pN;\n\n        if (!VECTOR3_EQUAL(curNode->nextOPtr, OFFSET_NULL_3D)) \n        {\n\n            OFFSET_TO_PTR_3D(search->details, curNode->nextOPtr, curNode);\n\n            if(0)\n            {\n                //iterate until joint in path.\n                ge_int3 delta;\n                USE_POINTER AStarNode* n2 = curNode;\n                do\n                {\n                    OFFSET_TO_PTR_3D(search->details, n2->nextOPtr, n2);\n\n                    if (n2 != NULL) {\n                        delta = INT3_ADD(SHORT3_TO_INT3(n2->tileIdx), INT3_NEG(holdTileCoord));\n                    }\n                    else\n                        delta = (ge_int3){ 0,0,0 };\n\n                } while ((n2 != NULL) && (GE_INT3_WHACHAMACOLIT1_ENTRY(delta) == 1));\n\n                if (n2 != NULL) \n                {\n                    USE_POINTER AStarNode* n2Prev;\n                    OFFSET_TO_PTR_3D(search->details, n2->prevOPtr, n2Prev);\n\n                    if (curNode != n2Prev)\n                        curNode = n2Prev;\n                    else\n                        curNode = n2;\n                }\n                else\n                {\n                    OFFSET_TO_PTR_3D(search->details, search->endNodeOPtr, curNode);\n                }\n            }\n        }\n        else\n            curNode = NULL;\n\n\n        i++;\n\n    }\n    pNP->nextOPtr = OFFSET_NULL;\n\n\n\n    //form prev links\n    USE_POINTER AStarPathNode* curNode2;\n    offsetPtr curNode2OPtr = startNodeOPtr;\n    OFFSET_TO_PTR(steps->pathNodes, startNodeOPtr, curNode2);\n\n    while (curNode2 != NULL)\n    {\n\n        USE_POINTER AStarPathNode* p;\n        OFFSET_TO_PTR(steps->pathNodes, curNode2->nextOPtr, p);\n\n\n        if (p != NULL)\n            p->prevOPtr = curNode2OPtr;\n\n\n        curNode2 = p;\n        if(curNode2 != NULL)\n            curNode2OPtr = curNode2->nextOPtr;\n        \n    }\n\n    steps->pathStarts[steps->nextPathStartIdx] = startNodeOPtr;\n    steps->nextPathStartIdx++;\n\n    if(steps->nextPathStartIdx >= ASTAR_MAX_PATHS)\n    {\n        steps->nextPathStartIdx = ASTAR_MAX_PATHS-1;\n        printf(\"Max Paths Reached!\\n\");\n    }\n\n  //  OFFSET_TO_PTR(steps->pathNodes, startNodeOPtr, curNode2);\n   // curNode2->prevOPtr = OFFSET_NULL;\n\n    return startNodeOPtr;\n}\n\n\n\noffsetPtr AStarFormPathSteps_IDA(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER AStarSearch_IDA* search, PARAM_GLOBAL_POINTER AStarPathSteps* steps)\n{\n    //grab a unused Node from pathNodes, and start building the list .\n\n    USE_POINTER AStarNode_IDA* curNode;\n    OFFSET_TO_PTR(search->path, 0, curNode);\n\n    offsetPtr startNodeOPtr = OFFSET_NULL;\n    USE_POINTER AStarPathNode* pNP = NULL;\n    int i = 0;\n    while (curNode != NULL && i <= search->pathEndIdx)\n    { \n        int index = AStarPathStepsNextFreePathNode(&gameState->paths);\n\n        USE_POINTER AStarPathNode* pN = &gameState->paths.pathNodes[index];\n\n        if (i == 0)\n            startNodeOPtr = index;\n\n        ge_int3 holdTileCoord = SHORT3_TO_INT3(  curNode->tileLoc  );\n\n        //put location at center of tile\n        ge_int3 tileCenter = GE_INT3_TO_Q16(holdTileCoord);\n        tileCenter.x += TO_Q16(1) >> 1;\n        tileCenter.y += TO_Q16(1) >> 1;\n        tileCenter.z += TO_Q16(1) >> 1;\n\n\n        pN->mapCoord_Q16 = tileCenter;\n\n        if (pNP != NULL)\n        {\n            pNP->nextOPtr = index;\n        }\n        pNP = pN;\n\n\n        i++;\n        OFFSET_TO_PTR(search->path, i, curNode);\n    }\n    pNP->nextOPtr = OFFSET_NULL;\n\n\n\n    //form prev links\n    USE_POINTER AStarPathNode* curNode2;\n    offsetPtr curNode2OPtr = startNodeOPtr;\n    OFFSET_TO_PTR(steps->pathNodes, startNodeOPtr, curNode2);\n\n    while (curNode2 != NULL)\n    {\n\n        USE_POINTER AStarPathNode* p;\n        OFFSET_TO_PTR(steps->pathNodes, curNode2->nextOPtr, p);\n\n\n        if (p != NULL)\n            p->prevOPtr = curNode2OPtr;\n\n\n        curNode2 = p;\n        if(curNode2 != NULL)\n            curNode2OPtr = curNode2->nextOPtr;\n        \n    }\n\n    steps->pathStarts[steps->nextPathStartIdx] = startNodeOPtr;\n    steps->nextPathStartIdx++;\n\n    if(steps->nextPathStartIdx >= ASTAR_MAX_PATHS)\n    {\n        steps->nextPathStartIdx = ASTAR_MAX_PATHS-1;\n        printf(\"Max Paths Reached!\\n\");\n    }\n\n    return startNodeOPtr;\n}\n\n\nAStarPathFindingProgress AStarSearch_BFS_Continue(ALL_CORE_PARAMS,PARAM_GLOBAL_POINTER AStarSearch_BFS* search, int iterations)\n{\n    USE_POINTER AStarNode* startNode;\n    USE_POINTER AStarNode* targetNode;\n    OFFSET_TO_PTR_3D(search->details, search->startNodeOPtr,startNode);\n    OFFSET_TO_PTR_3D(search->details, search->endNodeOPtr,targetNode);\n\n\n    //printf(\"AStarSearch_BFS_Continue..openHeapSize: %d\\n\", search->openHeapSize);\n    while (search->openHeapSize > 0 && iterations > 0)\n    {\n        //printf(\"AStarSearch_BFS_Continue iterating..%d\\n\", iterations);\n        //find node in open with lowest f cost\n        offsetPtr3 currentOPtr = AStarRemoveFromOpen(search);\n\n\n        USE_POINTER AStarNode* current;\n        OFFSET_TO_PTR_3D(search->details, currentOPtr, current);\n\n        //printf(\"G: \"); PrintQ16(current->g_Q16); printf(\" H: \"); PrintQ16(current->h_Q16);\n\n        AStarAddToClosed(search, current);//visited\n        if (VECTOR3_EQUAL(SHORT3_TO_INT3( current->tileIdx ), search->endNodeOPtr) )\n        {\n            printf(\"AStarSearch_BFS_Continue AStarPathFindingProgress_Finished\\n\");\n            search->state = AStarPathFindingProgress_Finished;\n            \n            USE_POINTER AStarNode* endNode;\n            OFFSET_TO_PTR_3D(search->details, search->endNodeOPtr, endNode);\n            CL_CHECK_NULL(endNode);\n\n            endNode->nextOPtr = OFFSET_NULL_3D;\n            startNode->prevOPtr = OFFSET_NULL_3D;\n\n            //form next links\n            USE_POINTER AStarNode* curNode = targetNode;\n            offsetPtr3 curNodeOPtr = search->endNodeOPtr;\n\n            while (curNode != NULL)\n            {\n                USE_POINTER AStarNode* p;\n                OFFSET_TO_PTR_3D(search->details, curNode->prevOPtr, p);\n\n                if(p != NULL)\n                    p->nextOPtr = curNodeOPtr;\n\n                curNodeOPtr = curNode->prevOPtr;\n                curNode = p;\n            }\n\n            //form a simplified path\n            search->pathOPtr = AStarFormPathSteps(ALL_CORE_PARAMS_PASS , search, &gameState->paths);\n\n\n            return search->state;//found dest\n        }\n        \n        \n\n\n\n        //5 neighbors\n        for (int i = 0; i <= 5; i++)\n        { \n            ge_int3 prospectiveTileCoord;\n            ge_int3 dir = staticData->directionalOffsets[i];\n            prospectiveTileCoord.x = current->tileIdx.x + dir.x;\n            prospectiveTileCoord.y = current->tileIdx.y + dir.y;\n            prospectiveTileCoord.z = current->tileIdx.z + dir.z;\n \n            if (MapTileCoordValid(prospectiveTileCoord, 1)==0)\n            {\n                continue;\n            }\n\n\n            \n            //if lateral dyagonol, check adjacents a for traversability as well. if all traverible - diagonoal is traversible.\n            // if(GE_INT3_ENTRY_COUNT(dir) == 2 && dir.z == 0)\n            // {\n            //     ge_int3 dirNoX = dir;\n            //     dirNoX.x=0;\n            //     ge_int3 dirNoY = dir;\n            //     dirNoX.y=0;\n\n            //     ge_int3 XCheckCoord;\n            //     ge_int3 YCheckCoord;\n\n\n            //     offsetPtr3 XCheckNodeOPtr = (offsetPtr3){XCheckCoord.x,XCheckCoord.y,XCheckCoord.z};\n            //     AStarNode* XCheckNode;\n            //     OFFSET_TO_PTR_3D(search->details, XCheckNodeOPtr, XCheckNode);\n            //     if ((AStarNode2NodeTraversible(ALL_CORE_PARAMS_PASS,  XCheckNode, current) == 0))\n            //     {\n            //         continue;\n            //     }\n\n            //     offsetPtr3 YCheckNodeOPtr = (offsetPtr3){YCheckCoord.x,YCheckCoord.y,YCheckCoord.z};\n            //     AStarNode* YCheckNode;\n            //     OFFSET_TO_PTR_3D(search->details, YCheckNodeOPtr, YCheckNode);\n            //     if ((AStarNode2NodeTraversible(ALL_CORE_PARAMS_PASS,  YCheckNode, current) == 0))\n            //     {\n            //         continue;\n            //     }\n            // }\n\n            offsetPtr3 prospectiveNodeOPtr = (offsetPtr3){prospectiveTileCoord.x,prospectiveTileCoord.y,prospectiveTileCoord.z};\n            USE_POINTER AStarNode* prospectiveNode;\n            OFFSET_TO_PTR_3D(search->details, prospectiveNodeOPtr, prospectiveNode);\n\n            if ((AStarNode2NodeTraversible(ALL_CORE_PARAMS_PASS,  prospectiveNode, current) == 0) || (AStarNodeInClosed(search, prospectiveNode)))\n            {\n                continue;\n            }\n\n\n\n\n            int totalMoveCost = current->g_Q16 + AStarNodeDistanceHuristic(search, current, prospectiveNode);\n           // PrintQ16(totalMoveCost); PrintQ16(current->g_Q16); PrintQ16(prospectiveNode->g_Q16);\n            if (((totalMoveCost < prospectiveNode->g_Q16) || AStarNodeInOpen(search, prospectiveNode) == 0) )\n            {\n                \n\n                prospectiveNode->g_Q16 = totalMoveCost;\n                prospectiveNode->h_Q16 = AStarNodeDistanceHuristic(search, prospectiveNode, targetNode);\n                \n                prospectiveNode->prevOPtr = currentOPtr;\n\n                //printf(\"G: \"); PrintQ16(prospectiveNode->g_Q16); printf(\"H: \");  PrintQ16(prospectiveNode->h_Q16);\n                AStarAddToOpen(search, prospectiveNodeOPtr);\n            }\n        }\n\n        iterations--;\n    }\n\n    \n    if(search->openHeapSize > 0)\n    {\n        printf(\"AStarPathFindingProgress_Searching, openHeap Size: %d\\n\", search->openHeapSize);\n        search->state = AStarPathFindingProgress_Searching;\n        return search->state;\n\n    }\n    else\n    {\n        printf(\"AStarPathFindingProgress_Failed\");\n        search->state = AStarPathFindingProgress_Failed;\n        return search->state;\n    }\n\n}\n\ncl_uchar AStarSearch_BFS_Routine(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER AStarSearch_BFS* search, ge_int3 startTile, ge_int3 destTile, int startIterations)\n{\n    if (MapTileCoordValid(startTile,1) == 0)\n    {\n        printf(\"AStarSearch_BFS_Routine: Start MapCoord Not Valid.\\n\");\n        return AStarPathFindingProgress_Failed;\n    }\n    if (MapTileCoordValid(destTile,1) == 0)\n    {\n        printf(\"AStarSearch_BFS_Routine: Dest MapCoord Not Valid.\\n\");\n        return AStarPathFindingProgress_Failed;\n    }\n    if (MapTileCoordStandInValid(ALL_CORE_PARAMS_PASS, startTile) == 0)\n    {\n        printf(\"AStarSearch_BFS_Routine: Start Stand In Invalid.\\n\");\n        return AStarPathFindingProgress_Failed;\n    }\n    if (MapTileCoordStandInValid(ALL_CORE_PARAMS_PASS, destTile)==0)\n    {\n        printf(\"AStarSearch_BFS_Routine: Dest Stand In Invalid.\\n\");\n        return AStarPathFindingProgress_Failed;\n    }\n\n    printf(\"starting search\\n\");\n    search->state = AStarPathFindingProgress_Searching;\n    search->startNodeOPtr = (offsetPtr3){startTile.x,startTile.y,startTile.z};\n    search->endNodeOPtr = (offsetPtr3){destTile.x,destTile.y,destTile.z};\n    \n    USE_POINTER AStarNode* startNode;\n    USE_POINTER AStarNode* targetNode;\n    OFFSET_TO_PTR_3D(search->details, search->startNodeOPtr,startNode);\n    OFFSET_TO_PTR_3D(search->details, search->endNodeOPtr,targetNode);\n\n    //add start to openList\n    startNode->h_Q16 = AStarNodeDistanceHuristic(search, startNode, targetNode);\n    AStarAddToOpen(search, search->startNodeOPtr );\n\n\n    return AStarSearch_BFS_Continue(ALL_CORE_PARAMS_PASS, search, startIterations);\n}\nbool AStarSearch_IDA_Node_In_Path(PARAM_GLOBAL_POINTER AStarSearch_IDA* search, AStarNode_IDA* node)\n{\n    for(int i = 0; i < search->pathEndIdx; i++)\n    {\n        if(VECTOR3_EQUAL(search->path[i].tileLoc, node->tileLoc))\n            return true;\n    }\n    return false;\n}\nbool AStarSearch_IDA_Loc_In_Path(PARAM_GLOBAL_POINTER AStarSearch_IDA* search, ge_short3 loc)\n{\n    for(int i = 0; i < search->pathEndIdx; i++)\n    {\n        if(VECTOR3_EQUAL(search->path[i].tileLoc, loc))\n            return true;\n    }\n    return false;\n}\nvoid AStarSearch_IDA_InitNode(PARAM_GLOBAL_POINTER AStarSearch_IDA* search, PARAM_GLOBAL_POINTER AStarNode_IDA* node)\n{\n    node->tileLoc = (ge_short3)(-1,-1,-1);\n    for(int i = 0; i <= 25; i++)\n        node->searchedSuccessors[i] = false;\n}\n\nge_short3 AStarSearch_IDA_NodeGrabNextBestSuccessor(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER AStarSearch_IDA* search, PARAM_GLOBAL_POINTER AStarNode_IDA* node,  int* hCost,  bool* failed)\n{\n\n    int minCost = INT_MAX;\n    int minCosti = 0;\n    int i;\n    *failed = true;\n    for (i = 0; i <= 3; i++)\n    { \n        if(node->searchedSuccessors[i])\n            continue;\n\n        ge_short3 prospectiveTileCoord;\n        ge_int3 dir = staticData->directionalOffsets[i];\n        prospectiveTileCoord.x = node->tileLoc.x + dir.x;\n        prospectiveTileCoord.y = node->tileLoc.y + dir.y;\n        prospectiveTileCoord.z = node->tileLoc.z + dir.z;\n\n        if (MapTileCoordValid(SHORT3_TO_INT3( prospectiveTileCoord),1)==0)\n        {\n            continue;\n        }\n\n        USE_POINTER cl_uint* data = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, SHORT3_TO_INT3( prospectiveTileCoord));\n        MapTile tile = MapDataGetTile(*data);\n        if (tile != MapTile_NONE)\n        {\n            continue;\n        }\n\n\n\n        int cost = AStarNodeDistanceHuristic_IDA(search, prospectiveTileCoord, search->endLoc);\n        if(cost < minCost)\n        {\n            minCost = cost;\n            minCosti = i;\n        }\n        *failed = false;\n    }\n\n\n\n    *hCost = minCost;\n    node->searchedSuccessors[minCosti] = true;\n    return  node->tileLoc + INT3_TO_SHORT3( staticData->directionalOffsets[minCosti] );\n}\n\nint AStarSearch_IDA_Search(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER AStarSearch_IDA* search)\n{\n    int pathRootsStack[ASTARSEARCH_IDA_PATHMAXSIZE];\n    int rootStackIdx=0;\n\n    cl_long iterations = 0;\n    while(true)\n    {\n        USE_POINTER AStarNode_IDA* node = &search->path[search->pathEndIdx];\n        int h = AStarNodeDistanceHuristic_IDA(search, node->tileLoc, search->endLoc);\n        int f = node->gCost + h;\n        \n        printf(\"\\nsearching..\");Print_GE_SHORT3(node->tileLoc);\n        iterations++;\n        if(f > search->bound)\n        {\n            //cost is too much - pop.\n            search->pathEndIdx--; \n            printf(\"pop\\n\");\n            if(search->pathEndIdx <=0) \n            {\n                printf(\"The cost is too much.\\n\");\n                search->pathEndIdx = 0;\n                search->state = AStarPathFindingProgress_Failed;\n                return 0;\n            }\n                \n            \n\n            continue;\n        }\n            \n\n        if(VECTOR3_EQUAL(node->tileLoc, search->endLoc))\n        {\n            printf(\"AStarSearch_IDA_Search Found Goal\\n\");\n            printf(\"Iterations: %d\\n\", iterations);\n            search->state = AStarPathFindingProgress_Finished;\n            search->pathOPtr = AStarFormPathSteps_IDA(ALL_CORE_PARAMS_PASS , search, &gameState->paths);\n            return 0;//found\n        }\n            \n\n        int min = INT_MAX;\n\n\n        //choose successor\n        int hcost;\n        bool failed;\n        ge_short3 sLoc = AStarSearch_IDA_NodeGrabNextBestSuccessor(ALL_CORE_PARAMS_PASS, search,  node, &hcost, &failed);\n        if(failed)\n        {\n            //pop.\n            search->pathEndIdx--; \n            printf(\"pop\\n\");\n            if(search->pathEndIdx <=0) \n            {\n                printf(\"The cost is too much.\\n\");\n                printf(\"Iterations: %d\\n\", iterations);\n                search->pathEndIdx = 0;\n                search->state = AStarPathFindingProgress_Failed;\n                return 0;\n            }\n            continue;\n        }\n\n\n        int costDiff = h - hcost;//cost of transition\n        \n\n        if(!AStarSearch_IDA_Loc_In_Path(search, sLoc))\n        {\n            //Push\n            search->pathEndIdx++;\n            //AStarSearch_IDA_InitNode(search, &search->path[search->pathEndIdx]);\n            search->path[search->pathEndIdx].tileLoc = (sLoc);\n            search->path[search->pathEndIdx].gCost = node->gCost + costDiff;\n            printf(\"push\\n\");\n        }\n        //endloop\n    }\n\n    search->state = AStarPathFindingProgress_Failed;\n    return 0;\n}\n\n\nAStarPathFindingProgress AStarSearch_IDA_Continue(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER AStarSearch_IDA* search, int iterations)\n{\n    search->t = AStarSearch_IDA_Search(ALL_CORE_PARAMS_PASS, search);\n    if(search->t == 0)\n    {\n        //path found\n        search->state = AStarPathFindingProgress_Finished;\n        printf(\"AStarSearch_IDA_Continue Path Found\\n\");\n    }\n    if(search->t == 10000)\n    {\n        //not found\n        search->state = AStarPathFindingProgress_Failed;\n        printf(\"AStarSearch_IDA_Continue Path Failed\\n\");\n    }\n    search->bound = search->t ;\n}\n\n\n\n\ncl_uchar AStarSearch_IDA_Routine(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER AStarSearch_IDA* search, ge_short3 startTile, ge_short3 destTile, int startIterations)\n{\n    if (MapTileCoordValid(SHORT3_TO_INT3( startTile ),1) == 0)\n    {\n        printf(\"AStarSearch_IDA_Routine: Start MapCoord Not Valid.\\n\");\n        return 0;\n    }\n    if (MapTileCoordValid(SHORT3_TO_INT3(destTile),1) == 0)\n    {\n        printf(\"AStarSearch_IDA_Routine: Dest MapCoord Not Valid.\\n\");\n        return 0;\n    }\n    if (MapTileCoordStandInValid(ALL_CORE_PARAMS_PASS, SHORT3_TO_INT3(startTile)) == 0)\n    {\n        printf(\"AStarSearch_IDA_Routine: Start Stand In Invalid.\\n\");\n        return 0;\n    }\n    if (MapTileCoordStandInValid(ALL_CORE_PARAMS_PASS, SHORT3_TO_INT3(destTile))==0)\n    {\n        printf(\"AStarSearch_IDA_Routine: Dest Stand In Invalid.\\n\");\n        return 0;\n    }\n\n    printf(\"AStarSearch_IDA_Routine: starting search\\n\");\n    search->state = AStarPathFindingProgress_Searching;\n\n\n    search->bound = AStarNodeDistanceHuristic_IDA(search, startTile, destTile);\n    search->path[0].tileLoc = startTile;\n    search->pathEndIdx=0;\n    search->startLoc = startTile;\n    search->endLoc = destTile;\n\n    return AStarSearch_IDA_Continue(ALL_CORE_PARAMS_PASS, search, startIterations);\n}\n\n\n\nRETURN_POINTER cl_uint* AStarPathNode_GetMapData(ALL_CORE_PARAMS, AStarPathNode* node)\n{\n    ge_int3 coord;\n    coord = GE_INT3_WHOLE_Q16(node->mapCoord_Q16);\n    #ifdef DEBUG\n    if(MapTileCoordValid(coord,1) == 0)\n    {   \n        CL_THROW_ASSERT();\n        return NULL;\n    }\n    #endif\n\n    return MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, coord);\n}\n\n\n\n\n//get the last path node from a node in a path\noffsetPtr AStarPathNode_LastPathNode(PARAM_GLOBAL_POINTER AStarPathSteps* steps, offsetPtr pathNodeOPtr)\n{\n    offsetPtr curNodeOPtr = pathNodeOPtr;\n    USE_POINTER AStarPathNode* curNode;\n    OFFSET_TO_PTR(steps->pathNodes, curNodeOPtr, curNode);\n\n\n    while(curNode->nextOPtr != OFFSET_NULL)\n    {\n        OFFSET_TO_PTR(steps->pathNodes, curNode->nextOPtr, curNode);\n        curNodeOPtr = curNode->nextOPtr;\n    }\n    return curNodeOPtr;\n}\n\n\n\ncl_uchar BaryCentric_In_Triangle_Q16(ge_int3 baryCoords)\n{\n    if (baryCoords.x >= 0 && baryCoords.x <= TO_Q16(1))\n    {\n        if (baryCoords.y >= 0 && baryCoords.y <= TO_Q16(1))\n        {\n            if (baryCoords.z >= 0 && baryCoords.z <= TO_Q16(1))\n            {\n                return 1;\n            }\n        }\n    }\n    return 0;\n}\n\n\nint SOME_INTERNAL_CORDIST(int x, int y)\n{\n    if (y <= 0.0)\n    {\n        return -y;\n    }\n    else if (x <= 0)\n        return  x;\n    else\n        return 0;\n}\n\nge_int3 Triangle3D_ToBaryCentric( Triangle3DHeavy* triangle, ge_int3 point)\n{\n    ge_int3 U = triangle->u_Q16;\n    ge_int3 V = triangle->v_Q16;\n    ge_int3 W = INT3_SUB(point, triangle->base.verts_Q16[0]);\n\n\n    long d00 = GE_INT3_DOT_PRODUCT_Q16(U , U );\n    long d01 = GE_INT3_DOT_PRODUCT_Q16(U , V);\n    long d11 = GE_INT3_DOT_PRODUCT_Q16(V , V);\n    long d20 = GE_INT3_DOT_PRODUCT_Q16(W , U);\n    long d21 = GE_INT3_DOT_PRODUCT_Q16(W , V);\n    long denom = MUL_PAD_Q16( d00 , d11 ) - MUL_PAD_Q16(d01 , d01);\n    long u, v, w;\n    v = DIV_PAD_Q16((MUL_PAD_Q16(d11 , d20) - MUL_PAD_Q16(d01 , d21)) , denom);\n    w = DIV_PAD_Q16((MUL_PAD_Q16(d00 , d21) - MUL_PAD_Q16(d01 , d20)) , denom);\n    u = (TO_Q16(1) - v ) - w;\n    return (ge_int3) {\n        u, v, w\n    };\n}\n\nge_int3 Triangle3DHeavy_ClosestPoint( Triangle3DHeavy* triangle, ge_int3 point_Q16, int* dist_Q16)\n{   \n    ge_int3 P1 = triangle->base.verts_Q16[0];\n    ge_int3 P2 = triangle->base.verts_Q16[1];\n    ge_int3 P3 = triangle->base.verts_Q16[2];\n\n    \n    //printf(\"P1: \");\n    //Print_GE_INT3_Q16(P1);\n    //printf(\"P2: \");\n    //Print_GE_INT3_Q16(P2);\n    //printf(\"P3: \");\n    //Print_GE_INT3_Q16(P3);\n\n\n    ge_int3 P_prime;\n    ge_int3 P_prime_bary;\n\n    int Nmag;\n    ge_int3 N_n = GE_INT3_NORMALIZE_Q16(triangle->normal_Q16, &Nmag);\n    //printf(\"N_n: \");\n    //Print_GE_INT3_Q16(N_n);\n\n\n    ge_int3 W = INT3_SUB(point_Q16, P1);\n\n    //printf(\"W: \");\n    //Print_GE_INT3_Q16(W);\n\n\n    int dot = GE_INT3_DOT_PRODUCT_Q16(W, N_n);\n    //printf(\"dot: \");\n    //PrintQ16(dot);\n    ge_int3 term2 = GE_INT3_SCALAR_MUL_Q16(dot, INT3_NEG(N_n));\n    P_prime = INT3_ADD(point_Q16, term2);\n\n\n    //Triangle2DHeavy_ProjectedPoint(triangle, point_Q16, &P_prime_bary, &P_prime);\n\n    //printf(\"P_prime: \");\n    //Print_GE_INT3_Q16(P_prime);\n\n    P_prime_bary = Triangle3D_ToBaryCentric(triangle, P_prime);\n    //printf(\"P_prime_bary: \");\n    //Print_GE_INT3_Q16(P_prime_bary);\n    cl_uchar onSurface = BaryCentric_In_Triangle_Q16(P_prime_bary);\n\n    if (onSurface == 1)\n    {\n        *dist_Q16 = ge_length_v3_Q16(INT3_SUB(point_Q16, P_prime));\n\n        return P_prime;\n    }\n\n    ge_int3 P1_P_prime = INT3_SUB(P_prime, P1);\n    ge_int3 P2_P_prime = INT3_SUB(P_prime, P2);\n    ge_int3 P3_P_prime = INT3_SUB(P_prime, P3);\n\n    ge_int3 R1 = INT3_SUB(P1, P2);\n    ge_int3 R2 = INT3_SUB(P2, P3);\n    ge_int3 R3 = INT3_SUB(P3, P1);\n\n    int R1_mag;\n    ge_int3 R1_N = GE_INT3_NORMALIZE_Q16(R1, &R1_mag);\n    int R2_mag;\n    ge_int3 R2_N = GE_INT3_NORMALIZE_Q16(R2, &R2_mag);\n    int R3_mag;\n    ge_int3 R3_N = GE_INT3_NORMALIZE_Q16(R3, &R3_mag);\n\n\n    ge_int3 R1_N_PERP = GE_VECTOR3_ROTATE_ABOUT_AXIS_POS90_Q16(R1_N, triangle->normal_Q16);\n    ge_int3 R2_N_PERP = GE_VECTOR3_ROTATE_ABOUT_AXIS_POS90_Q16(R2_N, triangle->normal_Q16);\n    ge_int3 R3_N_PERP = GE_VECTOR3_ROTATE_ABOUT_AXIS_POS90_Q16(R3_N, triangle->normal_Q16);\n\n\n    int DOT1 = GE_INT3_DOT_PRODUCT_Q16(P1_P_prime, R3_N_PERP);\n    int DOT2 = GE_INT3_DOT_PRODUCT_Q16(P2_P_prime, R1_N_PERP);\n    int DOT3 = GE_INT3_DOT_PRODUCT_Q16(P3_P_prime, R2_N_PERP);\n\n\n    ge_int3 D1R3 = GE_INT3_SCALAR_MUL_Q16(DOT1, R3_N_PERP);\n    ge_int3 D2R1 = GE_INT3_SCALAR_MUL_Q16(DOT2, R1_N_PERP);\n    ge_int3 D3R2 = GE_INT3_SCALAR_MUL_Q16(DOT3, R2_N_PERP);\n\n\n    //p_prime projected to 3 edges\n    ge_int3 P_prime_C1 = INT3_SUB(P_prime, D1R3);\n    ge_int3 P_prime_C2 = INT3_SUB(P_prime, D2R1);\n    ge_int3 P_prime_C3 = INT3_SUB(P_prime, D3R2);\n\n\n    //clamp C points to edge limits\n    int Z1i = GE_INT3_DOT_PRODUCT_Q16(P1_P_prime, R3_N);\n    int Z2i = GE_INT3_DOT_PRODUCT_Q16(P2_P_prime, R1_N);\n    int Z3i = GE_INT3_DOT_PRODUCT_Q16(P3_P_prime, R2_N);\n\n    int Z1 = R3_mag - Z1i;\n    int Z2 = R1_mag - Z2i;\n    int Z3 = R2_mag - Z3i;\n\n\n    int CD1 = SOME_INTERNAL_CORDIST(Z1, Z1i);\n    int CD2 = SOME_INTERNAL_CORDIST(Z2, Z2i);\n    int CD3 = SOME_INTERNAL_CORDIST(Z3, Z3i);\n\n\n    ge_int3 J1 = GE_INT3_SCALAR_MUL_Q16(CD1, R3_N);\n    ge_int3 J2 = GE_INT3_SCALAR_MUL_Q16(CD2, R1_N);\n    ge_int3 J3 = GE_INT3_SCALAR_MUL_Q16(CD3, R2_N);\n\n    ge_int3 L1 = INT3_ADD(J1, P_prime_C1);\n    ge_int3 L2 = INT3_ADD(J2, P_prime_C2);\n    ge_int3 L3 = INT3_ADD(J3, P_prime_C3);\n\n    //get closest L to P_prime\n    int L1D = ge_length_v3_Q16( INT3_SUB(L1, P_prime) );\n    int L2D = ge_length_v3_Q16( INT3_SUB(L2, P_prime) );\n    int L3D = ge_length_v3_Q16( INT3_SUB(L3, P_prime) );\n\n\n    if (L1D < L2D && L1D < L2D)\n    {\n        *dist_Q16 = ge_length_v3_Q16(INT3_SUB(point_Q16, L1));\n\n        return L1;\n    }\n    else if (L2D < L1D && L2D < L3D)\n    {\n        *dist_Q16 = ge_length_v3_Q16(INT3_SUB(point_Q16, L2));\n\n        return L2;\n    }\n    else\n    {\n        *dist_Q16 = ge_length_v3_Q16(INT3_SUB(point_Q16, L3));\n\n        return L3;\n    }\n\n}\n\n\n\nvoid Triangle3DMakeHeavy( Triangle3DHeavy* triangle)\n{\n    triangle->u_Q16 = INT3_SUB(triangle->base.verts_Q16[1], triangle->base.verts_Q16[0]);//P_2 - P_1\n    triangle->v_Q16 = INT3_SUB(triangle->base.verts_Q16[2], triangle->base.verts_Q16[0]);//P_3 - P_1\n\n\n    triangle->normal_Q16 =  GE_INT3_CROSS_PRODUCT_Q16(triangle->u_Q16, triangle->v_Q16);\n\n\n    if (GE_INT3_DOT_PRODUCT_Q16(triangle->normal_Q16, triangle->normal_Q16) < (TO_Q16(1) >> 5)){\n        //printf(\"Warning! Small triangle!\\n\");\n        triangle->valid = 0;\n    }\n    else{\n        triangle->valid = 1;\n    }\n\n}\nvoid Triangle3D_Make2Face( Triangle3DHeavy* triangle1,  Triangle3DHeavy* triangle2, ge_int3* fourCorners)\n{\n    triangle1->base.verts_Q16[0] = fourCorners[0];\n    triangle1->base.verts_Q16[1] = fourCorners[1];\n    triangle1->base.verts_Q16[2] = fourCorners[2];\n\n    triangle2->base.verts_Q16[0] = fourCorners[2];\n    triangle2->base.verts_Q16[1] = fourCorners[3];\n    triangle2->base.verts_Q16[2] = fourCorners[0];\n\n    Triangle3DMakeHeavy(triangle1);\n    Triangle3DMakeHeavy(triangle2);\n}\n\n\n\nvoid MapTileConvexHull_From_TileData( ConvexHull* hull,  cl_int* tileData)\n{\n    ge_int3 A = (ge_int3){ TO_Q16(-1) >> 1, TO_Q16(-1) >> 1, TO_Q16(-1) >> 1 };\n    ge_int3 B = (ge_int3){ TO_Q16(1) >> 1, TO_Q16(-1) >> 1, TO_Q16(-1) >> 1 };\n    ge_int3 C = (ge_int3){ TO_Q16(1) >> 1, TO_Q16(1) >> 1, TO_Q16(-1) >> 1 };\n    ge_int3 D = (ge_int3){ TO_Q16(-1) >> 1, TO_Q16(1) >> 1, TO_Q16(-1) >> 1 };\n\n    \n    ge_int3 E = (ge_int3){ TO_Q16(-1) >> 1, TO_Q16(-1) >> 1, TO_Q16(1) >> 1 };\n    ge_int3 F = (ge_int3){ TO_Q16(1) >> 1, TO_Q16(-1) >> 1, TO_Q16(1) >> 1 };\n    ge_int3 G = (ge_int3){ TO_Q16(1) >> 1, TO_Q16(1) >> 1, TO_Q16(1) >> 1 };\n    ge_int3 H = (ge_int3){ TO_Q16(-1) >> 1, TO_Q16(1) >> 1, TO_Q16(1) >> 1 };\n    ge_int3 X = (ge_int3){ 0, 0, TO_Q16(1) >> 1 };\n\n    cl_uchar lowCornerCount = MapDataLowCornerCount(*tileData);\n\n    if (lowCornerCount > 0) \n    {\n        if (BITGET_MF(*tileData, MapTileFlags_LowCornerBTMLEFT) != 0)\n            H.z = (TO_Q16(-1) >> 1);\n\n        if (BITGET_MF(*tileData, MapTileFlags_LowCornerBTMRIGHT) != 0)\n            G.z = (TO_Q16(-1) >> 1);\n\n        if (BITGET_MF(*tileData, MapTileFlags_LowCornerTPLEFT) != 0)\n            E.z = (TO_Q16(-1) >> 1);\n\n        if (BITGET_MF(*tileData, MapTileFlags_LowCornerTPRIGHT) != 0)\n            F.z = (TO_Q16(-1) >> 1);\n\n\n        //simple ramp cases\n        uint xlevel = MapDataXLevel(tileData);\n        if(xlevel == 0)\n        {\n            X.z = 0;\n        }\n        else if(xlevel == 1)\n        {\n            X.z = TO_Q16(-1) >> 1;\n        }\n\n\n\n    }\n\n\n    int i = 0;\n    //bottom (1)\n    ge_int3 bottomFace[4];\n    bottomFace[0] = A;\n    bottomFace[1] = B;\n    bottomFace[2] = C;\n    bottomFace[3] = D;\n    Triangle3D_Make2Face(&hull->triangles[i], &hull->triangles[i+1], &bottomFace[0]);\n    i+=2;\n\n\n    ge_int3 NegYFace[4];\n    NegYFace[0] = A;\n    NegYFace[1] = E;\n    NegYFace[2] = F;\n    NegYFace[3] = B;\n    Triangle3D_Make2Face(&hull->triangles[i], &hull->triangles[i+1], &NegYFace[0]);\n    i+=2;\n\n    ge_int3 POSYFace[4];\n    POSYFace[0] = C;\n    POSYFace[1] = G;\n    POSYFace[2] = H;\n    POSYFace[3] = D;\n    Triangle3D_Make2Face(&hull->triangles[i], &hull->triangles[i+1], &POSYFace[0]);\n    i+=2;\n\n    ge_int3 POSXFace[4];\n    POSXFace[0] = B;\n    POSXFace[1] = F;\n    POSXFace[2] = G;\n    POSXFace[3] = C;\n    Triangle3D_Make2Face(&hull->triangles[i], &hull->triangles[i+1], &POSXFace[0]);\n    i+=2;\n\n    ge_int3 NEGXFace[4];\n    NEGXFace[0] = D;\n    NEGXFace[1] = H;\n    NEGXFace[2] = E;\n    NEGXFace[3] = A;\n    Triangle3D_Make2Face(&hull->triangles[i], &hull->triangles[i+1], &NEGXFace[0]);\n    i+=2;\n\n    ge_int3 TOPFace1[4];\n    TOPFace1[0] = X;\n    TOPFace1[1] = G;\n    TOPFace1[2] = F;\n    TOPFace1[3] = E;\n    Triangle3D_Make2Face(&hull->triangles[i], &hull->triangles[i+1], &TOPFace1[0]);\n    i+=2;\n\n    ge_int3 TOPFace2[4];\n    TOPFace2[0] = X;\n    TOPFace2[1] = E;\n    TOPFace2[2] = H;\n    TOPFace2[3] = G;\n    Triangle3D_Make2Face(&hull->triangles[i], &hull->triangles[i+1], &TOPFace2[0]);\n    i+=2;\n\n}\n\n\n\n\nvoid PeepPrint(Peep* peep)\n{\n    PrintQ16(peep->physics.drive.target_x_Q16);\n}\n\n\nvoid PeepPeepPhysics(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER Peep* peep, PARAM_GLOBAL_POINTER Peep* otherPeep)\n{\n\n    //calculate force based on penetration distance with otherPeep.\n    ge_int3 d_Q16 = INT3_ADD(otherPeep->physics.base.pos_Q16, INT3_NEG(peep->physics.base.pos_Q16));\n    cl_int combined_r_Q16 = peep->physics.shape.radius_Q16 + otherPeep->physics.shape.radius_Q16;\n    cl_int len_Q16;\n\n\n    ge_int3 penV_Q16 = d_Q16;\n    ge_normalize_v3_Q16(&penV_Q16, &len_Q16);\n\n    if (len_Q16 > peep->physics.shape.radius_Q16 * 2)\n        return;\n\n    cl_int penetrationDist_Q16 = (len_Q16 - (combined_r_Q16));\n    ge_int3 penetrationForce_Q16;\n\n\n    //pos_post_Q16\n    peep->physics.base.pos_post_Q16.x += MUL_PAD_Q16(penV_Q16.x, penetrationDist_Q16 >> 2);\n    peep->physics.base.pos_post_Q16.y += MUL_PAD_Q16(penV_Q16.y, penetrationDist_Q16 >> 2);\n\n    //otherPeep->physics.base.pos_post_Q16.x -= MUL_PAD_Q16(penV_Q16.x, penetrationDist_Q16 >> 1);\n    //otherPeep->physics.base.pos_post_Q16.y -= MUL_PAD_Q16(penV_Q16.y, penetrationDist_Q16 >> 1);\n\n    //peep->physics.base.pos_post_Q16.z += MUL_PAD_Q16(penV_Q16.z, penetrationDist_Q16 >> 1);//dont encourage peeps standing on each other\n\n\n    //V' = V - penV*(V.penV)\n    //DeltaV = -penV*(V.penV)\n\n    cl_int dot;\n    ge_dot_product_3D_Q16(peep->physics.base.v_Q16, penV_Q16, &dot);\n    if (dot > 0) {\n        peep->physics.base.vel_add_Q16.x += -MUL_PAD_Q16(penV_Q16.x, dot);\n        peep->physics.base.vel_add_Q16.y += -MUL_PAD_Q16(penV_Q16.y, dot);\n        //peep->physics.base.vel_add_Q16.z += -MUL_PAD_Q16(penV_Q16.z, dot);//dont encourage peeps standing on each other\n\n        //otherPeep->physics.base.vel_add_Q16.x -= -MUL_PAD_Q16(penV_Q16.x, dot);\n        //otherPeep->physics.base.vel_add_Q16.y -= -MUL_PAD_Q16(penV_Q16.y, dot);\n    }\n\n    //spread messages\n    if (peep->comms.orders_channel == otherPeep->comms.orders_channel)\n    {\n        if (otherPeep->comms.message_TargetReached)\n        {\n            peep->comms.message_TargetReached_pending = otherPeep->comms.message_TargetReached;\n        }\n    }\n\n}\n\nvoid PeepToPeepInteraction(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER Peep* peep, PARAM_GLOBAL_POINTER Peep* otherPeep)\n{\n    if (peep->stateBasic.deathState != 0 || otherPeep->stateBasic.deathState != 0)\n        return;\n\n\n    cl_int dist_Q16 = ge_length_v3_Q16(INT3_ADD(peep->physics.base.pos_Q16, -otherPeep->physics.base.pos_Q16));\n\n    if (dist_Q16 < peep->minDistPeep_Q16)\n    {\n        peep->minDistPeep_Q16 = dist_Q16;\n        peep->minDistPeepPtr = otherPeep->ptr;\n    }\n    \n\n    PeepPeepPhysics(ALL_CORE_PARAMS_PASS, peep, otherPeep);\n}\n\nvoid WorldToMap(ge_int3 world_Q16, ge_int3* out_map_tilecoords_Q16)\n{\n\n    ge_int3 b = { TO_Q16(MAP_TILE_SIZE) ,TO_Q16(MAP_TILE_SIZE) ,TO_Q16(MAP_TILE_SIZE) };\n    ge_int3 map_coords_Q16 = DIV_v3_Q16(world_Q16, b);\n\n    map_coords_Q16.x += (TO_Q16(MAPDIM) >> 1);//MAPDIM*0.5f\n    map_coords_Q16.y += (TO_Q16(MAPDIM) >> 1);//MAPDIM*0.5f.\n    *out_map_tilecoords_Q16 = map_coords_Q16;\n}\n\nvoid MapToWorld(ge_int3 map_tilecoords_Q16, ge_int3* world_Q16)\n{\n    ge_int3 b = { TO_Q16(MAP_TILE_SIZE) ,TO_Q16(MAP_TILE_SIZE) ,TO_Q16(MAP_TILE_SIZE) };\n\n    map_tilecoords_Q16.x -= (TO_Q16(MAPDIM) >> 1);//MAPDIM*0.5f\n    map_tilecoords_Q16.y -= (TO_Q16(MAPDIM) >> 1);//MAPDIM*0.5f\n\n    *world_Q16 = GE_INT3_MUL_Q16(map_tilecoords_Q16, b);\n\n}\n\n\nvoid PeepGetMapTile(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER Peep* peep, ge_int3 offset, \n MapTile* out_map_tile, \n ge_int3* out_tile_world_pos_center_Q16,\n  ge_int3* out_map_tile_coord_whole, \n   cl_int* out_tile_data)\n{\n    (*out_map_tile_coord_whole).z = WHOLE_Q16(peep->posMap_Q16.z) + (offset.z);\n    (*out_map_tile_coord_whole).x = WHOLE_Q16(peep->posMap_Q16.x) + (offset.x);\n    (*out_map_tile_coord_whole).y = WHOLE_Q16(peep->posMap_Q16.y) + (offset.y);\n\n    ge_int3 tileCoords_Q16;\n    tileCoords_Q16.x = TO_Q16((* out_map_tile_coord_whole).x) + (TO_Q16(1) >> 1);//center of tile\n    tileCoords_Q16.y = TO_Q16((* out_map_tile_coord_whole).y) + (TO_Q16(1) >> 1);//center of tile\n    tileCoords_Q16.z = TO_Q16((* out_map_tile_coord_whole).z) + (TO_Q16(1) >> 1);//center of tile\n\n    MapToWorld(tileCoords_Q16, out_tile_world_pos_center_Q16);\n\n\n    if ((*out_map_tile_coord_whole).z < 0 || (*out_map_tile_coord_whole).z >= (MAPDEPTH))\n    {\n        *out_map_tile = MapTile_NONE;\n        return;\n    }\n    if ((*out_map_tile_coord_whole).x < 0 || (*out_map_tile_coord_whole).x >= (MAPDIM))\n    {\n        *out_map_tile = MapTile_NONE;\n        return;\n    }\n    if ((*out_map_tile_coord_whole).y < 0 || (*out_map_tile_coord_whole).y >= (MAPDIM))\n    {\n        *out_map_tile = MapTile_NONE;\n        return;\n    }\n    \n    *out_tile_data = gameState->map.levels[(*out_map_tile_coord_whole).z].data[(*out_map_tile_coord_whole).x][(*out_map_tile_coord_whole).y];\n    *out_map_tile = MapDataGetTile(*out_tile_data);\n    \n}\n\nvoid RegionCollision(PARAM_GLOBAL_POINTER cl_int* out_pen_Q16, cl_int radius_Q16, cl_int W, cl_int lr)\n{\n    if (W > 0 && lr == -1)//left outside\n    {\n        *out_pen_Q16 = -(radius_Q16 - W);\n        *out_pen_Q16 = clamp(*out_pen_Q16, -(radius_Q16), 0);\n    }\n    else if (W < 0 && lr == 1)//right outside\n    {\n        *out_pen_Q16 = (radius_Q16 + W);\n        *out_pen_Q16 = clamp(*out_pen_Q16, 0, radius_Q16);\n    }\n    else if (W > 0 && lr == 1)//right inside\n    {\n        *out_pen_Q16 = (W + radius_Q16);\n        *out_pen_Q16 = clamp(*out_pen_Q16, 0, W + radius_Q16);\n    }\n    else if (W < 0 && lr == -1)//left inside\n    {\n        *out_pen_Q16 = (W - radius_Q16);\n        *out_pen_Q16 = clamp(*out_pen_Q16, W - radius_Q16, 0);\n    }\n}\n\n\n\n\nge_int3 MapTileConvexHull_ClosestPointToPoint( ConvexHull* hull, ge_int3 point_Q16)\n{\n    int smallestDist_Q16 = TO_Q16(1000);\n    ge_int3 closestPoint;\n    for (int i = 0; i < 14; i++)\n    {\n        Triangle3DHeavy* tri = &hull->triangles[i];\n        if(tri->valid == 0)\n            continue;\n\n        int dist_Q16;\n        ge_int3 closest = Triangle3DHeavy_ClosestPoint(tri, point_Q16, &dist_Q16);\n        //printf(\"Dist(%d): \", i);\n        //PrintQ16(dist_Q16);\n        if (dist_Q16 < smallestDist_Q16)\n        {\n            smallestDist_Q16 = dist_Q16;\n            closestPoint = closest;\n        }\n    }\n    //printf(\"Chosen Dist: \");\n    //PrintQ16(smallestDist_Q16);\n    //printf(\"Chosen Point: \");\n    //Print_GE_INT3_Q16(closestPoint);\n    return closestPoint;\n}\n\ncl_uchar MapTileConvexHull_PointInside( ConvexHull* hull, ge_int3 point)\n{\n    //check dot product of point to verts against normal of the triangle\n    for (int i = 0; i < 14; i++)\n    {\n        Triangle3DHeavy* tri = &hull->triangles[i];\n        if(tri->valid == 0)\n            continue;\n\n        for(int v = 0; v < 3; v++)\n        {\n            ge_int3 vert = hull->triangles[i].base.verts_Q16[v];\n            \n            ge_int3 point_vert = INT3_SUB(point, vert);\n            //int mag;\n            //ge_int3 point_vert_normalized = GE_INT3_NORMALIZE_Q16(point_vert, &mag);\n\n            int dot = GE_INT3_DOT_PRODUCT_Q16(point_vert, hull->triangles[i].normal_Q16);\n            if(dot <= 0)\n                return 0;\n        }\n    }\n\n    return 1;\n}\n\nvoid PeepMapTileCollisions(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER Peep* peep)\n{\n\n    //maptile collisions\n    MapTile tiles[26];\n    ge_int3 tileCenters_Q16[26];\n    ge_int3 dummy;\n    cl_int tileDatas[26];\n\n\n    PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 1, 0, 0 }, & tiles[0], & tileCenters_Q16[0],&dummy, &tileDatas[0]);\n    PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { -1, 0, 0 }, & tiles[1], & tileCenters_Q16[1], &dummy, & tileDatas[1]);\n    PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 0, -1, 0 }, & tiles[2], & tileCenters_Q16[2], &dummy, & tileDatas[2]);\n    PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 0, 1, 0 }, & tiles[3], & tileCenters_Q16[3], &dummy, & tileDatas[3]);\n    PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 0, 0, 1 }, & tiles[4], & tileCenters_Q16[4], &dummy, & tileDatas[4]);\n    PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 0, 0, -1 }, & tiles[5], & tileCenters_Q16[5], &dummy, & tileDatas[5]);\n    PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 0, 0, 0 }, & tiles[6], & tileCenters_Q16[6],&dummy, &tileDatas[6]);\n    \n    // {\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){0, 0, 0}, &tiles[6], &tileCenters_Q16[6], &dummy, &tileDatas[5]);\n\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){1, 0, -1}, &tiles[6], &tileCenters_Q16[6], &dummy, &tileDatas[6]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){0, 1, -1}, &tiles[7], &tileCenters_Q16[7], &dummy, &tileDatas[7]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){1, 1, -1}, &tiles[8], &tileCenters_Q16[8], &dummy, &tileDatas[8]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){-1, 0, -1}, &tiles[9], &tileCenters_Q16[9], &dummy, &tileDatas[9]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){0, -1, -1}, &tiles[10], &tileCenters_Q16[10], &dummy, &tileDatas[10]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){-1, -1, -1}, &tiles[11], &tileCenters_Q16[11], &dummy, &tileDatas[11]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){1, -1, -1}, &tiles[12], &tileCenters_Q16[12], &dummy, &tileDatas[12]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){-1, 1, -1}, &tiles[13], &tileCenters_Q16[13], &dummy, &tileDatas[13]);\n\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){1, 0, 1}, &tiles[14], &tileCenters_Q16[14], &dummy, &tileDatas[14]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){0, 1, 1}, &tiles[15], &tileCenters_Q16[15], &dummy, &tileDatas[15]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){1, 1, 1}, &tiles[16], &tileCenters_Q16[16], &dummy, &tileDatas[16]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){-1, 0, 1}, &tiles[17], &tileCenters_Q16[17], &dummy, &tileDatas[17]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){0, -1, 1}, &tiles[18], &tileCenters_Q16[18], &dummy, &tileDatas[18]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){-1, -1, 1}, &tiles[19], &tileCenters_Q16[19], &dummy, &tileDatas[19]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){1, -1, 1}, &tiles[20], &tileCenters_Q16[20], &dummy, &tileDatas[20]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){-1, 1, 1}, &tiles[21], &tileCenters_Q16[21], &dummy, &tileDatas[21]);\n\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){1, 1, 0}, &tiles[22], &tileCenters_Q16[23], &dummy, &tileDatas[22]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){-1, 1, 0}, &tiles[23], &tileCenters_Q16[24], &dummy, &tileDatas[23]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){1, -1, 0}, &tiles[24], &tileCenters_Q16[25], &dummy, &tileDatas[24]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){-1, -1, 0}, &tiles[25], &tileCenters_Q16[26], &dummy, &tileDatas[25]);\n    // }\n    \n    //printf(\"peep Pos: \"); Print_GE_INT3_Q16(peep->physics.base.pos_Q16);\n    ConvexHull hull;//hull for use below\n    for (int i = 0; i < 7; i++)\n    {\n       \n        MapTile tile = tiles[i];\n        \n        if (tile != MapTile_NONE)\n        {\n            ge_int3 futurePos;\n            futurePos.x = (peep->physics.base.pos_Q16.x + peep->physics.base.pos_post_Q16.z) + peep->physics.base.v_Q16.x;\n            futurePos.y = (peep->physics.base.pos_Q16.y + peep->physics.base.pos_post_Q16.y) + peep->physics.base.v_Q16.y;\n            futurePos.z = (peep->physics.base.pos_Q16.z + peep->physics.base.pos_post_Q16.z) + peep->physics.base.v_Q16.z;\n\n            ge_int3 nearestPoint;\n            cl_uchar insideSolidRegion;\n  \n            MapTileConvexHull_From_TileData(&hull, &tileDatas[i]);\n            ge_int3 peepPosLocalToHull_Q16 = INT3_SUB(futurePos, tileCenters_Q16[i]);\n\n            peepPosLocalToHull_Q16 = GE_INT3_DIV_Q16(peepPosLocalToHull_Q16, (ge_int3) {\n                TO_Q16(MAP_TILE_SIZE), TO_Q16(MAP_TILE_SIZE)\n                    , TO_Q16(MAP_TILE_SIZE)\n            });\n\n            nearestPoint = MapTileConvexHull_ClosestPointToPoint(&hull, peepPosLocalToHull_Q16);\n            insideSolidRegion = MapTileConvexHull_PointInside(&hull, peepPosLocalToHull_Q16);\n\n            peep->stateBasic.buriedGlitchState = insideSolidRegion;\n\n            nearestPoint = GE_INT3_MUL_Q16(nearestPoint, (ge_int3) {\n                TO_Q16(MAP_TILE_SIZE), TO_Q16(MAP_TILE_SIZE)\n                    , TO_Q16(MAP_TILE_SIZE)\n            });\n\n            nearestPoint = INT3_ADD(nearestPoint, tileCenters_Q16[i]);\n        \n\n            ge_int3 A;\n            A.x = futurePos.x - nearestPoint.x;\n            A.y = futurePos.y - nearestPoint.y;\n            A.z = futurePos.z - nearestPoint.z;\n\n            //make A vector always point to outside the shape\n            if(insideSolidRegion==1){\n               A = INT3_NEG(A);\n               //printf(\"inside region!\");\n            }\n\n\n            ge_int3 An = A;\n            cl_int mag;\n            ge_normalize_v3_Q16(&An, &mag);\n\n\n            if (mag < peep->physics.shape.radius_Q16)\n            {\n                cl_int dot;\n                ge_int3 V = INT3_ADD(peep->physics.base.v_Q16 , peep->physics.base.vel_add_Q16);\n                ge_dot_product_3D_Q16( V, An, &dot);\n                ge_int3 B;//velocity to cancel\n                B.x = MUL_PAD_Q16(An.x, dot);\n                B.y = MUL_PAD_Q16(An.y, dot);\n                B.z = MUL_PAD_Q16(An.z, dot);\n\n\n                int pushAmt;\n                if(insideSolidRegion)\n                    pushAmt = (peep->physics.shape.radius_Q16 + mag);\n                else\n                    pushAmt = (peep->physics.shape.radius_Q16 - mag);\n\n                //corrections\n                peep->physics.base.pos_post_Q16.z += MUL_PAD_Q16(An.z, pushAmt);\n                peep->physics.base.pos_post_Q16.y += MUL_PAD_Q16(An.y, pushAmt);\n                peep->physics.base.pos_post_Q16.x += MUL_PAD_Q16(An.x, pushAmt);\n\n                \n                if((-B.z) < peep->physics.base.vel_add_Q16.z || (-B.z) > peep->physics.base.vel_add_Q16.z)\n                    peep->physics.base.vel_add_Q16.z += -B.z;\n                    \n                if ((-B.y) < peep->physics.base.vel_add_Q16.y || (-B.y) > peep->physics.base.vel_add_Q16.y)\n                    peep->physics.base.vel_add_Q16.y += -B.y;\n\n                if ((-B.x) < peep->physics.base.vel_add_Q16.x || (-B.x) > peep->physics.base.vel_add_Q16.x)\n                    peep->physics.base.vel_add_Q16.x += -B.x;\n                \n\n\n            }\n\n        }\n    }\n\n    //'game gravity'\n    //peep->physics.base.v_Q16.z += (TO_Q16(-1) >> 3);\n}\n\n\nvoid PeepDrivePhysics(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER Peep* peep)\n{\n    ge_int3 targetVelocity;\n\n    ge_int3 d;\n    d.x = peep->physics.drive.target_x_Q16 - peep->physics.base.pos_Q16.x;\n    d.y = peep->physics.drive.target_y_Q16 - peep->physics.base.pos_Q16.y;\n    d.z = peep->physics.drive.target_z_Q16 - peep->physics.base.pos_Q16.z;\n    int len;\n    ge_normalize_v3_Q16(&d, &len);\n\n    if (len < TO_Q16(1))\n    {\n        d.x = MUL_PAD_Q16(d.x, len);\n        d.y = MUL_PAD_Q16(d.y, len);\n        d.z = MUL_PAD_Q16(d.z, len);\n    }\n\n    if (WHOLE_Q16(len) < 2)//within range of current target\n    {\n\n\n        if (peep->physics.drive.targetPathNodeOPtr == OFFSET_NULL)\n        {\n            //final node reached.\n            peep->comms.message_TargetReached_pending = 255;//send the message\n            peep->physics.drive.drivingToTarget = 0;\n        }\n        else\n        {\n            //advance if theres room\n            USE_POINTER AStarPathNode* targetPathNode;\n            OFFSET_TO_PTR(gameState->paths.pathNodes, peep->physics.drive.targetPathNodeOPtr,targetPathNode);\n\n\n            USE_POINTER AStarPathNode* prevpathNode;\n            OFFSET_TO_PTR(gameState->paths.pathNodes, peep->physics.drive.prevPathNodeOPtr,prevpathNode);\n\n            //advance\n            peep->physics.drive.prevPathNodeOPtr = peep->physics.drive.targetPathNodeOPtr;        \n            peep->physics.drive.targetPathNodeOPtr = targetPathNode->nextOPtr;\n\n            \n            if (peep->physics.drive.targetPathNodeOPtr != OFFSET_NULL) \n            {\n                USE_POINTER AStarPathNode* targetPathNode;\n                OFFSET_TO_PTR(gameState->paths.pathNodes, peep->physics.drive.targetPathNodeOPtr,targetPathNode);\n                \n\n                ge_int3 nextTarget_Q16 = targetPathNode->mapCoord_Q16;\n                MapToWorld(nextTarget_Q16, &nextTarget_Q16);\n\n                peep->physics.drive.target_x_Q16 = nextTarget_Q16.x;\n                peep->physics.drive.target_y_Q16 = nextTarget_Q16.y;\n                peep->physics.drive.target_z_Q16 = nextTarget_Q16.z;\n            }\n            \n        }\n        \n    }\n\n   \n\n    //advacne if theres room\n    USE_POINTER AStarPathNode* targetPathNode;\n    OFFSET_TO_PTR(gameState->paths.pathNodes, peep->physics.drive.targetPathNodeOPtr,targetPathNode);\n   \n\n    // Print_GE_INT3_Q16(peep->physics.base.pos_Q16);\n    if(targetPathNode != NULL)\n    {\n        //cl_uint* mapData = AStarPathNode_GetMapData(ALL_CORE_PARAMS_PASS, targetPathNode);\n        \n        //CL_CHECK_NULL(mapData);\n        ge_int3 coord = GE_INT3_WHOLE_Q16(targetPathNode->mapCoord_Q16);\n        int peepCnt = gameState->map.levels[coord.z].peepCounts[coord.x][coord.y];\n\n        //if(peepCnt < PEEP_PATH_CROWD /*|| WHOLE_Q16(len) > 10 */)\n        {\n            targetVelocity.x = d.x >> 2;\n            targetVelocity.y = d.y >> 2;\n            targetVelocity.z = d.z >> 2;\n\n            ge_int3 error = INT3_SUB( targetVelocity, peep->physics.base.v_Q16 );\n\n            peep->physics.base.vel_add_Q16.x += error.x;\n            peep->physics.base.vel_add_Q16.y += error.y;\n            peep->physics.base.vel_add_Q16.z += error.z;\n        }\n        //else\n        {\n         //   printf(\"pc: %d, \",peepCnt);\n        }\n    }\n\n\n    peep->physics.base.CS_angle_rad = atan2(((float)(d.x))/(1<<16), ((float)(d.y)) / (1 << 16));\n\n\n\n\n}\n\nvoid WalkAndFight(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER Peep* peep)\n{\n\n\n\n    //if search is done - start the peep on path\n    if(peep->stateBasic.aStarSearchPtr != OFFSET_NULL)\n    {\n        USE_POINTER AStarSearch_BFS* search = &gameState->mapSearchers[0];\n        if(search->state == AStarPathFindingProgress_Finished)\n        {\n            peep->physics.drive.targetPathNodeOPtr = search->pathOPtr;\n            peep->physics.drive.prevPathNodeOPtr = OFFSET_NULL;\n            //AStarPathNode* nxtPathNode;\n            //OFFSET_TO_PTR(gameState->paths.pathNodes, peep->physics.drive.targetPathNodeOPtr, nxtPathNode);\n            \n\n           // printf(\"path assining to %d\\n\", search->pathOPtr);\n            peep->stateBasic.aStarSearchPtr = OFFSET_NULL;\n        }\n        \n    }\n\n\n    if(peep->physics.drive.targetPathNodeOPtr != OFFSET_NULL)\n    {\n\n\n        //drive to the next path node\n        USE_POINTER AStarPathNode* nxtPathNode;\n        OFFSET_TO_PTR(gameState->paths.pathNodes, peep->physics.drive.targetPathNodeOPtr, nxtPathNode);\n\n\n            ge_int3 worldloc;\n            MapToWorld(nxtPathNode->mapCoord_Q16, &worldloc);\n            peep->physics.drive.target_x_Q16 = worldloc.x;\n            peep->physics.drive.target_y_Q16 = worldloc.y;\n            peep->physics.drive.target_z_Q16 = worldloc.z;\n            peep->physics.drive.drivingToTarget = 1;\n\n            //restrict comms to new channel\n            peep->comms.orders_channel = RandomRange(worldloc.x, 0, 10000);//broke\n            peep->comms.message_TargetReached = 0;\n            peep->comms.message_TargetReached_pending = 0;\n\n    }\n\n\n\n    PeepDrivePhysics(ALL_CORE_PARAMS_PASS, peep);\n    PeepMapTileCollisions(ALL_CORE_PARAMS_PASS, peep);\n\n}\n\n\nvoid PeepPreUpdate1(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER Peep* peep)\n{\n\n}\n\nvoid PeepPreUpdate2(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER Peep* peep)\n{\n    peep->physics.base.v_Q16.z += peep->physics.base.vel_add_Q16.z;\n    peep->physics.base.v_Q16.y += peep->physics.base.vel_add_Q16.y;\n    peep->physics.base.v_Q16.x += peep->physics.base.vel_add_Q16.x;\n\n    peep->physics.base.vel_add_Q16.z = 0;\n    peep->physics.base.vel_add_Q16.y = 0;\n    peep->physics.base.vel_add_Q16.x = 0;\n\n\n\n\n    peep->physics.base.pos_Q16.x += peep->physics.base.v_Q16.x;\n    peep->physics.base.pos_Q16.y += peep->physics.base.v_Q16.y;\n    peep->physics.base.pos_Q16.z += peep->physics.base.v_Q16.z;\n\n    peep->physics.base.pos_Q16.z += peep->physics.base.pos_post_Q16.z;\n    peep->physics.base.pos_Q16.y += peep->physics.base.pos_post_Q16.y;\n    peep->physics.base.pos_Q16.x += peep->physics.base.pos_post_Q16.x;\n\n\n    //hard map limits\n    const int lb = 1;\n    peep->physics.base.pos_Q16.x = clamp(peep->physics.base.pos_Q16.x, (-(MAP_TILE_SIZE*(((MAPDIM)/2)-lb)))<<16, (MAP_TILE_SIZE*(((MAPDIM)/2)-lb))<<16);\n    peep->physics.base.pos_Q16.y = clamp(peep->physics.base.pos_Q16.y, (-(MAP_TILE_SIZE*(((MAPDIM)/2)-lb)))<<16, (MAP_TILE_SIZE*(((MAPDIM)/2)-lb))<<16);\n    peep->physics.base.pos_Q16.z = clamp(peep->physics.base.pos_Q16.z, -(MAP_TILE_SIZE)<<16, (MAP_TILE_SIZE*(MAPDEPTH))<<16);\n\n\n    peep->physics.base.pos_post_Q16.z = 0;\n    peep->physics.base.pos_post_Q16.y = 0;\n    peep->physics.base.pos_post_Q16.x = 0;\n\n    peep->physics.base.v_Q16.x = 0;\n    peep->physics.base.v_Q16.y = 0;\n    peep->physics.base.v_Q16.z = 0;\n\n    if (peep->stateBasic.health <= 0)\n        peep->stateBasic.deathState = 1;\n\n\n    //peep comms\n    /*\n    if (peep->comms.message_TargetReached_pending)\n    {\n        peep->physics.drive.drivingToTarget = 0;\n        peep->comms.message_TargetReached = peep->comms.message_TargetReached_pending;\n        peep->comms.message_TargetReached--;//message fade\n    }\n    */\n\n\n\n}\n\nint PeepMapVisiblity(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER Peep* peep, int mapZViewLevel)\n{\n    #ifdef PEEP_ALL_ALWAYS_VISIBLE\n        return 1;\n    #endif\n\n\n    ge_int3 maptilecoords;\n    maptilecoords.x = WHOLE_Q16(peep->posMap_Q16.x);\n    maptilecoords.y = WHOLE_Q16(peep->posMap_Q16.y);\n    maptilecoords.z = WHOLE_Q16(peep->posMap_Q16.z);\n    \n    //search up to z level 0\n    ge_int3 offset, tilePWorldCen, tileMapCoordWhole;\n    MapTile tile;\n    cl_int tileData;\n    offset.x = 0;\n    offset.y = 0;\n    offset.z = 0;\n    PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, offset, &tile, &tilePWorldCen, &tileMapCoordWhole, &tileData);\n    tile = MapDataGetTile(tileData);\n    cl_uchar firstTileOK = 0;\n    if((MapDataLowCornerCount(tileData) > 0)  || tile == MapTile_NONE)\n        firstTileOK = 1;\n\n    tileMapCoordWhole.z++;\n    tileData = gameState->map.levels[tileMapCoordWhole.z].data[tileMapCoordWhole.x][tileMapCoordWhole.y];\n    tile = MapDataGetTile(tileData);\n\n    while (firstTileOK && (tile == MapTile_NONE) && tileMapCoordWhole.z < MAPDEPTH)\n    {\n        tileMapCoordWhole.z++;\n\n        tileData = gameState->map.levels[tileMapCoordWhole.z].data[tileMapCoordWhole.x][tileMapCoordWhole.y];\n        tile = MapDataGetTile(tileData);\n    }\n    //printf(\"%d\\n\", tileMapCoordWhole.z);\n\n    if (tileMapCoordWhole.z == MAPDEPTH)\n    {\n        //hit the sky \n        if (maptilecoords.z <= mapZViewLevel+1)\n            return 1;\n        else\n            return 0;\n        return 1;\n    }\n    else\n    {\n        //'pocket' case\n        if (tileMapCoordWhole.z >= mapZViewLevel+2)\n        {\n            if (maptilecoords.z <= mapZViewLevel+1)\n            {\n                return 1;\n            }\n        }\n\n        return 0;\n    }\n    \n}\n\n\nvoid MachineUpdate(ALL_CORE_PARAMS,PARAM_GLOBAL_POINTER Machine* machine)\n{\n    USE_POINTER MachineDesc* desc;\n    OFFSET_TO_PTR(gameState->machineDescriptions, machine->MachineDescPtr, desc);\n\n    USE_POINTER MachineRecipe* recip;\n    OFFSET_TO_PTR(gameState->machineRecipes, machine->recipePtr, recip);\n\n    bool readyToProcess = true;\n    for(int i = 0; i < 8; i++)\n    {\n        int ratio = recip->inputRatio[i];\n        ItemTypes type = recip->inputTypes[i];\n        if(ratio >= 1)\n        {\n            if(machine->inventory.counts[type] >= ratio)\n            {\n                \n            }\n            else\n            {\n                readyToProcess = false;\n            }\n        }\n    }\n\n    if(readyToProcess && machine->state == MachineState_Running)\n    {\n        machine->tickProgess++;\n\n        if(machine->tickProgess >= desc->processingTime)\n        {\n            machine->tickProgess = 0;\n            MachineTypes type = desc->type;\n            \n          \n\n            for(int i = 0; i < 8; i++)\n            {\n                int ratio = recip->inputRatio[i];\n                int outRatio = recip->outputRatio[i];\n                ItemTypes type = recip->inputTypes[i];\n                ItemTypes outType = recip->outputTypes[i];\n\n                machine->inventory.counts[type]-=ratio;\n                machine->inventory.counts[outType]+=outRatio;\n            }\n            \n        }\n        \n    }\n}\n\n\nvoid PeepUpdate(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER Peep* peep)\n{\n\n    peep->minDistPeep_Q16 = (1 << 30);\n    peep->minDistPeepPtr = OFFSET_NULL;\n\n\n    cl_int x = ((peep->physics.base.pos_Q16.x >> 16) / (SECTOR_SIZE));\n    cl_int y = ((peep->physics.base.pos_Q16.y >> 16) / (SECTOR_SIZE));\n\n\n    USE_POINTER MapSector* cursector = &(gameState->sectors[x + SQRT_MAXSECTORS / 2][y + SQRT_MAXSECTORS / 2]);\n    CL_CHECK_NULL(cursector)\n\n\n    //traverse sector\n    int minx = cursector->ptr.x - 1; if (minx == 0xFFFFFFFF) minx = 0;\n    int miny = cursector->ptr.y - 1; if (miny == 0xFFFFFFFF) miny = 0;\n\n    int maxx = cursector->ptr.x + 1; if (maxx >= SQRT_MAXSECTORS) maxx = SQRT_MAXSECTORS-1;\n    int maxy = cursector->ptr.y + 1; if (maxy >= SQRT_MAXSECTORS) maxy = SQRT_MAXSECTORS-1;\n    \n    for(cl_int sectorx = minx; sectorx <= maxx; sectorx++)\n    {\n        for (cl_int sectory = miny; sectory <= maxy; sectory++)\n        {\n\n            USE_POINTER MapSector* sector = &gameState->sectors[sectorx][sectory];\n            CL_CHECK_NULL(sector);\n\n\n            for(int i = 0; i < MAX_PEEPS_PER_SECTOR; i++)\n            {\n                if(sector->peepPtrs[i] == OFFSET_NULL)\n                    continue;\n\n                USE_POINTER Peep* otherPeep;\n                OFFSET_TO_PTR(gameState->peeps, sector->peepPtrs[i], otherPeep);\n                \n                if (otherPeep != peep) {\n                    \n                    PeepToPeepInteraction(ALL_CORE_PARAMS_PASS, peep, otherPeep);\n                }\n            }\n        }\n    }\n   \n    ge_int3 posMap_Q16;\n    WorldToMap( peep->physics.base.pos_Q16, &posMap_Q16);\n    peep->posMap_Q16 = posMap_Q16;\n\n    ge_int3 maptilecoords;\n    maptilecoords.x = WHOLE_Q16(peep->posMap_Q16.x);\n    maptilecoords.y = WHOLE_Q16(peep->posMap_Q16.y);\n    maptilecoords.z = WHOLE_Q16(peep->posMap_Q16.z);\n\n    ge_int3 maptilecoords_prev;\n    maptilecoords_prev.x = WHOLE_Q16(peep->lastGoodPosMap_Q16.x);\n    maptilecoords_prev.y = WHOLE_Q16(peep->lastGoodPosMap_Q16.y);\n    maptilecoords_prev.z = WHOLE_Q16(peep->lastGoodPosMap_Q16.z);\n\n\n    //update visibility\n    if (!VECTOR3_EQUAL(maptilecoords, maptilecoords_prev) || (ThisClient(ALL_CORE_PARAMS_PASS)->mapZView_1 != ThisClient(ALL_CORE_PARAMS_PASS)->mapZView))\n    {\n        if (PeepMapVisiblity(ALL_CORE_PARAMS_PASS, peep, ThisClient(ALL_CORE_PARAMS_PASS)->mapZView))\n        {     \n            BITSET(peep->stateBasic.bitflags0, PeepState_BitFlags_visible);\n        }\n        else\n        {\n            BITCLEAR(peep->stateBasic.bitflags0, PeepState_BitFlags_visible);\n        }\n    }\n\n\n\n    //update map coord tracking\n    if(VECTOR3_EQUAL(peep->mapCoord, maptilecoords) == 0)\n    {\n\n\n\n        peep->mapCoord_1 = peep->mapCoord;\n        peep->mapCoord = VECTOR3_CAST(maptilecoords, offsetPtrShort3);\n\n        //printf(\"a\");\n            // cl_uint* mapData = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, VECTOR3_CAST(peep->mapCoord, ge_int3));\n            // peepCnt = MapTileData_PeepCount(*mapData);\n            // MapTileData_SetPeepCount(mapData, peepCnt+1);\n        \n        //int b = atomic_inc(&gameState->map.levels[peep->mapCoord.z].peepCounts[peep->mapCoord.x][peep->mapCoord.y]);\n        //int a = atomic_dec(&gameState->map.levels[peep->mapCoord_1.z].peepCounts[peep->mapCoord_1.x][peep->mapCoord_1.y]);\n\n        //printf(\"%d,%d\\n\", a,b);\n    }\n        \n\n    \n    \n\n    \n\n\n    //revert position to last good if needed\n    MapTile curTile;\n    cl_int tileData;\n    ge_int3 dummy;\n    ge_int3 dummy2;\n    PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 0, 0, 0 }, &curTile, &dummy, & dummy2, & tileData);\n\n    \n\n    if (peep->stateBasic.buriedGlitchState != 0)\n    {\n        //revert to center of last good map position\n        #ifndef PEEP_DISABLE_TILECORRECTIONS\n\n            ge_int3 lastGoodPos;\n            MapToWorld(peep->lastGoodPosMap_Q16, &lastGoodPos);\n\n            peep->physics.base.pos_post_Q16.x += lastGoodPos.x - peep->physics.base.pos_Q16.x;\n            peep->physics.base.pos_post_Q16.y += lastGoodPos.y - peep->physics.base.pos_Q16.y;\n            peep->physics.base.pos_post_Q16.z += lastGoodPos.z - peep->physics.base.pos_Q16.z;\n\n            peep->physics.base.vel_add_Q16.x = -peep->physics.base.v_Q16.x;\n            peep->physics.base.vel_add_Q16.y = -peep->physics.base.v_Q16.y;\n            peep->physics.base.vel_add_Q16.z = -peep->physics.base.v_Q16.z;\n\n        #endif\n    }\n    else\n    {\n\n        peep->lastGoodPosMap_Q16 = peep->posMap_Q16;\n    }\n    \n    WalkAndFight(ALL_CORE_PARAMS_PASS, peep);\n\n}\n\nvoid ParticleUpdate(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER Particle* p)\n{\n    p->pos.x = ADD_QMP32(p->pos.x, p->vel.x);\n    p->pos.y = ADD_QMP32(p->pos.y, p->vel.y);\n}\n\n\n\n\nvoid MapUpdateShadow(ALL_CORE_PARAMS, int x, int y)\n{\n    if ((x < 1) || (x >= MAPDIM - 1) || (y < 1) || (y >= MAPDIM - 1))\n    {\n        return;\n    }\n\n\n    MapTile tile = MapTile_NONE;\n    mapTile2VBO[y * MAPDIM + x] = MapTile_NONE;\n\n\n    int shadowIntensity;\n    for (int z = ThisClient(ALL_CORE_PARAMS_PASS)->mapZView+1; z >= 0; z--)\n    {       \n        if(z >= MAPDEPTH) continue;\n\n        USE_POINTER cl_uint* data = &gameState->map.levels[z].data[x][y];\n        MapTile center =MapDataGetTile(*data);\n\n        if (center != MapTile_NONE)\n            return;\n\n\n        // b | c | d\n        // e |cen| f\n        // g | h | i\n        //MapTile b = gameState->map.levels[z].data[x-1][y-1]; \n        //MapTile c = gameState->map.levels[z].data[x][y-1];\n        ////MapTile d = gameState->map.levels[z].data[x+1][y-1];\n        //MapTile e = gameState->map.levels[z].data[x-1][y];\n        //MapTile f = gameState->map.levels[z].data[x + 1][y];\n        ////MapTile g = gameState->map.levels[z].data[x - 1][y+1];\n        //MapTile h = gameState->map.levels[z].data[x][y + 1];\n        ////MapTile i = gameState->map.levels[z].data[x+1][y + 1];\n\n\n        cl_uchar f = MapRidgeType(ALL_CORE_PARAMS_PASS, (ge_int3) { x + 1, y, z }, (ge_int3) { 1, 0, 0 });\n        cl_uchar h = MapRidgeType(ALL_CORE_PARAMS_PASS, (ge_int3) { x , y+1, z }, (ge_int3) { 0, 1, 0 });\n        cl_uchar e = MapRidgeType(ALL_CORE_PARAMS_PASS, (ge_int3) { x - 1, y, z }, (ge_int3) { -1, 0, 0 });\n        cl_uchar c = MapRidgeType(ALL_CORE_PARAMS_PASS, (ge_int3) { x, y-1, z }, (ge_int3) { 0, -1, 0 });\n\n\n        if ((f != 0) && (c == 0) && (e == 0) && (h == 0))\n            tile = MapTile_Shadow_0;\n\n        if ((f == 0) && (c == 0) && (e != 0) && (h == 0))\n            tile = MapTile_Shadow_2;\n\n        if ((f == 0) && (c != 0) && (e == 0) && (h == 0))\n            tile = MapTile_Shadow_1;\n\n        if ((f == 0) && (c == 0) && (e == 0) && (h != 0))\n            tile = MapTile_Shadow_3;\n\n        //-------------\n\n        if ((f != 0) && (c != 0) && (e == 0) && (h == 0))\n            tile = MapTile_Shadow_5;\n\n        if ((f == 0) && (c != 0) && (e != 0) && (h == 0))\n            tile = MapTile_Shadow_6;\n\n        if ((f == 0) && (c == 0) && (e != 0) && (h != 0))\n            tile = MapTile_Shadow_7;\n\n        if ((f != 0) && (c == 0) && (e == 0) && (h != 0))\n            tile = MapTile_Shadow_4;\n\n        //-------------------------\n\n        if ((f != 0) && (c != 0) && (e != 0) && (h == 0))\n            tile = MapTile_Shadow_14;\n\n        if ((f != 0) && (c != 0) && (e == 0) && (h != 0))\n            tile = MapTile_Shadow_15;\n\n        if ((f != 0) && (c == 0) && (e != 0) && (h != 0))\n            tile = MapTile_Shadow_12;\n\n        if ((f == 0) && (c != 0) && (e != 0) && (h != 0))\n            tile = MapTile_Shadow_10;\n        //----------------------------\n        if ((f != 0) && (c == 0) && (e != 0) && (h == 0))\n            tile = MapTile_Shadow_16;\n\n        if ((f == 0) && (c != 0) && (e == 0) && (h != 0))\n            tile = MapTile_Shadow_8;\n\n        //------------------------------\n        if ((f != 0) && (c != 0) && (e != 0) && (h != 0))\n            tile = MapTile_Shadow_11;\n\n\n        mapTile2VBO[y * MAPDIM + x] = tile;\n        \n        cl_uint finalAttr = (clamp(15-0, 0, 15) << 6);\n        mapTile2AttrVBO[ y * MAPDIM + x ] = finalAttr;\n    }\n\n\n}\n\n\n\n\n\n\n\n\n\nvoid MapBuildTileView(ALL_CORE_PARAMS, int x, int y)\n{\n    ge_int3 coord = (ge_int3){x,y,ThisClient(ALL_CORE_PARAMS_PASS)->mapZView };\n    USE_POINTER cl_uint* data = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, coord);\n    MapTile tile = MapDataGetTile(*data);\n    MapTile tileUp;\n    if (ThisClient(ALL_CORE_PARAMS_PASS)->mapZView < MAPDEPTH-1)\n    {\n        coord.z = ThisClient(ALL_CORE_PARAMS_PASS)->mapZView + 1;\n        USE_POINTER cl_uint* dataup = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, coord);\n\n\n        tileUp = MapDataGetTile(*dataup);\n\n    }\n    else\n    {\n        tileUp = MapTile_NONE;\n    }\n\n    mapTile1AttrVBO[y * MAPDIM + x] = 0;\n\n\n    //look down...\n\n    int vz = 0;\n    while (tile == MapTile_NONE)\n    {\n        data = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, coord);\n        tile = MapDataGetTile(*data);\n        if (tile == MapTile_NONE) {\n            coord.z--;\n            #ifndef NO_ZSHADING\n                vz++;\n            #endif\n        }\n    }\n\n\n\n    if(BITGET(*data, MapTileFlags_Explored) == 0)\n    {\n        mapTile1VBO[y * MAPDIM + x ] = MapTile_NONE;//or \"Haze\"\n        return;\n    }\n\n\n    cl_uint finalAttr=0;\n\n    finalAttr |= BITGET_MF(*data, MapTileFlags_LowCornerTPLEFT)       ;//A\n    finalAttr |= BITGET_MF(*data, MapTileFlags_LowCornerTPRIGHT)  << 1;//B\n    finalAttr |= BITGET_MF(*data, MapTileFlags_LowCornerBTMLEFT)  << 2;//C\n    finalAttr |= BITGET_MF(*data, MapTileFlags_LowCornerBTMRIGHT) << 3;//D\n\n    cl_uint dataCpy = *data;\n    uint xlev = MapDataXLevel(&dataCpy);\n    finalAttr |= (2-xlev) << 4;//X\n\n\n    finalAttr |= (clamp(15-vz-1, 0, 15) << 6);\n\n\n    mapTile1AttrVBO[ y * MAPDIM + x ] = finalAttr;\n    mapTile1OtherAttrVBO[ y * MAPDIM + x ] |= BITBANK_GET_SUBNUMBER_UINT(*data, MapTileFlags_RotBit1, 2);\n    \n    if (tileUp != MapTile_NONE)//view obstructed by foottile above.\n    {\n\n        //if next to visible show it as \"wall view\"\n        mapTile1AttrVBO[y * MAPDIM + x ] = 0;\n        cl_uchar isWall = 0;\n        int dirOffsets[8] = {0,1,2,3,22,23,24,25}; \n        int orthflags[4] = {0,0,0,0};\n        for(int i = 0; i < 4; i++)\n        {\n            ge_int3 offset = staticData->directionalOffsets[dirOffsets[i]];\n            ge_int3 mapCoord = (ge_int3){x +offset.x, y + offset.y, ThisClient(ALL_CORE_PARAMS_PASS)->mapZView + 1 };\n\n            if(MapTileCoordValid(mapCoord,0))\n            {\n            \n                USE_POINTER cl_uint* dataoffup = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, mapCoord);\n                MapTile tileoffup = MapDataGetTile(*dataoffup);\n                \n                if(tileoffup == MapTile_NONE)\n                {\n                    isWall = 1;\n\n                    //test against mouse world coord\n                    // ge_int3 mouseMapCoord;\n                    // int occluded;\n                    // ge_int3 mouseWorld_Q16 = (ge_int3){gameStateActions->mouseLocWorldx_Q16, gameStateActions->mouseLocWorldy_Q16, mapCoord.z};\n                   \n                    // WorldToMap(mouseWorld_Q16, &mouseMapCoord);\n                    // mouseMapCoord = GE_INT3_WHOLE_ONLY_Q16(mouseMapCoord);\n                    \n                    // if(VECTOR3_EQUAL(mouseMapCoord , mapCoord))\n                    // {\n                    //     mapTile1VBO[y * MAPDIM + x ] = tile;\n                        \n                    // }\n                    // else\n                    // {\n                        mapTile1VBO[y * MAPDIM + x ] = tileUp;\n                        \n                    //}\n\n\n\n\n                    if( i <=3 )\n                        orthflags[i] = 1;\n\n                    //fade out effect\n                    \n\n\n                    if((orthflags[0] + orthflags[1] + orthflags[2] + orthflags[3]) == 0)\n                    {\n\n                        //TODO better corner effect\n                        // mapTile1AttrVBO[ y * MAPDIM + x ] |= 1<<4;\n\n                        // if(dirOffsets[i] == 22) mapTile1AttrVBO[ y * MAPDIM + x ] |= 1 << 0;\n                        // if(dirOffsets[i] == 23) mapTile1AttrVBO[ y * MAPDIM + x ] |= 1 << 1;\n                        // if(dirOffsets[i] == 24) mapTile1AttrVBO[ y * MAPDIM + x ] |= 1 << 2;\n                        // if(dirOffsets[i] == 25) mapTile1AttrVBO[ y * MAPDIM + x ] |= 1 << 3;\n                    }\n\n\n                    mapTile1AttrVBO[y * MAPDIM + x ] |= (clamp(15-vz, 0, 15) << 6);//base shade\n                    mapTile1AttrVBO[y * MAPDIM + x ] |= (1 << 10);//corners fade to nothing\n\n\n                    \n\n                }\n            }\n        }\n\n\n\n\n        if(isWall == 0)\n            mapTile1VBO[y * MAPDIM + x ] = MapTile_NONE;\n    }\n    else\n    {\n        mapTile1VBO[y * MAPDIM + x] = tile;\n    }\n}\n\n\nvoid MapBuildTileView3Area(ALL_CORE_PARAMS, int x, int y)\n{\n    MapBuildTileView(ALL_CORE_PARAMS_PASS,  x,  y);\n    MapBuildTileView(ALL_CORE_PARAMS_PASS,  x+1,  y);\n    MapBuildTileView(ALL_CORE_PARAMS_PASS,  x,  y+1);\n    MapBuildTileView(ALL_CORE_PARAMS_PASS,  x+1,  y+1);\n\n    MapBuildTileView(ALL_CORE_PARAMS_PASS,  x-1,  y);\n    MapBuildTileView(ALL_CORE_PARAMS_PASS,  x,  y-1);\n    MapBuildTileView(ALL_CORE_PARAMS_PASS,  x-1,  y-1);\n\n    MapBuildTileView(ALL_CORE_PARAMS_PASS,  x-1,  y+1);\n    MapBuildTileView(ALL_CORE_PARAMS_PASS,  x+1,  y-1);\n}\n\n\nvoid PrintSelectionPeepStats(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER Peep* p)\n{\n///    Print_GE_INT3_Q16(p->physics.base.pos_Q16);\n    USE_POINTER Peep* peep = p;\n    MapTile data[22];\n    ge_int3 tileCenters_Q16[22];\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 1, 0, 0 }, & data[0], & tileCenters_Q16[0]); printf(\"{ 1, 0, 0 }: %d\\n\", data[0]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { -1, 0, 0 }, & data[1], & tileCenters_Q16[1]); printf(\"{ -1, 0, 0 }: %d\\n\", data[1]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 0, -1, 0 }, & data[2], & tileCenters_Q16[2]); printf(\"{ 0, -1, 0 }: %d\\n\", data[2]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 0, 1, 0 }, & data[3], & tileCenters_Q16[3]); printf(\"{ 0, 1, 0 }: %d\\n\", data[3]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 0, 0, 1 }, & data[4], & tileCenters_Q16[4]); printf(\"{ 0, 0, 1 }: %d\\n\", data[4]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 0, 0, -1 }, & data[5], & tileCenters_Q16[5]); printf(\"{ 0, 0, -1 }: %d\\n\", data[5]);\n\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 1, 0, -1 }, & data[6], & tileCenters_Q16[6]); printf(\"{ 1, 0, -1 }: %d\\n\", data[6]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 0, 1, -1 }, & data[7], & tileCenters_Q16[7]); printf(\"{ 0, 1, -1 }: %d\\n\", data[7]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 1, 1, -1 }, & data[8], & tileCenters_Q16[8]); printf(\"{ 1, 1, -1 }: %d\\n\", data[8]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { -1, 0, -1 }, & data[9], & tileCenters_Q16[9]); printf(\"{ -1, 0, -1 }: %d\\n\", data[9]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 0, -1, -1 }, & data[10], & tileCenters_Q16[10]); printf(\"{ 0, -1, -1 }: %d\\n\", data[10]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { -1, -1, -1 }, & data[11], & tileCenters_Q16[11]); printf(\"{ -1, -1, -1 }: %d\\n\", data[11]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 1, -1, -1 }, & data[12], & tileCenters_Q16[12]); printf(\"{ 1, -1, -1 }: %d\\n\", data[12]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { -1, 1, -1 }, & data[13], & tileCenters_Q16[13]); printf(\"{ -1, 1, -1 }: %d\\n\", data[13]);\n\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 1, 0, 1 }, & data[14], & tileCenters_Q16[14]); printf(\"{ 1, 0, 1 }: %d\\n\", data[14]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 0, 1, 1 }, & data[15], & tileCenters_Q16[15]); printf(\"{ 0, 1, 1 }: %d\\n\", data[15]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 1, 1, 1 }, & data[16], & tileCenters_Q16[16]); printf(\"{ 1, 1, 1 }: %d\\n\", data[16]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { -1, 0, 1 }, & data[17], & tileCenters_Q16[17]); printf(\"{ -1, 0, 1 }: %d\\n\", data[17]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 0, -1, 1 }, & data[18], & tileCenters_Q16[18]); printf(\"{ 0, -1, 1 }: %d\\n\", data[18]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { -1, -1, 1 }, & data[19], & tileCenters_Q16[19]); printf(\"{ -1, -1, 1 }: %d\\n\", data[19]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 1, -1, 1 }, & data[20], & tileCenters_Q16[20]); printf(\"{ 1, -1, 1 }: %d\\n\", data[20]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { -1, 1, 1 }, & data[21], & tileCenters_Q16[21]); printf(\"{ -1, 1, 1 }: %d\\n\", data[21]);\n}\n\nvoid MapTileCoordClamp( ge_int3* mapCoord, int xybuffer)\n{\n    (*mapCoord).x = clamp((*mapCoord).x, xybuffer, MAPDIM - 1 - xybuffer);\n    (*mapCoord).y = clamp((*mapCoord).y, xybuffer, MAPDIM - 1 - xybuffer);\n    (*mapCoord).z = clamp((*mapCoord).z, 0, MAPDEPTH - 1);\n}\n\n\nvoid GetMapTileCoordFromWorld2D(ALL_CORE_PARAMS, ge_int2 world_Q16, \n ge_int3* mapcoord_whole, \n int* occluded, int zViewRestrictLevel)\n{\n    ge_int3 wrld_Q16;\n    wrld_Q16.x = world_Q16.x;\n    wrld_Q16.y = world_Q16.y;\n    WorldToMap(wrld_Q16, &(*mapcoord_whole));\n    (*mapcoord_whole).x = WHOLE_Q16((*mapcoord_whole).x);\n    (*mapcoord_whole).y = WHOLE_Q16((*mapcoord_whole).y);\n\n\n    MapTileCoordClamp(mapcoord_whole,1);\n\n    for (int z = zViewRestrictLevel; z >= 0; z--)\n    {\n        USE_POINTER cl_uint* data = &gameState->map.levels[z].data[(*mapcoord_whole).x][(*mapcoord_whole).y];\n        cl_uint dataCopy = *data;\n        MapTile tile = MapDataGetTile(dataCopy);\n\n        if (tile != MapTile_NONE)\n        {\n            (*mapcoord_whole).z = z;\n            if (z == ThisClient(ALL_CORE_PARAMS_PASS)->mapZView-1)\n            {\n                *occluded = 1;\n            }\n            else if (z == ThisClient(ALL_CORE_PARAMS_PASS)->mapZView)\n            {\n                *occluded = 1;\n            }\n            else\n            {\n                *occluded = 0;\n            }\n            return;\n        }\n    }\n\n   // printf(\"3\");\n    *occluded = 1;\n}\n\n\n\n\n\n\n\nvoid LINES_DrawLine(ALL_CORE_PARAMS, float2 screenPosStart, float2 screenPosEnd, float3 color)\n{\n\n\n    linesVBO[gameState->debugLinesIdx*5 + 0] = screenPosStart.x;\n    linesVBO[gameState->debugLinesIdx*5 + 1] = screenPosStart.y;\n\n    linesVBO[gameState->debugLinesIdx*5 + 2] = color.x;\n    linesVBO[gameState->debugLinesIdx*5 + 3] = color.y;\n    linesVBO[gameState->debugLinesIdx*5 + 4] = color.z;\n\n    \n    linesVBO[gameState->debugLinesIdx*5 + 5] = screenPosEnd.x;\n    linesVBO[gameState->debugLinesIdx*5 + 6] = screenPosEnd.y;\n\n    linesVBO[gameState->debugLinesIdx*5 + 7] = color.x;\n    linesVBO[gameState->debugLinesIdx*5 + 8] = color.y;\n    linesVBO[gameState->debugLinesIdx*5 + 9] = color.z;\n\n    gameState->debugLinesIdx+=10;\n    if(gameState->debugLinesIdx >= MAX_LINES)\n        printf(\"out of debug line space!\\n\");\n}\nvoid LINES_ClearAll(ALL_CORE_PARAMS)\n{\n    for(int i = gameState->debugLinesIdx; i >=0; i--)\n        linesVBO[gameState->debugLinesIdx] = 0.0f;\n\n    gameState->debugLinesIdx=0;;\n}\n\nfloat4 Matrix_Float4_Times_Vec4(global float mat[][4], float4 vec)\n{\n    float4 res;\n    res.x = mat[0][0] * vec.x + mat[0][1] * vec.y + mat[0][2] * vec.z + mat[0][3] * vec.w;\n    res.y = mat[1][0] * vec.x + mat[1][1] * vec.y + mat[1][2] * vec.z + mat[1][3] * vec.w;\n    res.z = mat[2][0] * vec.x + mat[2][1] * vec.y + mat[2][2] * vec.z + mat[2][3] * vec.w;\n    res.w = mat[3][0] * vec.x + mat[3][1] * vec.y + mat[3][2] * vec.z + mat[3][3] * vec.w;\n    return res;\n}\n\nvoid LINES_DrawLineWorld(ALL_CORE_PARAMS, float2 worldPosStart, float2 worldPosEnd, float3 color)\n{\n    float4 worldPosStart4 = (float4)(worldPosStart.x, worldPosStart.y, 0.0f, 1.0f);\n    float4 screenPosStart4 = Matrix_Float4_Times_Vec4(&gameStateActions->viewMatrix, worldPosStart4);\n    float2 screenPosStart2 = (float2)(screenPosStart4.x, screenPosStart4.y);\n\n    float4 worldPosEnd4 = (float4)(worldPosEnd.x, worldPosEnd.y, 0.0f, 1.0f);\n    float4 screenPosEnd4 = Matrix_Float4_Times_Vec4(&gameStateActions->viewMatrix, worldPosEnd4);\n    float2 screenPosEnd2 = (float2)(screenPosEnd4.x, screenPosEnd4.y);\n\n    // printf(\"[%f,%f,%f,%f]\\n\", gameStateActions->viewMatrix[0][0], gameStateActions->viewMatrix[0][1], gameStateActions->viewMatrix[0][2], gameStateActions->viewMatrix[0][3]);\n    // printf(\"[%f,%f,%f,%f]\\n\", gameStateActions->viewMatrix[1][0], gameStateActions->viewMatrix[1][1], gameStateActions->viewMatrix[1][2], gameStateActions->viewMatrix[1][3]);\n    // printf(\"[%f,%f,%f,%f]\\n\", gameStateActions->viewMatrix[2][0], gameStateActions->viewMatrix[2][1], gameStateActions->viewMatrix[2][2], gameStateActions->viewMatrix[2][3]);\n    // printf(\"[%f,%f,%f,%f]\\n\", gameStateActions->viewMatrix[3][0], gameStateActions->viewMatrix[3][1], gameStateActions->viewMatrix[3][2], gameStateActions->viewMatrix[3][3]);\n    // printf(\"---------------------\\n\");\n   // gameStateActions->\n    LINES_DrawLine(ALL_CORE_PARAMS_PASS,  screenPosStart2, screenPosEnd2,  color);\n}\n\nge_int2 GUI_TO_WORLD_Q16(ALL_CORE_PARAMS, ge_int2 guiCoord)\n{\n    float4 v;\n    v.x = guiCoord.x;\n    v.y = guiCoord.y;\n    v.z = 0.0;\n    v.w = 1.0f;\n    float4 worldPos = Matrix_Float4_Times_Vec4(&gameStateActions->viewMatrix_Inv, v);\n\n    printf(\"%f, %f, %f, %f\\n\", worldPos.x, worldPos.y, worldPos.z, worldPos.w);\n\n    return (ge_int2){0,0};\n}\n\nfloat2 TileToUV(TileUnion tile)\n{\n\n    //duplicate of geomMapTile.glsl code.\n    float2 uv;\n    uv.x = ((uint)tile.mapTile & 15u) / 16.0;\n    uv.y = (((uint)tile.mapTile >> 4u) & 15u) / 16.0;    \n    return uv;\n}\n\n\nvoid PrintMouseState(int mouseState)\n{\n    if(BITGET(mouseState, MouseButtonBits_PrimaryDown))\n        printf(\"MouseButtonBits_PrimaryDown |\");\n    if(BITGET(mouseState, MouseButtonBits_PrimaryPressed))\n        printf(\"MouseButtonBits_PrimaryPressed |\");\n    if(BITGET(mouseState, MouseButtonBits_PrimaryReleased))\n        printf(\"MouseButtonBits_PrimaryReleased |\");\n    if(BITGET(mouseState, MouseButtonBits_SecondaryDown))\n        printf(\"MouseButtonBits_SecondaryDown |\");\n    if(BITGET(mouseState, MouseButtonBits_SecondaryPressed))\n        printf(\"MouseButtonBits_SecondaryPressed |\");\n    if(BITGET(mouseState, MouseButtonBits_SecondaryReleased))\n        printf(\"MouseButtonBits_SecondaryReleased |\");\n\n    printf(\"\\n\");\n}\n\n\nvoid InventoryGui(GUIID_DEF_ALL, PARAM_GLOBAL_POINTER Inventory* inventory)\n{\n    GUI_COMMON_WIDGET_START()\n\n    if(!goodStart)\n    {\n        return;\n    }\n\n    int j = 0;\n    for(int i = 0; i < ItemTypes_NUMITEMS; i++)\n    {\n        int count = inventory->counts[i];\n        if(count > 0)\n        {\n            const int height = 40;\n            float2 uv = TileToUV(gameState->ItemTypeTiles[i]);\n            GUI_IMAGE(GUIID_PASS, origPos + (ge_int2)(0,(j+1)*height + 100), (ge_int2)(height,height), 0,  uv, uv + MAP_TILE_UV_WIDTH_FLOAT2, gameState->ItemColors[i]);\n\n\n            LOCAL_STR(cntstr, \"-----------\");\n            CL_ITOA(count, cntstr, cntstr_len, 10 );                 \n            GUI_TEXT(GUIID_PASS, origPos + (ge_int2)(height,(j+1)*height + 100), (ge_int2)(50,height), 0, cntstr);\n\n            GUI_TEXT_CONST(GUIID_PASS, origPos + (ge_int2)(height+50,(j+1)*height + 100), (ge_int2)(50,height), 0, &ItemTypeStrings[i][0]);\n            j++;\n\n        }\n    }\n}\nvoid MapDeleteTile(ALL_CORE_PARAMS, ge_int3 mapCoord)\n{\n    if (mapCoord.z > 0) \n    {\n        gameState->map.levels[mapCoord.z].data[mapCoord.x][mapCoord.y] = MapTile_NONE;\n        \n\n        offsetPtr machinePtr = gameState->map.levels[mapCoord.z].machinePtr[mapCoord.x][mapCoord.y];\n        if(machinePtr != OFFSET_NULL)\n        {\n            USE_POINTER Machine* mach;\n            OFFSET_TO_PTR(gameState->machines, machinePtr, mach);\n            mach->valid = false;\n        }\n        gameState->map.levels[mapCoord.z].machinePtr[mapCoord.x][mapCoord.y] = OFFSET_NULL;\n\n\n        MapBuildTileView3Area(ALL_CORE_PARAMS_PASS, mapCoord.x, mapCoord.y);\n        MapUpdateShadow(ALL_CORE_PARAMS_PASS, mapCoord.x, mapCoord.y);\n        MapUpdateShadow(ALL_CORE_PARAMS_PASS, mapCoord.x + 1, mapCoord.y);\n        MapUpdateShadow(ALL_CORE_PARAMS_PASS, mapCoord.x - 1, mapCoord.y);\n        MapUpdateShadow(ALL_CORE_PARAMS_PASS, mapCoord.x, mapCoord.y + 1);\n        MapUpdateShadow(ALL_CORE_PARAMS_PASS, mapCoord.x, mapCoord.y - 1);\n    }\n}\n\nUSE_POINTER Machine* MachineGetFromMapCoord(ALL_CORE_PARAMS, ge_int3 mapCoord)\n{\n    offsetPtr ptr = gameState->map.levels[mapCoord.z].machinePtr[mapCoord.x][mapCoord.y];\n    USE_POINTER Machine* machine;\n    OFFSET_TO_PTR(gameState->machines, ptr, machine);\n\n    return machine;\n}\n\nvoid TransferInventory(PARAM_GLOBAL_POINTER Inventory* invFrom, PARAM_GLOBAL_POINTER Inventory* invTo)\n{\n    for(int i = 0; i < ItemTypes_NUMITEMS; i++)\n    {\n        invTo->counts[i] += invFrom->counts[i];\n        invFrom->counts[i] = 0;\n    }\n}\n\nvoid PeepCommandGui(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER SyncedGui* gui, PARAM_GLOBAL_POINTER SynchronizedClientState* client)\n{\n    if(client->selectedPeepPrimary != OFFSET_NULL)\n    {\n        USE_POINTER Peep* peep;\n        OFFSET_TO_PTR(gameState->peeps, client->selectedPeepPrimary, peep);\n\n        LOCAL_STRL(mw, \"Miner 123456\", mwlen); \n        CL_ITOA(peep->ptr, (mw)+6,mwlen-6, 10);\n        if(GUI_BEGIN_WINDOW(GUIID_PASS, (ge_int2){100,100},\n            (ge_int2){200,500},0,  mw, &gui->guiState.windowPositions[2],&gui->guiState.windowSizes[2] ))\n        {\n\n            if(peep->physics.drive.drivingToTarget)\n            {\n                LOCAL_STR(thinkingtxt, \"Traveling...\"); \n                GUI_LABEL(GUIID_PASS, (ge_int2)(0,0), (ge_int2)(gui->guiState.windowSizes[2].x,20), 0, thinkingtxt, (float3)(0.0,0,0) );\n            }\n\n            \n\n            \n            ge_int3 mapCoord = SHORT3_TO_INT3(peep->mapCoord);\n            mapCoord.z--;\n\n            MapTile downTile = MapGetTileFromCoord(ALL_CORE_PARAMS_PASS, mapCoord);\n            USE_POINTER Machine* machine = MachineGetFromMapCoord(ALL_CORE_PARAMS_PASS, mapCoord);\n\n\n            if(downTile != MapTile_NONE)\n            {\n                LOCAL_STR(dig, \"Drill Down\"); \n                if(GUI_BUTTON(GUIID_PASS, (ge_int2)(0,20), (ge_int2)(100,50), GuiFlags_Beveled, (float3)(0.4,0.4,0.4), dig, NULL, NULL ))\n                {\n                    if(gui->passType == GuiStatePassType_Synced)\n                    {\n                        printf(\"digging...\\n\");\n\n                        if(downTile == MapTile_IronOre)\n                        {\n                            peep->inventory.counts[ItemType_IRON_ORE]+=10;\n                        }\n                        else if(downTile == MapTile_Rock)\n                        {\n                            peep->inventory.counts[ItemType_ROCK_DUST]+=100;\n                        }\n\n\n                        MapDeleteTile(ALL_CORE_PARAMS_PASS,  mapCoord);\n                    }\n                }\n\n                if(machine != NULL)\n                {\n                    LOCAL_STR(transferStr, \"Push Down\"); \n                    if(GUI_BUTTON(GUIID_PASS, (ge_int2)(0,20+50), (ge_int2)(gui->guiState.windowSizes[2].x,50),GuiFlags_Beveled,\n                     (float3)(0.4,0.4,0.4), transferStr, NULL, NULL ))\n                    {    \n                        if(gui->passType == GuiStatePassType_Synced)\n                        {\n                            TransferInventory(&peep->inventory, &machine->inventory);\n                        }\n                    }\n                    LOCAL_STR(transferStr2, \"Pull Up\"); \n                    if(GUI_BUTTON(GUIID_PASS, (ge_int2)(0,20+50+50), (ge_int2)(gui->guiState.windowSizes[2].x,50),\n                     GuiFlags_Beveled, (float3)(0.4,0.4,0.4), transferStr2, NULL, NULL ))\n                    {\n                        if(gui->passType == GuiStatePassType_Synced)\n                        {\n                            TransferInventory(&machine->inventory, &peep->inventory);\n                        }\n                    }\n                }\n\n            }\n\n\n            InventoryGui(GUIID_PASS, (ge_int2)(0,50),gui->guiState.windowSizes[2], 0, &peep->inventory);\n\n            GUI_END_WINDOW(GUIID_PASS);\n        }\n\n\n\n    }\n}\n\n\nvoid MachineGui(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER SyncedGui* gui, PARAM_GLOBAL_POINTER SynchronizedClientState* client)\n{\n    if(client->selectedMachine != OFFSET_NULL)\n    {\n\n        USE_POINTER Machine* mach;\n        OFFSET_TO_PTR(gameState->machines, client->selectedMachine, mach);\n        CL_CHECK_NULL(mach);\n\n        USE_POINTER MachineDesc* desc;\n        OFFSET_TO_PTR(gameState->machineDescriptions, mach->MachineDescPtr, desc);\n        CL_CHECK_NULL(desc);\n\n        USE_POINTER MachineRecipe* recip;\n        OFFSET_TO_PTR(gameState->machineRecipes, mach->recipePtr, recip);\n\n        LOCAL_STRL(mw, \"Machine ------\", mwlen); \n        CL_ITOA(client->selectedMachine, (mw)+8,mwlen-8, 10);\n        if(GUI_BEGIN_WINDOW(GUIID_PASS, (ge_int2){100,100},\n            (ge_int2){200,500},0,  mw, &gui->guiState.windowPositions[1],&gui->guiState.windowSizes[1] ))\n        {\n\n            LOCAL_STRL(thinkingtxt2, \"---\", thinkingtxtLen); \n            float perc = ((float)mach->tickProgess/desc->processingTime);\n            char* p = CL_ITOA(perc*100, thinkingtxt2, thinkingtxtLen, 10 );\n            *(p+2) = '%'; if(thinkingtxt2[1] == '\\0') thinkingtxt2[1] = ' ';\n            GUI_LABEL(GUIID_PASS, (ge_int2)(0,0), (ge_int2)(perc*gui->guiState.windowSizes[1].x,50), 0, thinkingtxt2, (float3)(0,0.7,0) );\n\n            \n\n            int downDummy;\n            LOCAL_STR(stateStrStart, \"Start\"); \n            LOCAL_STR(stateStrStop, \"Stop\"); \n            char* stateStr = stateStrStart;\n            float3 btnColor;\n\n            if( mach->state == MachineState_Running )\n            {\n                stateStr = stateStrStop;\n                btnColor = (float3)(1.0,0.0,0.0);\n            }\n            else if( mach->state == MachineState_Idle )\n            {\n                stateStr = stateStrStart;\n                btnColor = (float3)(0.0,0.7,0.0);\n            }\n\n            if(GUI_BUTTON(GUIID_PASS, (ge_int2)(0,50), (ge_int2)(50,50), GuiFlags_Beveled, btnColor, stateStr, &downDummy, NULL))\n            {\n                if(gui->passType == GuiStatePassType_Synced)\n                {    \n                    if( mach->state == MachineState_Running)\n                    {\n                        mach->state = MachineState_Idle;\n                    }\n                    else if( mach->state == MachineState_Idle)\n                    {\n                        mach->state = MachineState_Running;\n                    }\n\n                    \n                }\n            }\n            if(GUI_BUTTON(GUIID_PASS, (ge_int2)(50,50), (ge_int2)(50,50), GuiFlags_Beveled,(float3)(0,0,1.0), NULL, &downDummy, NULL))\n            {\n                for(int i = 0; i < 8; i++)\n                {\n                    if(recip->inputTypes[i] != ItemType_INVALID_ITEM)\n                        mach->inventory.counts[recip->inputTypes[i]]+=20;\n                }\n            }\n\n\n            InventoryGui(GUIID_PASS,  (ge_int2)(0,0), gui->guiState.windowSizes[1],0,&mach->inventory );\n\n\n\n            GUI_END_WINDOW(GUIID_PASS);\n        }\n    }\n}\n\n\n\n__kernel void game_apply_actions(ALL_CORE_PARAMS)\n{\n    //apply turns\n    for (int32_t a = 0; a < gameStateActions->numActions+1; a++)\n    {\n\n        int b = a;\n        GuiStatePassType guiPass = GuiStatePassType_Synced;\n        if(a == gameStateActions->numActions)\n        {\n            b = 0;//'local' client\n            guiPass = GuiStatePassType_NoLogic;\n  \n        }\n\n\n\n\n\n        USE_POINTER ClientAction* clientAction = &gameStateActions->clientActions[b].action;\n        USE_POINTER ActionTracking* actionTracking = &gameStateActions->clientActions[b].tracking;\n        int cliId = actionTracking->clientId;\n        USE_POINTER SynchronizedClientState* client = &gameState->clientStates[cliId];\n        USE_POINTER SyncedGui* gui = &gameState->clientStates[cliId].gui;\n        \n\n        //detect new clients\n        if(gameState->numClients < cliId+1)\n        {\n            printf(\"New Client Connected!\\n\");\n            gameState->numClients = cliId+1;\n\n            //reset the fake pass gui\n            if(cliId == gameStateActions->clientId)\n                gameState->fakePassGui = *gui;\n\n        }\n\n        ge_int2 mouseLoc;\n        int mouseState;\n        bool guiIsLocalClient = false;\n        if(guiPass == GuiStatePassType_NoLogic)//redirect pointers above so they reflect the local client only.\n        {\n            guiPass = GuiStatePassType_NoLogic;\n            mouseLoc = (ge_int2){gameStateActions->mouseLocx, gameStateActions->mouseLocy };\n            mouseState = gameStateActions->mouseState;\n            client = ThisClient(ALL_CORE_PARAMS_PASS);\n            cliId = gameStateActions->clientId;\n            clientAction= &gameStateActions->clientActions[cliId].action;\n            actionTracking= &gameStateActions->clientActions[cliId].tracking;\n            \n            gui = &gameState->fakePassGui;\n            guiIsLocalClient = true;\n            \n        }\n        else\n        {\n            guiPass = GuiStatePassType_Synced;\n            mouseLoc.x = clientAction->intParameters[CAC_MouseStateChange_Param_GUI_X];\n            mouseLoc.y = clientAction->intParameters[CAC_MouseStateChange_Param_GUI_Y];\n            mouseState = clientAction->intParameters[CAC_MouseStateChange_Param_BUTTON_BITS];\n\n            if(client == ThisClient(ALL_CORE_PARAMS_PASS))\n                guiIsLocalClient = true;\n\n            PrintMouseState( mouseState);\n            printf(\"IsLocalClient: %d\\n\", guiIsLocalClient);\n        }\n\n\n\n        GUI_RESET(ALL_CORE_PARAMS_PASS, gui, mouseLoc, mouseState, guiPass, guiIsLocalClient);\n\n        int downDummy;\n        char btntxt[9] = \"CLICK ME\"; \n        btntxt[8] = '\\0';\n        \n        \n\n\n        LOCAL_STR(noneTxt, \"SELECT\");\n        if(GUI_BUTTON(GUIID_PASS, (ge_int2){0 ,0}, (ge_int2){100, 50}, GuiFlags_Beveled, GUI_COLOR_DEF, noneTxt, &downDummy, &(gui->guiState.menuToggles[0])) == 1)\n        {\n            client->curTool = EditorTools_Select;\n\n            GUI_UpdateToggleGroup(gui->guiState.menuToggles, 4, 0);\n        }\n\n\n        LOCAL_STR(deleteTxt, \"DELETE\");\n        if(GUI_BUTTON(GUIID_PASS, (ge_int2){100 ,0}, (ge_int2){100, 50},GuiFlags_Beveled, GUI_COLOR_DEF, deleteTxt, &downDummy, &(gui->guiState.menuToggles[1])) == 1)\n        {\n            //printf(\"delete mode.\");\n            client->curTool = EditorTools_Delete;\n            GUI_UpdateToggleGroup(gui->guiState.menuToggles, 4, 1);\n        }\n\n        LOCAL_STR(createTxt, \"CREATE\\nCRUSHER\");\n        if(GUI_BUTTON(GUIID_PASS, (ge_int2){200 ,0}, (ge_int2){100, 50}, GuiFlags_Beveled, GUI_COLOR_DEF, createTxt, &downDummy, &(gui->guiState.menuToggles[2])) == 1)\n        {\n          //  printf(\"create mode\");\n            client->curTool = EditorTools_Create;\n            client->curToolMachine = MachineTypes_CRUSHER;\n            GUI_UpdateToggleGroup(gui->guiState.menuToggles, 4, 2);\n        }\n\n        LOCAL_STR(createTxt2, \"CREATE\\nSMELTER\");\n        if(GUI_BUTTON(GUIID_PASS, (ge_int2){300 ,0}, (ge_int2){100, 50}, GuiFlags_Beveled, GUI_COLOR_DEF, createTxt2, &downDummy, &(gui->guiState.menuToggles[3])) == 1)\n        {\n           // printf(\"create mode\");\n            client->curTool = EditorTools_Create;\n            client->curToolMachine = MachineTypes_SMELTER;\n\n            GUI_UpdateToggleGroup(gui->guiState.menuToggles, 4, 3);\n        }\n\n\n\n\n        LOCAL_STRL(labeltxt, \"DEEP\", labeltxtLen); \n        GUI_LABEL(GUIID_PASS, (ge_int2){0 ,50}, (ge_int2){80 ,50},0, labeltxt, (float3)(0.3,0.3,0.3));\n\n\n        GUI_SLIDER_INT_VERTICAL(GUIID_PASS,  (ge_int2){0 ,100}, (ge_int2){80, 800},0, &client->mapZView, 0, MAPDEPTH);\n\n        LOCAL_STRL(labeltxt2, \"BIRDS\\nEYE\", labeltxt2Len); \n        GUI_LABEL(GUIID_PASS, (ge_int2){0 ,900}, (ge_int2){80 ,50}, 0, labeltxt2, (float3)(0.3,0.3,0.3));\n            \n\n        LOCAL_STRL(robotSelWindowStr, \"Selected Robots\", robotSelWindowStrLen); \n        if(GUI_BEGIN_WINDOW(GUIID_PASS, (ge_int2){100,100},\n        (ge_int2){200,200},0,  robotSelWindowStr, &gui->guiState.windowPositions[0],&gui->guiState.windowSizes[0] ))\n        {\n            if(GUI_SCROLLBOX_BEGIN(GUIID_PASS, (ge_int2){0,0},\n            (ge_int2){10,10},\n            GuiFlags_FillParent,\n            (ge_int2){1000,1000}, &gui->guiState.menuScrollx, &gui->guiState.menuScrolly))\n            {\n                //iterate selected peeps\n                USE_POINTER Peep* p;\n                OFFSET_TO_PTR(gameState->peeps, client->selectedPeepsLastIdx, p);\n                    \n                int i = 0;\n                while(p != NULL)\n                {\n\n                    LOCAL_STRL(header, \"Miner: \", headerLen); \n                    LOCAL_STRL(peeptxt, \"Select\", peeptxtLen); \n                    GUI_LABEL(GUIID_PASS, (ge_int2){0 ,50*i}, (ge_int2){50, 50},0, header, (float3)(0.3,0.3,0.3));\n            \n                    if(GUI_BUTTON(GUIID_PASS, (ge_int2){50 ,50*i}, (ge_int2){50, 50},GuiFlags_Beveled,GUI_COLOR_DEF,  peeptxt, &downDummy, NULL))\n                    {\n                        client->selectedPeepPrimary = p->ptr;\n                    }\n\n                    i++;    \n                    OFFSET_TO_PTR(gameState->peeps, p->prevSelectionPeepPtr[cliId], p);\n                }\n                GUI_SCROLLBOX_END(GUIID_PASS);\n            }\n            \n            GUI_END_WINDOW(GUIID_PASS);\n        }\n\n        //hover stats\n        if((guiPass == GuiStatePassType_NoLogic) && (GUI_MOUSE_ON_GUI(gui) == 0))\n        {\n\n            ge_int2 world_Q16;\n            world_Q16.x = gameStateActions->mouseLocWorldx_Q16;\n            world_Q16.y = gameStateActions->mouseLocWorldy_Q16;\n\n            //world to map\n            //get tile etc.\n            ge_int3 mapcoord_whole;\n            int occluded;\n            GetMapTileCoordFromWorld2D(ALL_CORE_PARAMS_PASS, world_Q16, &mapcoord_whole, &occluded, client->mapZView+1);\n\n\n\n            MapTile tileup = MapGetTileFromCoord(ALL_CORE_PARAMS_PASS, mapcoord_whole + (ge_int3)(0,0,1));\n            MapTile tile = MapGetTileFromCoord(ALL_CORE_PARAMS_PASS, mapcoord_whole);\n            MapTile tiledown = MapGetTileFromCoord(ALL_CORE_PARAMS_PASS, mapcoord_whole + (ge_int3)(0,0,-1));\n            \n\n\n\n            LOCAL_STRL(xtxt, \"\", xtxtLen); \n            //CL_ITOA(tile, xtxt, xtxtLen, 10 );\n            //GUI_LABEL(GUIID_PASS, (ge_int2){300,200}, (ge_int2){100, 50}, xtxt, (float3)(0.3,0.3,0.3));\n            const int widgx = 80;\n            const int widgy = 800;\n            \n\n            GUI_LABEL(GUIID_PASS, (ge_int2)(widgx-5,widgy-50-5) , (ge_int2){50+10, 150+10}, 0, xtxt, (float3)(0.3,0.3,0.3));\n            float2 uv = TileToUV((TileUnion){tileup});\n            GUI_IMAGE(GUIID_PASS, (ge_int2)(widgx,widgy-50) , (ge_int2){50, 50}, 0, uv, uv + MAP_TILE_UV_WIDTH_FLOAT2, (float3)(1,1,1));\n\n            uv = TileToUV((TileUnion){tile});\n            GUI_IMAGE(GUIID_PASS, (ge_int2)(widgx,widgy) , (ge_int2){50, 50}, 0, uv, uv + MAP_TILE_UV_WIDTH_FLOAT2, (float3)(1,1,1));\n   \n            uv = TileToUV((TileUnion){tiledown});\n   \n            GUI_IMAGE(GUIID_PASS, (ge_int2)(widgx,widgy+50) , (ge_int2){50, 50},0,  uv, uv + MAP_TILE_UV_WIDTH_FLOAT2, (float3)(1,1,1));\n\n            \n        }\n\n\n        if(gameState->mapSearchers[0].state == AStarPathFindingProgress_Searching)\n        {\n            LOCAL_STRL(thinkingtxt, \"FINDING PATH..\", thinkingtxtLen); \n            GUI_LABEL(GUIID_PASS, (ge_int2)(400,100), (ge_int2)(150,50), 0, thinkingtxt, (float3)(1.0,0,0) );\n        }\n\n\n\n        //selected machine\n        MachineGui(ALL_CORE_PARAMS_PASS,  gui, client);\n        \n        //selected single peep\n        PeepCommandGui(ALL_CORE_PARAMS_PASS, gui, client);\n\n\n\n\n        if(guiPass == GuiStatePassType_Synced)\n            printf(\"cli: %d, mapz: %d\\n\", cliId, client->mapZView);\n        else{\n          //  printf(\"(fakepass) cli: %d, mapz: %d\\n\", cliId, client->mapZView);\n        }\n\n\n        //selection box\n        GUI_RESET_POST(ALL_CORE_PARAMS_PASS,  gui);\n\n\n\n\n\n        if(guiPass == GuiStatePassType_NoLogic)\n            continue;\n\n        \n        if (clientAction->actionCode == ClientActionCode_MouseStateChange)\n        {\n            \n            printf(\"Processing Action From Client: %d\\n\", cliId);\n            int buttons = clientAction->intParameters[CAC_MouseStateChange_Param_BUTTON_BITS];\n\n\n\n            \n            //end selection\n            if(BITGET_MF(buttons, MouseButtonBits_PrimaryPressed))\n            {\n\n                if(GUI_MOUSE_ON_GUI(gui) == 0)\n                {\n                    printf(\"Starting Drag Selection..\\n\");\n                    client->mouseGUIBegin.x = clientAction->intParameters[CAC_MouseStateChange_Param_GUI_X];\n                    client->mouseGUIBegin.y = clientAction->intParameters[CAC_MouseStateChange_Param_GUI_Y];\n                    client->mouseWorldBegin_Q16.x = clientAction->intParameters[CAC_MouseStateChange_Param_WORLD_X_Q16];\n                    client->mouseWorldBegin_Q16.y = clientAction->intParameters[CAC_MouseStateChange_Param_WORLD_Y_Q16];\n\n                    client->mouseOnGUiBegin = 0;\n                }\n                else\n                {\n                    client->mouseOnGUiBegin = 1;\n                }\n            }\n            else if(BITGET(buttons, MouseButtonBits_PrimaryReleased) && (gui->draggedOff == 0))\n            {\n                printf(\"Ending Drag Selection..\\n\");\n                \n                client->mouseGUIEnd.x = clientAction->intParameters[CAC_MouseStateChange_Param_GUI_X];\n                client->mouseGUIEnd.y = clientAction->intParameters[CAC_MouseStateChange_Param_GUI_Y];\n                client->mouseWorldEnd_Q16.x = clientAction->intParameters[CAC_MouseStateChange_Param_WORLD_X_Q16];\n                client->mouseWorldEnd_Q16.y = clientAction->intParameters[CAC_MouseStateChange_Param_WORLD_Y_Q16];\n                \n                //sort the selection box\n                int nex = max(client->mouseWorldEnd_Q16.x, client->mouseWorldBegin_Q16.x);\n                int ney  = max(client->mouseWorldEnd_Q16.y, client->mouseWorldBegin_Q16.y);\n\n                int nsx  = min(client->mouseWorldEnd_Q16.x, client->mouseWorldBegin_Q16.x);\n                int nsy  = min(client->mouseWorldEnd_Q16.y, client->mouseWorldBegin_Q16.y);\n                client->mouseWorldEnd_Q16.x = nex;\n                client->mouseWorldEnd_Q16.y = ney;\n                client->mouseWorldBegin_Q16.x = nsx;\n                client->mouseWorldBegin_Q16.y = nsy;\n\n\n                {\n                    client->selectedPeepsLastIdx = OFFSET_NULL;\n                    client->selectedPeepPrimary = OFFSET_NULL;\n                    int selectionCount = 0;\n                    for (cl_uint pi = 0; pi < MAX_PEEPS; pi++)\n                    {\n\n\n                        USE_POINTER Peep* p = &gameState->peeps[pi];\n                        p->prevSelectionPeepPtr[cliId] = OFFSET_NULL;\n                        p->nextSelectionPeepPtr[cliId] = OFFSET_NULL;\n\n\n                        if (p->stateBasic.faction == actionTracking->clientId)\n                        {\n                            if ((p->physics.base.pos_Q16.x > client->mouseWorldBegin_Q16.x)\n                            && (p->physics.base.pos_Q16.x < client->mouseWorldEnd_Q16.x))\n                            {\n\n                                if ((p->physics.base.pos_Q16.y < client->mouseWorldEnd_Q16.y)\n                                    && (p->physics.base.pos_Q16.y > client->mouseWorldBegin_Q16.y))\n                                {\n                                    if (PeepMapVisiblity(ALL_CORE_PARAMS_PASS, p, client->mapZView))\n                                    {\n\n                                        if (client->selectedPeepsLastIdx != OFFSET_NULL)\n                                        {\n                                            gameState->peeps[client->selectedPeepsLastIdx].nextSelectionPeepPtr[cliId] = pi;\n                                            p->prevSelectionPeepPtr[cliId] = client->selectedPeepsLastIdx;\n                                            p->nextSelectionPeepPtr[cliId] = OFFSET_NULL;\n                                        }\n                                        client->selectedPeepsLastIdx = pi;\n                                        client->selectedPeepPrimary = pi;\n                                        selectionCount++;\n                                        PrintSelectionPeepStats(ALL_CORE_PARAMS_PASS, p);\n\n                                    }\n\n                                }\n                            }\n                        }\n\n                    }\n\n                    if(selectionCount != 1)\n                    {\n                        client->selectedPeepPrimary = OFFSET_NULL;\n                    }\n\n                }\n\n            }\n\n            \n            //command to location\n            if(BITGET(buttons, MouseButtonBits_SecondaryReleased) && (GUI_MOUSE_ON_GUI(gui) == 0) \n            && (gui->draggedOff == 0))\n            {\n                cl_uint curPeepIdx = client->selectedPeepsLastIdx;\n                ge_int3 mapcoord;\n                ge_int2 world2D;\n                AStarPathFindingProgress pathFindProgress;\n\n                offsetPtr pathOPtr;\n                if (curPeepIdx != OFFSET_NULL)\n                {\n                    //Do an AStarSearch_IDA\n                    USE_POINTER Peep* curPeep = &gameState->peeps[curPeepIdx];\n                    world2D.x = clientAction->intParameters[CAC_MouseStateChange_Param_WORLD_X_Q16];\n                    world2D.y = clientAction->intParameters[CAC_MouseStateChange_Param_WORLD_Y_Q16];\n                    int occluded;\n\n                    GetMapTileCoordFromWorld2D(ALL_CORE_PARAMS_PASS, world2D, &mapcoord, &occluded, client->mapZView);\n\n                    ge_int3 start = GE_INT3_WHOLE_Q16(curPeep->posMap_Q16);\n                    mapcoord.z++;\n                    ge_int3 end = mapcoord;\n                    printf(\"start: \");Print_GE_INT3(start);\n                    printf(\"end: \");Print_GE_INT3(end);\n\n                    //AStarSearch_BFS_Instantiate(&gameState->mapSearchers[0]);\n\n\n                    ge_int3 worldloc;\n                    MapToWorld(GE_INT3_TO_Q16(end), &worldloc);\n\n\n                    if(gameState->mapSearchers[0].state == AStarPathFindingProgress_Ready)\n                    {\n                        printf(\"Starting Search for selected peeps..\\n\");\n                        AStarPathFindingProgress prog = AStarSearch_BFS_Routine(ALL_CORE_PARAMS_PASS, &gameState->mapSearchers[0], (start), (end), 0);\n\n                        if(prog == AStarPathFindingProgress_Searching)\n                        { \n                            while (curPeepIdx != OFFSET_NULL)\n                            {\n                                USE_POINTER Peep* curPeep = &gameState->peeps[curPeepIdx];\n\n                                //tmp\n                                curPeep->stateBasic.aStarSearchPtr = 0;\n\n                                //tmp\n                                //curPeep->physics.drive.target_x_Q16 = worldloc.x;\n                                //curPeep->physics.drive.target_y_Q16 = worldloc.y;\n                                //curPeep->physics.drive.target_z_Q16 = worldloc.z;\n                                //curPeep->physics.drive.drivingToTarget = 1;\n\n\n\n                                curPeepIdx = curPeep->prevSelectionPeepPtr[cliId];\n\n                            }\n                        }\n                    }\n                    else\n                    {\n                        printf(\"path finder busy..%d\\n\", gameState->mapSearchers[0].state);\n                    }\n                }\n\n\n            }\n            \n            //delete\n            if(BITGET(buttons, MouseButtonBits_PrimaryReleased) && (GUI_MOUSE_ON_GUI(gui) == 0) \n            && (gui->draggedOff == 0) && client->curTool == EditorTools_Delete)\n            {\n                ge_int2 world2DMouse;\n                world2DMouse.x = clientAction->intParameters[CAC_MouseStateChange_Param_WORLD_X_Q16];\n                world2DMouse.y = clientAction->intParameters[CAC_MouseStateChange_Param_WORLD_Y_Q16];\n\n\n\n                ge_int3 mapCoord;\n                int occluded;\n                GetMapTileCoordFromWorld2D(ALL_CORE_PARAMS_PASS, world2DMouse, &mapCoord, &occluded, client->mapZView+1);\n                \n                Print_GE_INT3(mapCoord);\n                MapDeleteTile(ALL_CORE_PARAMS_PASS, mapCoord);\n               \n\n            }\n\n            //create\n            if(BITGET(buttons, MouseButtonBits_PrimaryReleased) && (GUI_MOUSE_ON_GUI(gui) == 0) \n            && (gui->draggedOff == 0) && client->curTool == EditorTools_Create)\n            {\n                ge_int2 world2DMouse;\n                world2DMouse.x = clientAction->intParameters[CAC_MouseStateChange_Param_WORLD_X_Q16];\n                world2DMouse.y = clientAction->intParameters[CAC_MouseStateChange_Param_WORLD_Y_Q16];\n\n                ge_int3 mapCoord;\n                int occluded;\n                GetMapTileCoordFromWorld2D(ALL_CORE_PARAMS_PASS, world2DMouse, &mapCoord, &occluded, client->mapZView+1);\n                \n\n                Print_GE_INT3(mapCoord);\n                if (mapCoord.z >= 0 && mapCoord.z < MAPDEPTH-1) \n                {\n                    ge_int3 mapCoordSpawn;\n                    mapCoordSpawn.x = mapCoord.x;\n                    mapCoordSpawn.y = mapCoord.y;\n                    mapCoordSpawn.z = mapCoord.z+1;\n\n                    USE_POINTER cl_uint* tileData = &gameState->map.levels[mapCoordSpawn.z].data[mapCoordSpawn.x][mapCoordSpawn.y]; \n\n                    if(MapDataGetTile(*tileData) == MapTile_NONE)\n                    {\n\n                        offsetPtr machinePtr = Machine_CreateMachine(ALL_CORE_PARAMS_PASS);\n                        gameState->map.levels[mapCoordSpawn.z].machinePtr[mapCoordSpawn.x][mapCoordSpawn.y] = machinePtr;\n\n                        Machine* machine;\n                        OFFSET_TO_PTR(gameState->machines, machinePtr, machine);\n                        CL_CHECK_NULL(machine);\n\n                        machine->valid = true;\n                        machine->mapTilePtr = VECTOR3_CAST(mapCoordSpawn, offsetPtrShort3);\n                        machine->MachineDescPtr = client->curToolMachine;\n                        machine->recipePtr = gameState->validMachineRecipes[client->curToolMachine][0];\n\n\n                        MachineDesc* machDesc;\n                        OFFSET_TO_PTR(gameState->machineDescriptions, machine->MachineDescPtr, machDesc);\n                        CL_CHECK_NULL(machDesc);\n\n                        *tileData = machDesc->tile;\n                        BITSET(*tileData, MapTileFlags_Explored);\n                    }\n                    \n\n\n                    MapBuildTileView3Area(ALL_CORE_PARAMS_PASS, mapCoord.x, mapCoord.y);\n                    MapUpdateShadow(ALL_CORE_PARAMS_PASS, mapCoord.x, mapCoord.y);\n                    MapUpdateShadow(ALL_CORE_PARAMS_PASS, mapCoord.x + 1, mapCoord.y);\n                    MapUpdateShadow(ALL_CORE_PARAMS_PASS, mapCoord.x - 1, mapCoord.y);\n                    MapUpdateShadow(ALL_CORE_PARAMS_PASS, mapCoord.x, mapCoord.y + 1);\n                    MapUpdateShadow(ALL_CORE_PARAMS_PASS, mapCoord.x, mapCoord.y - 1);\n                }\n\n            }\n\n            //select tile\n            if(BITGET(buttons, MouseButtonBits_PrimaryReleased) && (GUI_MOUSE_ON_GUI(gui) == 0) \n            && (gui->draggedOff == 0) && client->curTool == EditorTools_Select)\n            {\n                ge_int2 world2DMouse;\n                world2DMouse.x = clientAction->intParameters[CAC_MouseStateChange_Param_WORLD_X_Q16];\n                world2DMouse.y = clientAction->intParameters[CAC_MouseStateChange_Param_WORLD_Y_Q16];\n\n                ge_int3 mapCoord;\n                int occluded;\n                GetMapTileCoordFromWorld2D(ALL_CORE_PARAMS_PASS, world2DMouse, &mapCoord, &occluded, client->mapZView+1);\n                \n                client->selectedMapCoord = INT3_TO_SHORT3(mapCoord);\n\n                offsetPtr machinePtr = gameState->map.levels[mapCoord.z].machinePtr[mapCoord.x][mapCoord.y];\n\n                if(machinePtr != OFFSET_NULL)\n                {\n                    Machine* machine;\n                    OFFSET_TO_PTR(gameState->machines, machinePtr, machine);\n\n                    printf(\"machine selected\\n\");\n                }\n                client->selectedMachine = machinePtr;\n\n            }\n\n\n        }\n\n\n\n       \n   \n    }\n\n    gameStateActions->numActions = 0;\n}\n\nge_int3 MapTileWholeToMapTileCenterQ16(int x, int y, int z)\n{\n    ge_int3 mapCoordsTileCenter_Q16 = (ge_int3){TO_Q16(x) + (TO_Q16(1) >> 1),\n    TO_Q16(y) + (TO_Q16(1) >> 1) ,\n    TO_Q16(z) + (TO_Q16(1) >> 1) };\n    return mapCoordsTileCenter_Q16;\n}\n\nvoid MapCreateSlope(ALL_CORE_PARAMS, int x, int y)\n{\n    ge_int3 world_Q16;\n    ge_int3 mapCoords2D_Q16 = MapTileWholeToMapTileCenterQ16(x, y, 0);\n\n\n    MapToWorld(mapCoords2D_Q16, &world_Q16);\n    ge_int2 world2d_Q16 = (ge_int2){world_Q16.x, world_Q16.y };\n\n    ge_int3 mapCoordWhole;//top tile\n    int occluded;\n    GetMapTileCoordFromWorld2D(ALL_CORE_PARAMS_PASS, world2d_Q16,\n        &mapCoordWhole, &occluded, MAPDEPTH - 1);\n\n    USE_POINTER cl_uint* tileData = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, mapCoordWhole);\n    //do 3x3 kernel test\n\n\n    //offsets[22] = (ge_int3){ 1, 1, 0 };\n    //offsets[23] = (ge_int3){ -1, 1, 0 };\n    //offsets[24] = (ge_int3){ 1, -1, 0 };\n    //offsets[25] = (ge_int3){ -1, -1, 0 };\n\n    USE_POINTER cl_uint* data22 = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, INT3_ADD(mapCoordWhole, staticData->directionalOffsets[22]));\n    MapTile tile22 = MapDataGetTile(*data22);\n    if (tile22 == MapTile_NONE)\n    {\n        BITSET(*tileData, MapTileFlags_LowCornerBTMRIGHT);\n    }\n    USE_POINTER cl_uint* data24 = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, INT3_ADD(mapCoordWhole, staticData->directionalOffsets[24]));\n    MapTile tile24 = MapDataGetTile(*data24);\n    if (tile24 == MapTile_NONE)\n    {\n        BITSET(*tileData, MapTileFlags_LowCornerTPRIGHT);\n    }\n    USE_POINTER cl_uint* data23 = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, INT3_ADD(mapCoordWhole, staticData->directionalOffsets[23]));\n    MapTile tile23 = MapDataGetTile(*data23);\n    if (tile23 == MapTile_NONE)\n    {\n        BITSET(*tileData, MapTileFlags_LowCornerBTMLEFT);\n    }\n    USE_POINTER cl_uint* data25 = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, INT3_ADD(mapCoordWhole, staticData->directionalOffsets[25]));\n    MapTile tile25 = MapDataGetTile(*data25);\n    if (tile25 == MapTile_NONE)\n    {\n        BITSET(*tileData, MapTileFlags_LowCornerTPLEFT);\n    }\n\n\n\n\n\n\n\n\n    //offsets[0] = (ge_int3){ 1, 0, 0 };\n    //offsets[1] = (ge_int3){ -1, 0, 0 };\n    //offsets[2] = (ge_int3){ 0, -1, 0 };\n    //offsets[3] = (ge_int3){ 0, 1, 0 };\n    //offsets[4] = (ge_int3){ 0, 0, 1 };\n    //offsets[5] = (ge_int3){ 0, 0, -1 };\n\n\n\n    USE_POINTER cl_uint* data0 = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, INT3_ADD(mapCoordWhole, staticData->directionalOffsets[0]));\n    MapTile tile0 = MapDataGetTile(*data0);\n    if (tile0 == MapTile_NONE)\n    {\n        BITSET(*tileData, MapTileFlags_LowCornerBTMRIGHT);\n        BITSET(*tileData, MapTileFlags_LowCornerTPRIGHT);\n    }\n    USE_POINTER cl_uint* data1 = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, INT3_ADD(mapCoordWhole, staticData->directionalOffsets[1]));\n    MapTile tile1 = MapDataGetTile(*data1);\n    if (tile1 == MapTile_NONE)\n    {\n        BITSET(*tileData, MapTileFlags_LowCornerBTMLEFT);\n        BITSET(*tileData, MapTileFlags_LowCornerTPLEFT);\n    }\n    USE_POINTER cl_uint* data2 = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, INT3_ADD(mapCoordWhole, staticData->directionalOffsets[2]));\n    MapTile tile2 = MapDataGetTile(*data2);\n    if (tile2 == MapTile_NONE)\n    {\n        BITSET(*tileData, MapTileFlags_LowCornerTPRIGHT);\n        BITSET(*tileData, MapTileFlags_LowCornerTPLEFT);\n    }\n    USE_POINTER cl_uint* data3 = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, INT3_ADD(mapCoordWhole, staticData->directionalOffsets[3]));\n    MapTile tile3 = MapDataGetTile(*data3);\n    if (tile3 == MapTile_NONE)\n    {\n        BITSET(*tileData, MapTileFlags_LowCornerBTMRIGHT);\n        BITSET(*tileData, MapTileFlags_LowCornerBTMLEFT);\n    }\n\n\n    \n    if(MapDataLowCornerCount(*tileData) == 4)\n        MapDataSetTile(tileData, MapTile_NONE);\n\n    #ifdef ALL_EXPLORED\n        BITSET(*tileData, MapTileFlags_Explored);\n    #endif\n\n}\n\nvoid MapCreate(ALL_CORE_PARAMS, int x, int y)\n{\n    //printf(\"Creating Map..\\n\");\n\n    int i = 0;\n\n            cl_int perlin_z_Q16 = cl_perlin_2d_Q16(TO_Q16(x), TO_Q16(y), TO_Q16(1) >> 6, 8, 0) ;\n\n            #ifdef FLATMAP\n            perlin_z_Q16 = TO_Q16(1) >> 1;\n            #endif\n\n           \n            for (int z = 0; z < MAPDEPTH; z++)\n            {\n                int zPerc_Q16 = DIV_PAD_Q16(TO_Q16(z), TO_Q16(MAPDEPTH));\n                int depthFromSurface = perlin_z_Q16 - zPerc_Q16;\n                MapTile tileType = MapTile_NONE;\n                if (zPerc_Q16 < perlin_z_Q16)\n                {\n                    tileType = MapTile_Rock;\n\n                    if (RandomRange(x * y * z, 0, 20) == 1)\n                    {\n                        tileType = MapTile_IronOre;\n                    }\n                    else if (RandomRange(x * y * z + 1, 0, 20) == 1)\n                    {\n                        tileType = MapTile_GoldOre;\n                    }\n                    else if (RandomRange(x * y * z + 2, 0, 100) == 1)\n                    {\n                        tileType = MapTile_DiamondOre;\n                    }\n\n                    if (z == 0)\n                    {\n                        tileType = MapTile_Lava;\n                    }\n                }\n                else\n                {\n                    tileType = MapTile_NONE;\n                }\n\n                //int depthPerc_Q16 = TO_Q16(2) + perlin_z_Q16 - zPerc_Q16;\n                //depthPerc_Q16 = DIV_PAD_Q16(depthPerc_Q16, TO_Q16(3));\n                ////PrintQ16(depthPerc_Q16*100);\n\n                //if (depthPerc_Q16 * 100 > TO_Q16(90))\n                //{\n                //    tileType = MapTile_DiamondOre;\n                //}\n                //else if (depthPerc_Q16 * 100 > TO_Q16(80))\n                //{\n                //    tileType = MapTile_CopperOre;\n                //}\n                //else if (depthPerc_Q16 * 100 > TO_Q16(75))\n                //{\n                //    tileType = MapTile_Rock;\n                //}\n                //else if (depthPerc_Q16 * 100 > TO_Q16(70))\n                //{\n                //    tileType = MapTile_Dirt;\n                //}\n                //else if (depthPerc_Q16 * 100 > TO_Q16(65))\n                //{\n                //    tileType = MapTile_DarkGrass;\n                //}\n\n                gameState->map.levels[z].machinePtr[x][y] = OFFSET_NULL;\n\n                USE_POINTER cl_uint* data = &gameState->map.levels[z].data[x][y];\n                *data = tileType;\n                #ifdef ALL_EXPLORED\n                BITSET(*data, MapTileFlags_Explored);\n                #endif\n\n                cl_uint cpy = *data;\n                BITBANK_SET_SUBNUMBER_UINT(&cpy, MapTileFlags_RotBit1, 2, RandomRange(x*y,0,4));\n                *data = cpy;\n\n                i++;\n            }\n\n\n\n\n\n}\nvoid MapCreate2(ALL_CORE_PARAMS, int x, int y)\n{\n    //MapCreateSlope(ALL_CORE_PARAMS_PASS, x, y);\n    MapBuildTileView(ALL_CORE_PARAMS_PASS, x, y);\n    MapUpdateShadow(ALL_CORE_PARAMS_PASS, x, y);\n\n}\n\nvoid StartupTests()\n{\n  printf(\"StartupTests Tests------------------------------------------------------:\\n\");\n  if(0){\n  printf(\"Speed Tests:\\n\");\n\n    int s = 0;\n    for (cl_ulong i = 0; i < 1000; i++)\n    {\n        ge_int3 a = (ge_int3){ TO_Q16(i), TO_Q16(2), TO_Q16(i*2) };\n        ge_int3 b = (ge_int3){ TO_Q16(i*2), TO_Q16(i), TO_Q16(i) };\n\n        ge_int3 c = GE_INT3_MUL_Q16(a, b);\n        s += c.x + c.y + c.z;\n    }\n\n  }\n  if(0)\n  {\n    fixedPointTests();\n  }\n\n  if(0)\n  {\n\n    printf(\"Triangle Tests\\n\");\n\n    ge_int3 point = (ge_int3){TO_Q16(1), TO_Q16(0), TO_Q16(1) };\n    Triangle3DHeavy tri;\n    tri.base.verts_Q16[0] = (ge_int3){ TO_Q16(-1), TO_Q16(-1), TO_Q16(0) };\n    tri.base.verts_Q16[1] = (ge_int3){ TO_Q16( 1), TO_Q16(-1), TO_Q16(0) };\n    tri.base.verts_Q16[2] = (ge_int3){ TO_Q16(-1), TO_Q16( 1), TO_Q16(0) };\n\n    Triangle3DMakeHeavy(&tri);\n\n    int dist;\n    ge_int3 closestPoint = Triangle3DHeavy_ClosestPoint(&tri, point, &dist);\n    printf(\"closest point: \");\n    Print_GE_INT3_Q16(closestPoint);\n    printf(\"Dist: \");\n    PrintQ16(dist);\n  }\n\n\n  if(0)\n  {\n    printf(\"Convex Hull Tests:\\n\");\n\n\n    ConvexHull hull;    \n    cl_int tileData = 1;\n    MapTileConvexHull_From_TileData(&hull, &tileData);\n\n    printf(\"convex hull tris:\\n\");\n    for (int i = 0; i < 14; i++)\n    {\n        Print_GE_INT3_Q16(hull.triangles[i].base.verts_Q16[0]);\n        Print_GE_INT3_Q16(hull.triangles[i].base.verts_Q16[1]);\n        Print_GE_INT3_Q16(hull.triangles[i].base.verts_Q16[2]);\n    }\n\n\n    ge_int3 p = (ge_int3){TO_Q16(0),TO_Q16(0),TO_Q16(2)};\n    ge_int3 nearestPoint = MapTileConvexHull_ClosestPointToPoint(&hull, p);\n\n    printf(\"nearest point: \");\n    Print_GE_INT3_Q16(nearestPoint);\n\n    p = (ge_int3){TO_Q16(0),TO_Q16(0),TO_Q16(0)};\n    cl_uchar inside = MapTileConvexHull_PointInside(&hull, p);\n    printf(\"should be inside(1): %d\\n\", inside);\n\n    p = (ge_int3){TO_Q16(0),TO_Q16(1),TO_Q16(0)};\n    inside = MapTileConvexHull_PointInside(&hull, p);\n    printf(\"should be outside(0): %d\\n\", inside);\n  }\n    printf(\"End Tests-----------------------------------------------------------------\\n\");\n\n}\n\n\n\n\n\n\n\n\nvoid MapExplorerSpawn(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER MapExplorerAgent* agent)\n{\n    ge_int3 randomTileLoc;\n    randomTileLoc.x = RandomRange((int)agent, 0, MAPDIM);\n    randomTileLoc.y = RandomRange((int)agent, 0, MAPDIM);\n    randomTileLoc.z = RandomRange((int)agent, 0, MAPDEPTH);\n\n\n    USE_POINTER cl_uint* data = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, randomTileLoc);\n    if(MapDataGetTile(*data) == MapTile_NONE && BITGET(*data, MapTileFlags_Explored))\n    {\n        \n    }\n}\n\nvoid AStarPathStepsInit(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER AStarPathSteps* steps)\n{\n    for (int i = 0; i < ASTARPATHSTEPSSIZE; i++)\n    {\n        AStarInitPathNode(&gameState->paths.pathNodes[i]);\n    }\n\n    //paths initialize\n    gameState->paths.nextListIdx = 0;\n    for(int i = 0; i < ASTAR_MAX_PATHS; i++)\n        gameState->paths.pathStarts[i] = OFFSET_NULL;\n\n}\n\nvoid CLIENT_InitClientState(SynchronizedClientState* client)\n{\n    client->selectedMachine = OFFSET_NULL;\n    client->selectedPeepPrimary = OFFSET_NULL;\n}\n\n\nvoid CLIENT_InitClientStates(ALL_CORE_PARAMS)\n{\n    for(int i = 0; i < MAX_CLIENTS; i++)\n    {\n        SynchronizedClientState* client = &gameState->clientStates[i];\n        CLIENT_InitClientState(client);\n        SyncedGui* gui = &client->gui;\n\n        GuiState_Init(&gui->guiState);\n    }\n    GuiState_Init(&gameState->fakePassGui.guiState);\n}\n\n\n\nvoid MakeItemStrings(PARAM_GLOBAL_POINTER char* strings)\n{\n    //char a[ITEMTYPE_STRING_MAX_LENGTH] = \"Iron Dust\\0\";\n    //strings[0] = a;\n\n    //ItemTypeStrings[ITEMTYPE_STRING_MAX_LENGTH][ItemTypes_NUMITEMS];\n\n   // LOCAL_STR(a, \"Iron Dust\");\n\n\n    //strings[1] = '\\0';\n    //strings[1*ITEMTYPE_STRING_MAX_LENGTH] = \"Iron Dust\\0\";\n   // strings[2*ITEMTYPE_STRING_MAX_LENGTH] = \"Iron Bar\\0\";\n    //strings[3*ITEMTYPE_STRING_MAX_LENGTH] = \"Rock Dust\\0\";\n}\n\n\n__kernel void game_init_single(ALL_CORE_PARAMS)\n{\n    printf(\"Game Initializing...\\n\");\n\n\n\n\n    printf(\"Initializing StaticData Buffers..\\n\");\n    MakeCardinalDirectionOffsets(&staticData->directionalOffsets[0]);\n   // MakeItemStrings(staticData->ItemTypeStrings);\n\n\n\n    printf(\"Initializing GUI..\\n\");\n    GUI_INIT_STYLE(ALL_CORE_PARAMS_PASS);\n\n    printf(\"Initializing Default Client States..\\n\");\n    CLIENT_InitClientStates(ALL_CORE_PARAMS_PASS);\n\n\n\n    printf(\"Startup Tests..\\n\");\n    StartupTests();\n\n\n    printf(\"Creating Machines Types\\n\");\n    Machine_InitDescriptions(ALL_CORE_PARAMS_PASS);\n    printf(\"Creating Machine Recipes\\n\");\n    Machine_InitRecipes(ALL_CORE_PARAMS_PASS);\n    printf(\"Mapping Item Tiles\\n\");   \n    InitItemTypeTiles(ALL_CORE_PARAMS_PASS);\n\n    gameState->numClients = 1;\n    gameStateActions->pauseState = 0;\n    ThisClient(ALL_CORE_PARAMS_PASS)->mapZView = MAPDEPTH-1;\n    ThisClient(ALL_CORE_PARAMS_PASS)->mapZView_1 = 0;\n\n    for (int secx = 0; secx < SQRT_MAXSECTORS; secx++)\n    {\n        for (int secy = 0; secy < SQRT_MAXSECTORS; secy++)\n        {\n            gameState->sectors[secx][secy].ptr.x = secx;\n            gameState->sectors[secx][secy].ptr.y = secy;\n            gameState->sectors[secx][secy].lock = 0;\n            gameState->sectors[secx][secy].empty = true; \n            for(int j = 0; j < MAX_PEEPS_PER_SECTOR; j++)\n            {\n                gameState->sectors[secx][secy].peepPtrs[j] = OFFSET_NULL;\n            }\n        }\n    }\n    printf(\"Sectors Initialized.\\n\");\n\n\n\n\n    AStarSearch_BFS_Instantiate(&gameState->mapSearchers[0]);\n}\n\n__kernel void game_init_multi(ALL_CORE_PARAMS)\n{\n    int globalid = get_global_id(0);\n    int localid = get_local_id(0);\n\n    MapCreate(ALL_CORE_PARAMS_PASS, globalid % MAPDIM, globalid / MAPDIM);\n\n}\n__kernel void game_init_multi2(ALL_CORE_PARAMS)\n{\n    int globalid = get_global_id(0);\n    int localid = get_local_id(0);\n\n    MapCreate2(ALL_CORE_PARAMS_PASS, globalid % MAPDIM, globalid / MAPDIM);\n}\n__kernel void game_init_single2(ALL_CORE_PARAMS)\n{\n    AStarPathStepsInit(ALL_CORE_PARAMS_PASS, &gameState->paths);\n\n\n\n    printf(\"AStarTests:\\n\");\n    //printf(\"AStarTests1:\\n\");\n    //AStarSearch_BFS_Instantiate(&gameState->mapSearchers[0]);\n    ////test AStarHeap\n    //for (int x = 0; x < MAPDIM; x++)\n    //{\n    //    for (int y = 0; y < MAPDIM; y++)\n    //    {\n    //        AStarNode* node = &gameState->mapSearchers[0].details[x][y][0];\n    //        node->h_Q16 = x * y;\n    //        node->g_Q16 = x * y;\n    //        AStarOpenHeapInsert(&gameState->mapSearchers[0], node);\n    //    }\n    //}\n\n    //do\n    //{\n    //    AStarNode* node = AStarOpenHeapRemove(&gameState->mapSearchers[0]);\n    //    AStarPrintNodeStats(node);\n    //} while (gameState->mapSearchers[0].openHeapSize);\n\n    printf(\"AStarTests2:\\n\");\n    //test AStar\n\n    // ge_short3 start = (ge_short3){ 0,0,MAPDEPTH - 2 };\n    // ge_short3 end = (ge_short3){ MAPDIM - 1,MAPDIM - 1,1 };\n    // AStarSearch_BFS_Routine(ALL_CORE_PARAMS_PASS, &gameState->mapSearchers[0], start, end, CL_INTMAX);\n\n    printf(\"initializing peeps..\\n\");\n    const int spread = 500;\n    for (cl_uint p = 0; p < MAX_PEEPS; p++)\n    {\n        gameState->peeps[p].ptr = p;\n\n        gameState->peeps[p].physics.base.pos_Q16.x = RandomRange(p, -spread << 16, spread << 16);\n        gameState->peeps[p].physics.base.pos_Q16.y = RandomRange(p + 1, -spread << 16, spread << 16);\n\n\n        ge_int3 mapcoord;\n        ge_int2 world2D;\n        world2D.x = gameState->peeps[p].physics.base.pos_Q16.x;\n        world2D.y = gameState->peeps[p].physics.base.pos_Q16.y;\n        int occluded;\n\n        GetMapTileCoordFromWorld2D(ALL_CORE_PARAMS_PASS, world2D, &mapcoord, &occluded, MAPDEPTH - 1);\n        //printf(\"%d\\n\", mapcoord.z);\n        mapcoord.z += 2;\n        mapcoord = GE_INT3_TO_Q16(mapcoord);\n\n        ge_int3 worldCoord;\n        MapToWorld(mapcoord, &worldCoord);\n                \n        gameState->peeps[p].physics.base.pos_Q16.z = worldCoord.z;\n\n        ge_int3 pmap_Q16;\n        WorldToMap(gameState->peeps[p].physics.base.pos_Q16, &pmap_Q16);\n\n        gameState->peeps[p].posMap_Q16 = pmap_Q16;\n        gameState->peeps[p].lastGoodPosMap_Q16 = gameState->peeps[p].posMap_Q16;\n\n\n        gameState->peeps[p].mapCoord = VECTOR3_CAST(GE_INT3_WHOLE_Q16(gameState->peeps[p].posMap_Q16), offsetPtrShort3);\n        gameState->peeps[p].mapCoord_1 = OFFSET_NULL_SHORT_3D;\n\n\n        gameState->peeps[p].physics.shape.radius_Q16 = TO_Q16(1);\n        BITCLEAR(gameState->peeps[p].stateBasic.bitflags0, PeepState_BitFlags_deathState);\n        BITSET(gameState->peeps[p].stateBasic.bitflags0, PeepState_BitFlags_valid);\n        BITSET(gameState->peeps[p].stateBasic.bitflags0, PeepState_BitFlags_visible);\n        gameState->peeps[p].stateBasic.health = 10;\n        gameState->peeps[p].stateBasic.deathState = 0;\n        gameState->peeps[p].stateBasic.buriedGlitchState = 0;\n        gameState->peeps[p].stateBasic.aStarSearchPtr = OFFSET_NULL;\n\n        gameState->peeps[p].physics.base.v_Q16 = (ge_int3){ 0,0,0 };\n        gameState->peeps[p].physics.base.vel_add_Q16 = (ge_int3){ 0,0,0 };\n        gameState->peeps[p].physics.base.pos_post_Q16 = (ge_int3){ 0,0,0 };\n\n        gameState->peeps[p].sectorPtr = OFFSET_NULL_2D;\n\n        gameState->peeps[p].minDistPeepPtr = OFFSET_NULL;\n        gameState->peeps[p].minDistPeep_Q16 = (1 << 30);\n        gameState->peeps[p].physics.drive.target_x_Q16 = gameState->peeps[p].physics.base.pos_Q16.x;\n        gameState->peeps[p].physics.drive.target_y_Q16 = gameState->peeps[p].physics.base.pos_Q16.y;\n        gameState->peeps[p].physics.drive.drivingToTarget = 0;\n        gameState->peeps[p].physics.drive.targetPathNodeOPtr = OFFSET_NULL;\n\n\n        gameState->peeps[p].stateBasic.faction = RandomRange(p,0,4);\n\n\n        for (int i = 0; i < MAX_CLIENTS; i++)\n        {\n            gameState->clientStates[i].selectedPeepsLastIdx = OFFSET_NULL;\n\n\n            CL_CHECKED_ARRAY_SET(gameState->peeps[p].nextSelectionPeepPtr, MAX_CLIENTS, i, OFFSET_NULL)\n            CL_CHECKED_ARRAY_SET(gameState->peeps[p].prevSelectionPeepPtr, MAX_CLIENTS, i, OFFSET_NULL)\n        }\n\n    }\n\n    printf(\"Peeps Initialized.\\n\");\n\n\n\n\n\n\n    for (int i = 0; i < MAX_PARTICLES; i++)\n    {\n        USE_POINTER Particle* p = &gameState->particles[i];\n\n        p->pos.x = FloatToQMP32((float)RandomRange(i, -spread, spread));\n        p->pos.y = FloatToQMP32((float)RandomRange(i + 1, -spread, spread));\n\n        p->vel.x = FloatToQMP32(((float)RandomRange(i, -1000, 1000)) * 0.001f);\n        p->vel.y = FloatToQMP32(((float)RandomRange(i + 1, -1000, 1000)) * 0.001f);\n    }\n\n\n}\n\n\n\nvoid UpdateMapExplorer(ALL_CORE_PARAMS,  PARAM_GLOBAL_POINTER MapExplorerAgent* agent)\n{\n\n\n\n}\n\n\nvoid PeepDraw(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER Peep* peep)\n{\n    float3 drawColor;\n    float drawPosX = (float)((float)peep->physics.base.pos_Q16.x / (1 << 16));\n    float drawPosY = (float)((float)peep->physics.base.pos_Q16.y / (1 << 16));\n\n    float brightFactor = 0.6f;\n    if (peep->stateBasic.faction == 0)\n    {\n        drawColor.x = 0.0f;\n        drawColor.y = 1.0f;\n        drawColor.z = 1.0f;\n    }\n    else if(peep->stateBasic.faction == 1)\n    {\n        drawColor.x = 1.0f;\n        drawColor.y = 1.0f;\n        drawColor.z = 0.0f;\n    }\n    else if (peep->stateBasic.faction == 2)\n    {\n        drawColor.x = 0.0f;\n        drawColor.y = 1.0f;\n        drawColor.z = 0.0f;\n    }\n    else if (peep->stateBasic.faction == 3)\n    {\n        drawColor.x = 1.0f;\n        drawColor.y = 0.0f;\n        drawColor.z = 1.0f;\n    }\n\n    if (gameState->clientStates[gameStateActions->clientId].peepRenderSupport[peep->ptr].render_selectedByClient)\n    {\n        brightFactor = 1.0f;\n        gameState->clientStates[gameStateActions->clientId].peepRenderSupport[peep->ptr].render_selectedByClient = 0;\n    }\n    if ( BITGET(peep->stateBasic.bitflags0, PeepState_BitFlags_deathState) )\n    {\n        brightFactor = 0.6f;\n        drawColor.x = 0.5f;\n        drawColor.y = 0.5f;\n        drawColor.z = 0.5f;\n    }\n    if (!BITGET(peep->stateBasic.bitflags0, PeepState_BitFlags_visible))\n    {\n        drawPosX = 99999;\n        drawPosY = 99999;\n    }\n\n\n    if(peep->physics.base.pos_Q16.z < 0)\n    {   brightFactor = 1.0f;\n        drawColor.x = 1.0f;\n        drawColor.y = 0.0f;\n        drawColor.z = 0.0f;\n    }\n\n    if(peep->stateBasic.buriedGlitchState > 0)\n    { \n       \n        brightFactor = 1.0f;\n        drawColor.x = 0.0f;\n        drawColor.y = 1.0f;\n        drawColor.z = 0.0f;\n    }\n\n    peepVBOBuffer[peep->ptr * (PEEP_VBO_INSTANCE_SIZE / sizeof(float)) + 0] = drawPosX;\n    peepVBOBuffer[peep->ptr * (PEEP_VBO_INSTANCE_SIZE / sizeof(float)) + 1] = drawPosY;\n\n    peepVBOBuffer[peep->ptr * (PEEP_VBO_INSTANCE_SIZE / sizeof(float)) + 2] = drawColor.x * brightFactor;\n    peepVBOBuffer[peep->ptr * (PEEP_VBO_INSTANCE_SIZE / sizeof(float)) + 3] = drawColor.y * brightFactor;\n    peepVBOBuffer[peep->ptr * (PEEP_VBO_INSTANCE_SIZE / sizeof(float)) + 4] = drawColor.z * brightFactor;\n\n    peepVBOBuffer[peep->ptr * (PEEP_VBO_INSTANCE_SIZE / sizeof(float)) + 5] = peep->physics.base.CS_angle_rad;\n}\n\nvoid ParticleDraw(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER Particle* particle, cl_uint ptr)\n{\n    float3 drawColor;\n    float drawPosX = (float)((float)particle->pos.x.number / (1 << particle->pos.x.q));\n    float drawPosY = (float)((float)particle->pos.y.number / (1 << particle->pos.y.q));\n\n\n    drawColor.x = 1.0f;\n    drawColor.y = 1.0f;\n    drawColor.z = 1.0f;\n  \n\n    float brightFactor = 1.0f;\n\n    particleVBOBuffer[ptr * (PARTICLE_VBO_INSTANCE_SIZE / sizeof(float)) + 0] = drawPosX;\n    particleVBOBuffer[ptr * (PARTICLE_VBO_INSTANCE_SIZE / sizeof(float)) + 1] = drawPosY;\n\n    particleVBOBuffer[ptr * (PARTICLE_VBO_INSTANCE_SIZE / sizeof(float)) + 2] = drawColor.x * brightFactor;\n    particleVBOBuffer[ptr * (PARTICLE_VBO_INSTANCE_SIZE / sizeof(float)) + 3] = drawColor.y * brightFactor;\n    particleVBOBuffer[ptr * (PARTICLE_VBO_INSTANCE_SIZE / sizeof(float)) + 4] = drawColor.z * brightFactor;\n\n    particleVBOBuffer[ptr * (PARTICLE_VBO_INSTANCE_SIZE / sizeof(float)) + 5] = 0;\n}\n\n__kernel void game_updatepre1(ALL_CORE_PARAMS)\n{\n\n\n    // Get the index of the current element to be processed\n    int globalid = get_global_id(0);\n    int localid = get_local_id(0);\n    if (globalid < MAX_PEEPS) {\n        USE_POINTER Peep* p = &gameState->peeps[globalid]; \n        PeepPreUpdate2(ALL_CORE_PARAMS_PASS, p);\n    }\n\n    //reset some things\n    LINES_ClearAll(ALL_CORE_PARAMS_PASS);\n\n\n    \n\n    \n}\n\n\n__kernel void game_update(ALL_CORE_PARAMS)\n{\n\n    // Get the index of the current element to be processed\n    int globalid = get_global_id(0);\n    int localid = get_local_id(0);\n    \n\n    if (globalid < MAX_PEEPS) {\n        USE_POINTER Peep* p = &gameState->peeps[globalid]; \n        PeepUpdate(ALL_CORE_PARAMS_PASS, p);\n        PeepDraw(ALL_CORE_PARAMS_PASS, p);\n    }\n\n    if ( globalid < MAX_MACHINES)\n    {\n        USE_POINTER Machine* m = &gameState->machines[globalid]; \n        MachineUpdate(ALL_CORE_PARAMS_PASS, m);\n    }\n\n    if (globalid < MAX_PARTICLES) {\n        USE_POINTER Particle* p = &gameState->particles[globalid];\n        ParticleUpdate(ALL_CORE_PARAMS_PASS, p);\n        ParticleDraw(ALL_CORE_PARAMS_PASS, p, globalid);\n    }\n    \n\n\n\n    //update map view\n    if (ThisClient(ALL_CORE_PARAMS_PASS)->mapZView != ThisClient(ALL_CORE_PARAMS_PASS)->mapZView_1)\n    {\n        cl_uint chunkSize = (MAPDIM * MAPDIM) / GAME_UPDATE_WORKITEMS;\n\n        for (cl_ulong i = 0; i < chunkSize+1; i++)\n        {\n            cl_ulong xyIdx = globalid+GAME_UPDATE_WORKITEMS*i;\n\n            \n            if (xyIdx < (MAPDIM * MAPDIM))\n            {\n                MapBuildTileView(ALL_CORE_PARAMS_PASS, xyIdx % MAPDIM, xyIdx / MAPDIM);\n                MapUpdateShadow(ALL_CORE_PARAMS_PASS, xyIdx % MAPDIM, xyIdx / MAPDIM);\n            }\n        }\n    }\n\n    //update map explorers\n    USE_POINTER MapExplorerAgent* explorer = &gameState->explorerAgents[globalid];\n    UpdateMapExplorer(ALL_CORE_PARAMS_PASS, explorer);\n\n\n    \n\n}\n__kernel void game_update2(ALL_CORE_PARAMS)\n{\n\n\n    // Get the index of the current element to be processed\n    int globalid = get_global_id(0);\n    int localid = get_local_id(0);\n\n\n\n\n    //reset searches\n    USE_POINTER AStarSearch_BFS* search = &gameState->mapSearchers[0];\n    if((search->state == AStarPathFindingProgress_Failed) || (search->state == AStarPathFindingProgress_Finished))\n    {\n        cl_ulong chunks = (MAPDIM * MAPDIM * MAPDEPTH) / GAME_UPDATE_WORKITEMS;\n    \n        for (cl_ulong i = 0; i < chunks+1; i++)\n        {\n            cl_long xyzIdx = globalid+GAME_UPDATE_WORKITEMS*i;\n            \n            if (xyzIdx < (MAPDIM * MAPDIM* MAPDEPTH))\n            {\n\n                cl_long z = xyzIdx % MAPDEPTH;\n                cl_long y = (xyzIdx / MAPDEPTH) % MAPDIM;\n                cl_long x = xyzIdx / (MAPDIM * MAPDEPTH); \n\n\n\n\n                if(x > MAPDIM)\n                    printf(\"X>MAPDIM\\n\");\n                if(y > MAPDIM)\n                    printf(\"Y>MAPDIM\\n\");\n                if(z > MAPDEPTH)\n                    printf(\"Z>MAPDEPTH\\n\");\n\n                \n                AStarSearch_BFS_InstantiateParrallel(search, xyzIdx, x, y, z);\n            }\n        }\n    }\n\n\n\n}\n\n\n__kernel void game_post_update_single( ALL_CORE_PARAMS )\n{\n\n\n    //set selected peeps to highlight.\n    cl_uint curPeepIdx = gameState->clientStates[gameStateActions->clientId].selectedPeepsLastIdx;\n    PeepRenderSupport peepRenderSupport[MAX_PEEPS];\n    while (curPeepIdx != OFFSET_NULL)\n    {\n        USE_POINTER Peep* p = &gameState->peeps[curPeepIdx];\n        gameState->clientStates[gameStateActions->clientId].peepRenderSupport[curPeepIdx].render_selectedByClient = 1;\n                \n        curPeepIdx = p->prevSelectionPeepPtr[gameStateActions->clientId];\n    }\n\n\n\n\n\n    ThisClient(ALL_CORE_PARAMS_PASS)->mapZView_1 = ThisClient(ALL_CORE_PARAMS_PASS)->mapZView;\n    \n\n    USE_POINTER AStarSearch_BFS* search = &gameState->mapSearchers[0];\n    //update AStarPath Searchers\n    if(search->state == AStarPathFindingProgress_Searching)\n    {\n        AStarSearch_BFS_Continue(ALL_CORE_PARAMS_PASS, search, 100);\n    }\n    else if(search->state != AStarPathFindingProgress_Ready)\n    {\n       // printf(\"going to ready..\");\n        search->state = AStarPathFindingProgress_Ready;\n    }\n\n\n\n\n\n\n\n    //draw debug lines on paths\n    #ifdef DEBUG_PATHS\n    USE_POINTER AStarPathSteps* paths = &gameState->paths;\n    \n    //get a path\n    int pathIdx = 0;\n\n    offsetPtr pathStartOPtr = paths->pathStarts[pathIdx];\n    while(pathStartOPtr != OFFSET_NULL)\n    {\n        USE_POINTER AStarPathNode* node;\n        OFFSET_TO_PTR(paths->pathNodes, pathStartOPtr, node)\n\n        while(node != NULL && node->nextOPtr != OFFSET_NULL)\n        {\n            USE_POINTER AStarPathNode* nodeNext;\n            OFFSET_TO_PTR(paths->pathNodes, node->nextOPtr, nodeNext);\n            CL_CHECK_NULL(nodeNext);\n\n            ge_int3 worldCoord_Q16;\n            MapToWorld(( node->mapCoord_Q16 ), &worldCoord_Q16);\n\n            ge_int3 worldCoordNext_Q16;\n            MapToWorld(( nodeNext->mapCoord_Q16 ), &worldCoordNext_Q16);\n\n            \n            float2 worldCoordsFloat = (float2)(FIXED2FLTQ16(worldCoord_Q16.x),FIXED2FLTQ16(worldCoord_Q16.y));\n            float2 worldCoordsNextFloat = (float2)(FIXED2FLTQ16(worldCoordNext_Q16.x),FIXED2FLTQ16(worldCoordNext_Q16.y));\n\n         \n            LINES_DrawLineWorld(ALL_CORE_PARAMS_PASS, worldCoordsFloat, worldCoordsNextFloat, (float3)(RandomRange(pathIdx, 0, 1000)/1000.0f, RandomRange(pathIdx+1, 0, 1000)/1000.0f, 1.0f));\n\n\n            OFFSET_TO_PTR(paths->pathNodes, node->nextOPtr, node)\n        }\n\n        pathIdx++;\n        if(pathIdx >= ASTAR_MAX_PATHS)\n            pathIdx = 0;\n\n        pathStartOPtr = paths->pathStarts[pathIdx];\n    }\n    #endif\n}\n\n__kernel void game_preupdate_1(ALL_CORE_PARAMS) {\n\n\n    int globalid = get_global_id(0);\n\n    if (globalid >= GAME_UPDATE_WORKITEMS)\n        return;\n   \n\n    cl_uint chunkSize = (MAX_PEEPS) / GAME_UPDATE_WORKITEMS;\n\n    \n\n    for (cl_ulong pi = 0; pi < chunkSize+1; pi++)\n    {\n        cl_ulong idx = globalid+(GAME_UPDATE_WORKITEMS)*pi;\n        if (idx < MAX_PEEPS)\n        {\n            USE_POINTER Peep* peep;\n            CL_CHECKED_ARRAY_GET_PTR(gameState->peeps, MAX_PEEPS, idx, peep)\n            CL_CHECK_NULL(peep)\n            \n            cl_int x = ((peep->physics.base.pos_Q16.x >> 16) / (SECTOR_SIZE));\n            cl_int y = ((peep->physics.base.pos_Q16.y >> 16) / (SECTOR_SIZE));\n\n            peep->sectorPtr.x = x + SQRT_MAXSECTORS / 2;\n            peep->sectorPtr.y = y + SQRT_MAXSECTORS / 2;\n\n            MapSector* sector;\n            OFFSET_TO_PTR_2D(gameState->sectors, peep->sectorPtr, sector);\n            sector->empty = false;\n        }\n\n    }\n\n}\n\n\n__kernel void game_preupdate_2(ALL_CORE_PARAMS) {\n\n\n    // Get the index of the current element to be processed\n    int globalid = get_global_id(0);\n\n    if (globalid >= GAME_UPDATE_WORKITEMS)\n        return;\n   \n\n    cl_uint chunkSize = (SQRT_MAXSECTORS*SQRT_MAXSECTORS) / GAME_UPDATE_WORKITEMS;\n\n\n\n    for (cl_ulong pi = 0; pi < chunkSize+1; pi++)\n    {\n        cl_ulong idx = globalid+(GAME_UPDATE_WORKITEMS)*pi;\n        if (idx < SQRT_MAXSECTORS*SQRT_MAXSECTORS)\n        {\n            offsetPtr2 xy;\n            xy.x = idx % SQRT_MAXSECTORS;\n            xy.y = idx / SQRT_MAXSECTORS;\n\n            global volatile MapSector* mapSector;\n            OFFSET_TO_PTR_2D(gameState->sectors, xy, mapSector);\n            CL_CHECK_NULL(mapSector)\n\n            if(mapSector->empty)\n                continue;\n\n            //clear non-present peeps\n            for(int j = 0; j < MAX_PEEPS_PER_SECTOR; j++)\n            {\n                if(mapSector->peepPtrs[j] == OFFSET_NULL)\n                    continue;\n                USE_POINTER Peep* peep;\n                OFFSET_TO_PTR(gameState->peeps, mapSector->peepPtrs[j], peep)\n\n                if(!VECTOR2_EQUAL(peep->sectorPtr, xy))\n                {\n                    mapSector->peepPtrs[j] = OFFSET_NULL;\n                }\n            }\n\n\n\n            for(int i = mapSector->chunkStart; (i < mapSector->chunkStart + MAX_PEEPS/16) && i < MAX_PEEPS; i++)\n            {   \n                USE_POINTER Peep* peep;\n                CL_CHECKED_ARRAY_GET_PTR(gameState->peeps, MAX_PEEPS, i, peep)\n                CL_CHECK_NULL(peep)\n                \n                if(VECTOR2_EQUAL(peep->sectorPtr, xy) == 0)\n                    continue;\n\n                //check if its already in the list\n                if(mapSector->peepPtrs[peep->sectorListIdx] == i)\n                    continue;\n\n                peep->sectorListIdx = mapSector->ptrIterator;\n                mapSector->peepPtrs[mapSector->ptrIterator] = i;\n                mapSector->ptrIterator++;\n                if(mapSector->ptrIterator >= MAX_PEEPS_PER_SECTOR)\n                {\n                    mapSector->ptrIterator = 0;\n                }\n            }\n\n\n            mapSector->chunkStart += MAX_PEEPS/16;\n            if(mapSector->chunkStart >= MAX_PEEPS)\n                mapSector->chunkStart = 0;\n        }\n    }\n\n\n}\n\n\n__kernel void size_tests_kernel(PARAM_GLOBAL_POINTER SIZETESTSDATA* data)\n{\n    data->gameStateStructureSize = sizeof(GameState);\n    data->staticDataStructSize = sizeof(StaticData);\n\n    printf(\"SIZE_TESTS_KERNEL: sizeof(GameState): %ul\\n\", sizeof(GameState));\n    printf(\"SIZE_TESTS_KERNEL: sizeof(StaticData): %ul\\n\", sizeof(StaticData));\n\n}\n\n",
			"file": "openCL/clGame.c",
			"file_size": 166122,
			"file_write_time": 133111109785271381,
			"settings":
			{
				"buffer_size": 161140,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "8+8+32+32+32+32+32+17+21=214\n",
			"settings":
			{
				"buffer_size": 29,
				"line_ending": "Windows",
				"name": "8+8+32+32+32+32+32+17+21=214"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"insert",
					{
						"characters": "8+8+32"
					},
					"BgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAYAAAAAAAAAAAAAAA",
					"GAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					2,
					1,
					"insert",
					{
						"characters": "+32"
					},
					"AwAAAAYAAAAAAAAABwAAAAAAAAAAAAAABwAAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAkAAAAAAAAAAAAAAA",
					"GAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAYAAAAAAAAABgAAAAAAAAAAAAAAAADwvw"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "+32+32+32"
					},
					"CQAAAAkAAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAADQAAAAAAAAAAAAAADQAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAARAAAAAAAAAAAAAAARAAAAAAAAABIAAAAAAAAAAAAAAA",
					"GAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAkAAAAAAAAACQAAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAABIAAAAAAAAAEwAAAAAAAAAAAAAA",
					"GAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABIAAAAAAAAAEgAAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "17+21"
					},
					"BQAAABMAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAVAAAAAAAAAAAAAAAVAAAAAAAAABYAAAAAAAAAAAAAABYAAAAAAAAAFwAAAAAAAAAAAAAAFwAAAAAAAAAYAAAAAAAAAAAAAAA",
					"GAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABMAAAAAAAAAEwAAAAAAAAAAAAAAAADwvw"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "=-21"
					},
					"BAAAABgAAAAAAAAAGQAAAAAAAAAAAAAAGQAAAAAAAAAaAAAAAAAAAAAAAAAaAAAAAAAAABsAAAAAAAAAAAAAABsAAAAAAAAAHAAAAAAAAAAAAAAA",
					"GAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABgAAAAAAAAAGAAAAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					2,
					"left_delete",
					null,
					"AgAAABsAAAAAAAAAGwAAAAAAAAABAAAAMRoAAAAAAAAAGgAAAAAAAAABAAAAMg",
					"GAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABwAAAAAAAAAHAAAAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAABoAAAAAAAAAGwAAAAAAAAAAAAAA",
					"GAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABoAAAAAAAAAGgAAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					2,
					"left_delete",
					null,
					"AgAAABoAAAAAAAAAGgAAAAAAAAABAAAAMhkAAAAAAAAAGQAAAAAAAAABAAAALQ",
					"GAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABsAAAAAAAAAGwAAAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "214"
					},
					"AwAAABkAAAAAAAAAGgAAAAAAAAAAAAAAGgAAAAAAAAAbAAAAAAAAAAAAAAAbAAAAAAAAABwAAAAAAAAAAAAAAA",
					"GAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABkAAAAAAAAAGQAAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABwAAAAAAAAAHQAAAAAAAAAAAAAA",
					"GAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABwAAAAAAAAAHAAAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "openCL/DotProduct.cl",
			"settings":
			{
				"buffer_size": 979,
				"line_ending": "Windows"
			}
		},
		{
			"file": "openCL/DotProduct.o",
			"settings":
			{
				"buffer_size": 2257,
				"encoding": "Hexadecimal",
				"line_ending": "Unix"
			}
		},
		{
			"file": "openCL/DotProduct.bc",
			"settings":
			{
				"buffer_size": 7840,
				"encoding": "Hexadecimal",
				"line_ending": "Unix"
			}
		},
		{
			"file": "openCL/matvec.cl",
			"settings":
			{
				"buffer_size": 243,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAKgEAAAAAAAAAAAAAKgEAAAAAAAAqAQAAAAAAABMAAABrZXJuZWwgdm9pZCBrKCl7fSAK",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAA8wAAAAAAAAAAAAAA8wAAAAAAAADzAAAAAAAAACoBAAAvKiBIZWFkZXIgdG8gbWFrZSBDbGFuZyBjb21wYXRpYmxlIHdpdGggT3BlbkNMICovCiNkZWZpbmUgX19nbG9iYWwgX19hdHRyaWJ1dGVfXygoYWRkcmVzc19zcGFjZSgxKSkpCmludCBnZXRfZ2xvYmFsX2lkKGludCBpbmRleCk7CgovKiBUZXN0IGtlcm5lbCAqLwpfX2tlcm5lbCB2b2lkIHRlc3QoX19nbG9iYWwgZmxvYXQgKmluLCBfX2dsb2JhbCBmbG9hdCAqb3V0KQp7CiAgICBpbnQgaW5kZXggPSBnZXRfZ2xvYmFsX2lkKDApOwogICAgb3V0W2luZGV4XSA9IDMuMTQxNTlmICogaW5baW5kZXhdICsgaW5baW5kZXhdOwp9",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAqAQAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "openCL/matvec.ll",
			"settings":
			{
				"buffer_size": 1194,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"paste",
					null,
					"AgAAAJAAAAAAAAAAowAAAAAAAAAAAAAAowAAAAAAAACjAAAAAAAAABYAAABudnB0eC11bmtub3duLW52aWRpYWNs",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACmAAAAAAAAAJAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAqgQAAAAAAAAAAAAAqgQAAAAAAACqBAAAAAAAAGMKAAA7IE1vZHVsZUlEID0gJ21hdHZlYy5jbCcKc291cmNlX2ZpbGVuYW1lID0gIm1hdHZlYy5jbCIKdGFyZ2V0IGRhdGFsYXlvdXQgPSAiZS1wOjMyOjMyLWk2NDo2NC1pMTI4OjEyOC12MTY6MTYtdjMyOjMyLW4xNjozMjo2NCIKdGFyZ2V0IHRyaXBsZSA9ICJudnB0eDY0LW52aWRpYS1jdWRhIgoKOyBGdW5jdGlvbiBBdHRyczogYXJnbWVtb25seSBjb252ZXJnZW50IG11c3Rwcm9ncmVzcyBub2ZyZWUgbm9pbmxpbmUgbm9yZWN1cnNlIG5vdW53aW5kIHdpbGxyZXR1cm4KZGVmaW5lIGRzb19sb2NhbCBzcGlyX2tlcm5lbCB2b2lkIEBtYXR2ZWNfbXVsdChwdHIgYWRkcnNwYWNlKDEpIG5vY2FwdHVyZSBub3VuZGVmIHJlYWRvbmx5IGFsaWduIDE2ICUwLCBwdHIgYWRkcnNwYWNlKDEpIG5vY2FwdHVyZSBub3VuZGVmIHJlYWRvbmx5IGFsaWduIDE2ICUxLCBwdHIgYWRkcnNwYWNlKDEpIG5vY2FwdHVyZSBub3VuZGVmIHdyaXRlb25seSBhbGlnbiA0ICUyKSBsb2NhbF91bm5hbWVkX2FkZHIgIzAgIWtlcm5lbF9hcmdfYWRkcl9zcGFjZSAhNSAha2VybmVsX2FyZ19hY2Nlc3NfcXVhbCAhNiAha2VybmVsX2FyZ190eXBlICE3ICFrZXJuZWxfYXJnX2Jhc2VfdHlwZSAhOCAha2VybmVsX2FyZ190eXBlX3F1YWwgITkgewogICU0ID0gdGFpbCBjYWxsIGkzMiBAX1oxM2dldF9nbG9iYWxfaWRqKGkzMiBub3VuZGVmIDApICMyCiAgJTUgPSBnZXRlbGVtZW50cHRyIGluYm91bmRzIDw0IHggZmxvYXQ+LCBwdHIgYWRkcnNwYWNlKDEpICUwLCBpMzIgJTQKICAlNiA9IGxvYWQgPDQgeCBmbG9hdD4sIHB0ciBhZGRyc3BhY2UoMSkgJTUsIGFsaWduIDE2LCAhdGJhYSAhMTAKICAlNyA9IGxvYWQgPDQgeCBmbG9hdD4sIHB0ciBhZGRyc3BhY2UoMSkgJTEsIGFsaWduIDE2LCAhdGJhYSAhMTAKICAlOCA9IHRhaWwgY2FsbCBmbG9hdCBAX1ozZG90RHY0X2ZTXyg8NCB4IGZsb2F0PiBub3VuZGVmICU2LCA8NCB4IGZsb2F0PiBub3VuZGVmICU3KSAjMgogICU5ID0gZ2V0ZWxlbWVudHB0ciBpbmJvdW5kcyBmbG9hdCwgcHRyIGFkZHJzcGFjZSgxKSAlMiwgaTMyICU0CiAgc3RvcmUgZmxvYXQgJTgsIHB0ciBhZGRyc3BhY2UoMSkgJTksIGFsaWduIDQsICF0YmFhICExMwogIHJldCB2b2lkCn0KCjsgRnVuY3Rpb24gQXR0cnM6IGNvbnZlcmdlbnQgbXVzdHByb2dyZXNzIG5vZnJlZSBub3Vud2luZCByZWFkbm9uZSB3aWxscmV0dXJuCmRlY2xhcmUgZHNvX2xvY2FsIGkzMiBAX1oxM2dldF9nbG9iYWxfaWRqKGkzMiBub3VuZGVmKSBsb2NhbF91bm5hbWVkX2FkZHIgIzEKCjsgRnVuY3Rpb24gQXR0cnM6IGNvbnZlcmdlbnQgbXVzdHByb2dyZXNzIG5vZnJlZSBub3Vud2luZCByZWFkbm9uZSB3aWxscmV0dXJuCmRlY2xhcmUgZHNvX2xvY2FsIGZsb2F0IEBfWjNkb3REdjRfZlNfKDw0IHggZmxvYXQ+IG5vdW5kZWYsIDw0IHggZmxvYXQ+IG5vdW5kZWYpIGxvY2FsX3VubmFtZWRfYWRkciAjMQoKYXR0cmlidXRlcyAjMCA9IHsgYXJnbWVtb25seSBjb252ZXJnZW50IG11c3Rwcm9ncmVzcyBub2ZyZWUgbm9pbmxpbmUgbm9yZWN1cnNlIG5vdW53aW5kIHdpbGxyZXR1cm4gImZyYW1lLXBvaW50ZXIiPSJhbGwiICJtaW4tbGVnYWwtdmVjdG9yLXdpZHRoIj0iMTI4IiAibm8tdHJhcHBpbmctbWF0aCI9InRydWUiICJzdGFjay1wcm90ZWN0b3ItYnVmZmVyLXNpemUiPSI4IiAidGFyZ2V0LWZlYXR1cmVzIj0iK3B0eDc1LCtzbV8yMCIgInVuaWZvcm0td29yay1ncm91cC1zaXplIj0idHJ1ZSIgfQphdHRyaWJ1dGVzICMxID0geyBjb252ZXJnZW50IG11c3Rwcm9ncmVzcyBub2ZyZWUgbm91bndpbmQgcmVhZG5vbmUgd2lsbHJldHVybiAiZnJhbWUtcG9pbnRlciI9ImFsbCIgIm5vLXRyYXBwaW5nLW1hdGgiPSJ0cnVlIiAic3RhY2stcHJvdGVjdG9yLWJ1ZmZlci1zaXplIj0iOCIgInRhcmdldC1mZWF0dXJlcyI9IitwdHg3NSwrc21fMjAiIH0KYXR0cmlidXRlcyAjMiA9IHsgY29udmVyZ2VudCBub3Vud2luZCByZWFkbm9uZSB3aWxscmV0dXJuIH0KCiFudnZtLmFubm90YXRpb25zID0gIXshMH0KIWxsdm0ubW9kdWxlLmZsYWdzID0gIXshMSwgITJ9CiFvcGVuY2wub2NsLnZlcnNpb24gPSAheyEzfQohbGx2bS5pZGVudCA9ICF7ITR9CgohMCA9ICF7cHRyIEBtYXR2ZWNfbXVsdCwgISJrZXJuZWwiLCBpMzIgMX0KITEgPSAhe2kzMiAxLCAhIndjaGFyX3NpemUiLCBpMzIgNH0KITIgPSAhe2kzMiA3LCAhImZyYW1lLXBvaW50ZXIiLCBpMzIgMn0KITMgPSAhe2kzMiAxLCBpMzIgMn0KITQgPSAheyEiY2xhbmcgdmVyc2lvbiAxNS4wLjIifQohNSA9ICF7aTMyIDEsIGkzMiAxLCBpMzIgMX0KITYgPSAheyEibm9uZSIsICEibm9uZSIsICEibm9uZSJ9CiE3ID0gIXshImZsb2F0NCoiLCAhImZsb2F0NCoiLCAhImZsb2F0KiJ9CiE4ID0gIXshImZsb2F0IF9fYXR0cmlidXRlX18oKGV4dF92ZWN0b3JfdHlwZSg0KSkpKiIsICEiZmxvYXQgX19hdHRyaWJ1dGVfXygoZXh0X3ZlY3Rvcl90eXBlKDQpKSkqIiwgISJmbG9hdCoifQohOSA9ICF7ISIiLCAhIiIsICEiIn0KITEwID0gIXshMTEsICExMSwgaTY0IDB9CiExMSA9ICF7ISJvbW5pcG90ZW50IGNoYXIiLCAhMTIsIGk2NCAwfQohMTIgPSAheyEiU2ltcGxlIEMvQysrIFRCQUEifQohMTMgPSAheyExNCwgITE0LCBpNjQgMH0KITE0ID0gIXshImZsb2F0IiwgITExLCBpNjQgMH0K",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAGMKAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"contents": "This thread has had me curious about using GPU's for game development.\n\nI've worked on a top-down simulation game that uses OpenCL as the primary language for ingame logic.  So far it has lead to some interesting design challenges.  \n\n1. All OpenCL game logic code uses fixed-point numbers for determinism.  primarily to make the addition of numbers across all threads deterministic. The result of A = B + C is the same as A = C + B.\n\n2. All OpenCL game structures use pointer offsets integers instead of native pointers to keeping gamestate coherent for transfer across network and saving/loading to disk.\n\n3. The Transfers TO/FROM CPU<->GPU are minimized by issuing rendering calls on the CPU and altering OpenGL VBO's on the GPU (OpenGL shared graphics objects) The only need for communication back to the CPU is for sound effects and other metadata.\n\n4. For lockstep networking - commands are sent to the GPU and then processed there.\n\nI have been able to simulate 35k units with simple fixedpoint physics and collision detection at < 32fps all determistically in sync across the network.  With A* Pathfinding and such as well.\n\n\n\n\n\n\n\n\n\n",
			"file": "/C/Users/casht/Desktop/notes_on_game.txt",
			"file_size": 1128,
			"file_write_time": 133069601700849835,
			"settings":
			{
				"buffer_size": 1141,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					11,
					1,
					"insert_snippet",
					{
						"contents": "'${0:$SELECTION}'"
					},
					"AgAAAEkAAAAAAAAASQAAAAAAAAADAAAAIGFtSQAAAAAAAABOAAAAAAAAAAAAAAA",
					"FgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATAAAAAAAAABJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "ve"
					},
					"AwAAAEoAAAAAAAAASwAAAAAAAAAAAAAASwAAAAAAAABLAAAAAAAAAAMAAAAgYW1LAAAAAAAAAEwAAAAAAAAAAAAAAA",
					"FgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASgAAAAAAAABNAAAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "issuing"
					},
					"BwAAAJYCAAAAAAAAlwIAAAAAAAAAAAAAlwIAAAAAAACYAgAAAAAAAAAAAACYAgAAAAAAAJkCAAAAAAAAAAAAAJkCAAAAAAAAmgIAAAAAAAAAAAAAmgIAAAAAAACbAgAAAAAAAAAAAACbAgAAAAAAAJwCAAAAAAAAAAAAAJwCAAAAAAAAnQIAAAAAAAAAAAAA",
					"FgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlgIAAAAAAACWAgAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJ0CAAAAAAAAngIAAAAAAAAAAAAA",
					"FgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnQIAAAAAAACdAgAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": " calls"
					},
					"BgAAAKcCAAAAAAAAqAIAAAAAAAAAAAAAqAIAAAAAAACpAgAAAAAAAAAAAACpAgAAAAAAAKoCAAAAAAAAAAAAAKoCAAAAAAAAqwIAAAAAAAAAAAAAqwIAAAAAAACsAgAAAAAAAAAAAACsAgAAAAAAAK0CAAAAAAAAAAAAAA",
					"FgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApwIAAAAAAACnAgAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"left_delete",
					null,
					"AQAAAEwAAAAAAAAATAAAAAAAAAABAAAAJw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNAAAAAAAAAEwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					3,
					"left_delete",
					null,
					"AwAAAFMAAAAAAAAAUwAAAAAAAAABAAAAZ1IAAAAAAAAAUgAAAAAAAAABAAAAblEAAAAAAAAAUQAAAAAAAAABAAAAaQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABUAAAAAAAAAFQAAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "ed"
					},
					"AgAAAFEAAAAAAAAAUgAAAAAAAAAAAAAAUgAAAAAAAABTAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABRAAAAAAAAAFEAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"contents": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n",
			"file": "/C/Users/casht/Desktop/TESTFOLDER/BeetTweek-Firmware/LICENSE",
			"file_size": 35823,
			"file_write_time": 132754365147244366,
			"settings":
			{
				"buffer_size": 35149,
				"line_ending": "Windows"
			}
		},
		{
			"file": "openCL/dynamicDefines.h",
			"settings":
			{
				"buffer_size": 288,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAgAQAAI2RlZmluZSBQRUVQX1ZCT19JTlNUQU5DRV9TSVpFICgyNCkKI2RlZmluZSBQQVJUSUNMRV9WQk9fSU5TVEFOQ0VfU0laRSAoMjQpCiNkZWZpbmUgTUFYX1BFRVBTICgzMjc2OCkKI2RlZmluZSBNQVhfUEFSVElDTEVTICgxMDI0KQojZGVmaW5lIE1BUERJTSAoMjU2KQojZGVmaW5lIE1BUERFUFRIICgzMikKI2RlZmluZSBXQVJQU0laRSAoMzIpCiNkZWZpbmUgR0FNRV9VUERBVEVfV09SS0lURU1TICgxMzEwNzIpCiNkZWZpbmUgTUFYX0NMSUVOVFMgKDEwMjQpCiNkZWZpbmUgTUFQX1RJTEVfU0laRSAoNSkKAAAAAAAAAAAgAQAAAAAAAAAAAAA",
					"FQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACABAAAAAAAAIAEAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAgAQAAI2RlZmluZSBQRUVQX1ZCT19JTlNUQU5DRV9TSVpFICgyNCkKI2RlZmluZSBQQVJUSUNMRV9WQk9fSU5TVEFOQ0VfU0laRSAoMjQpCiNkZWZpbmUgTUFYX1BFRVBTICgzMjc2OCkKI2RlZmluZSBNQVhfUEFSVElDTEVTICgxMDI0KQojZGVmaW5lIE1BUERJTSAoMjU2KQojZGVmaW5lIE1BUERFUFRIICgzMikKI2RlZmluZSBXQVJQU0laRSAoMzIpCiNkZWZpbmUgR0FNRV9VUERBVEVfV09SS0lURU1TICgxMzEwNzIpCiNkZWZpbmUgTUFYX0NMSUVOVFMgKDEwMjQpCiNkZWZpbmUgTUFQX1RJTEVfU0laRSAoNSkKAAAAAAAAAAAgAQAAAAAAAAAAAAA",
					"FQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACABAAAAAAAAIAEAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"revert",
					null,
					"CAAAAAAAAAAAAAAAAAAAAAAAAAAgAQAAI2RlZmluZSBQRUVQX1ZCT19JTlNUQU5DRV9TSVpFICgyNCkKI2RlZmluZSBQQVJUSUNMRV9WQk9fSU5TVEFOQ0VfU0laRSAoMjQpCiNkZWZpbmUgTUFYX1BFRVBTICgzMjc2OCkKI2RlZmluZSBNQVhfUEFSVElDTEVTICgxMDI0KQojZGVmaW5lIE1BUERJTSAoMjU2KQojZGVmaW5lIE1BUERFUFRIICgzMikKI2RlZmluZSBXQVJQU0laRSAoMzIpCiNkZWZpbmUgR0FNRV9VUERBVEVfV09SS0lURU1TICgxMzEwNzIpCiNkZWZpbmUgTUFYX0NMSUVOVFMgKDEwMjQpCiNkZWZpbmUgTUFQX1RJTEVfU0laRSAoNSkKAAAAAAAAAAAgAQAAAAAAAAAAAAAAAAAAAAAAACABAAAAAAAAAAAAAAAAAAAAAAAAIAEAAAAAAAAAAAAAAAAAAAAAAAAgAQAAAAAAAAAAAAAAAAAAAAAAACABAAAAAAAAAAAAAAAAAAAAAAAAIAEAAAAAAAAAAAAAAAAAAAAAAAAgAQAAAAAAAAAAAAA",
					"FQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACABAAAAAAAAIAEAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAgAQAAI2RlZmluZSBQRUVQX1ZCT19JTlNUQU5DRV9TSVpFICgyNCkKI2RlZmluZSBQQVJUSUNMRV9WQk9fSU5TVEFOQ0VfU0laRSAoMjQpCiNkZWZpbmUgTUFYX1BFRVBTICgzMjc2OCkKI2RlZmluZSBNQVhfUEFSVElDTEVTICgxMDI0KQojZGVmaW5lIE1BUERJTSAoMjU2KQojZGVmaW5lIE1BUERFUFRIICgzMikKI2RlZmluZSBXQVJQU0laRSAoMzIpCiNkZWZpbmUgR0FNRV9VUERBVEVfV09SS0lURU1TICgxMzEwNzIpCiNkZWZpbmUgTUFYX0NMSUVOVFMgKDEwMjQpCiNkZWZpbmUgTUFQX1RJTEVfU0laRSAoNSkKAAAAAAAAAAAgAQAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACABAAAAAAAAIAEAAAAAAAAAAAAAAADwvw"
				],
				[
					2,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAgAQAAI2RlZmluZSBQRUVQX1ZCT19JTlNUQU5DRV9TSVpFICgyNCkKI2RlZmluZSBQQVJUSUNMRV9WQk9fSU5TVEFOQ0VfU0laRSAoMjQpCiNkZWZpbmUgTUFYX1BFRVBTICgzMjc2OCkKI2RlZmluZSBNQVhfUEFSVElDTEVTICgxMDI0KQojZGVmaW5lIE1BUERJTSAoMjU2KQojZGVmaW5lIE1BUERFUFRIICgzMikKI2RlZmluZSBXQVJQU0laRSAoMzIpCiNkZWZpbmUgR0FNRV9VUERBVEVfV09SS0lURU1TICgxMzEwNzIpCiNkZWZpbmUgTUFYX0NMSUVOVFMgKDEwMjQpCiNkZWZpbmUgTUFQX1RJTEVfU0laRSAoNSkKAAAAAAAAAAAgAQAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACABAAAAAAAAIAEAAAAAAAAAAAAAAADwvw"
				],
				[
					3,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAgAQAAI2RlZmluZSBQRUVQX1ZCT19JTlNUQU5DRV9TSVpFICgyNCkKI2RlZmluZSBQQVJUSUNMRV9WQk9fSU5TVEFOQ0VfU0laRSAoMjQpCiNkZWZpbmUgTUFYX1BFRVBTICgzMjc2OCkKI2RlZmluZSBNQVhfUEFSVElDTEVTICgxMDI0KQojZGVmaW5lIE1BUERJTSAoMjU2KQojZGVmaW5lIE1BUERFUFRIICgzMikKI2RlZmluZSBXQVJQU0laRSAoMzIpCiNkZWZpbmUgR0FNRV9VUERBVEVfV09SS0lURU1TICgxMzEwNzIpCiNkZWZpbmUgTUFYX0NMSUVOVFMgKDEwMjQpCiNkZWZpbmUgTUFQX1RJTEVfU0laRSAoNSkKAAAAAAAAAAAgAQAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACABAAAAAAAAIAEAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAgAQAAI2RlZmluZSBQRUVQX1ZCT19JTlNUQU5DRV9TSVpFICgyNCkKI2RlZmluZSBQQVJUSUNMRV9WQk9fSU5TVEFOQ0VfU0laRSAoMjQpCiNkZWZpbmUgTUFYX1BFRVBTICgzMjc2OCkKI2RlZmluZSBNQVhfUEFSVElDTEVTICgxMDI0KQojZGVmaW5lIE1BUERJTSAoMjU2KQojZGVmaW5lIE1BUERFUFRIICgzMikKI2RlZmluZSBXQVJQU0laRSAoMzIpCiNkZWZpbmUgR0FNRV9VUERBVEVfV09SS0lURU1TICgxMzEwNzIpCiNkZWZpbmUgTUFYX0NMSUVOVFMgKDEwMjQpCiNkZWZpbmUgTUFQX1RJTEVfU0laRSAoNSkKAAAAAAAAAAAgAQAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACABAAAAAAAAIAEAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAAAgAQAAI2RlZmluZSBQRUVQX1ZCT19JTlNUQU5DRV9TSVpFICgyNCkKI2RlZmluZSBQQVJUSUNMRV9WQk9fSU5TVEFOQ0VfU0laRSAoMjQpCiNkZWZpbmUgTUFYX1BFRVBTICgzMjc2OCkKI2RlZmluZSBNQVhfUEFSVElDTEVTICgxMDI0KQojZGVmaW5lIE1BUERJTSAoMjU2KQojZGVmaW5lIE1BUERFUFRIICgzMikKI2RlZmluZSBXQVJQU0laRSAoMzIpCiNkZWZpbmUgR0FNRV9VUERBVEVfV09SS0lURU1TICgxMzEwNzIpCiNkZWZpbmUgTUFYX0NMSUVOVFMgKDEwMjQpCiNkZWZpbmUgTUFQX1RJTEVfU0laRSAoNSkKAAAAAAAAAAAgAQAAAAAAAAAAAAAAAAAAAAAAACABAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACABAAAAAAAAIAEAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAAAgAQAAI2RlZmluZSBQRUVQX1ZCT19JTlNUQU5DRV9TSVpFICgyNCkKI2RlZmluZSBQQVJUSUNMRV9WQk9fSU5TVEFOQ0VfU0laRSAoMjQpCiNkZWZpbmUgTUFYX1BFRVBTICgzMjc2OCkKI2RlZmluZSBNQVhfUEFSVElDTEVTICgxMDI0KQojZGVmaW5lIE1BUERJTSAoMjU2KQojZGVmaW5lIE1BUERFUFRIICgzMikKI2RlZmluZSBXQVJQU0laRSAoMzIpCiNkZWZpbmUgR0FNRV9VUERBVEVfV09SS0lURU1TICgxMzEwNzIpCiNkZWZpbmUgTUFYX0NMSUVOVFMgKDEwMjQpCiNkZWZpbmUgTUFQX1RJTEVfU0laRSAoNSkKAAAAAAAAAAAgAQAAAAAAAAAAAAAAAAAAAAAAACABAAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgAQAAAAAAACABAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"revert",
					null,
					"CQAAAAAAAAAAAAAAAAAAAAAAAAAgAQAAI2RlZmluZSBQRUVQX1ZCT19JTlNUQU5DRV9TSVpFICgyNCkKI2RlZmluZSBQQVJUSUNMRV9WQk9fSU5TVEFOQ0VfU0laRSAoMjQpCiNkZWZpbmUgTUFYX1BFRVBTICgzMjc2OCkKI2RlZmluZSBNQVhfUEFSVElDTEVTICgxMDI0KQojZGVmaW5lIE1BUERJTSAoMjU2KQojZGVmaW5lIE1BUERFUFRIICgzMikKI2RlZmluZSBXQVJQU0laRSAoMzIpCiNkZWZpbmUgR0FNRV9VUERBVEVfV09SS0lURU1TICgxMzEwNzIpCiNkZWZpbmUgTUFYX0NMSUVOVFMgKDEwMjQpCiNkZWZpbmUgTUFQX1RJTEVfU0laRSAoNSkKAAAAAAAAAAAgAQAAAAAAAAAAAAAAAAAAAAAAACABAAAAAAAAAAAAAAAAAAAAAAAAIAEAAAAAAAAAAAAAAAAAAAAAAAAgAQAAAAAAAAAAAAAAAAAAAAAAACABAAAAAAAAAAAAAAAAAAAAAAAAIAEAAAAAAAAAAAAAAAAAAAAAAAAgAQAAAAAAAAAAAAAAAAAAAAAAACABAAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIAEAAAAAAAAgAQAAAAAAAAAAAAAAAPC/"
				],
				[
					1,
					1,
					"revert",
					null,
					"BwAAAAAAAAAAAAAAAAAAAAAAAAAgAQAAI2RlZmluZSBQRUVQX1ZCT19JTlNUQU5DRV9TSVpFICgyNCkKI2RlZmluZSBQQVJUSUNMRV9WQk9fSU5TVEFOQ0VfU0laRSAoMjQpCiNkZWZpbmUgTUFYX1BFRVBTICgzMjc2OCkKI2RlZmluZSBNQVhfUEFSVElDTEVTICgxMDI0KQojZGVmaW5lIE1BUERJTSAoMjU2KQojZGVmaW5lIE1BUERFUFRIICgzMikKI2RlZmluZSBXQVJQU0laRSAoMzIpCiNkZWZpbmUgR0FNRV9VUERBVEVfV09SS0lURU1TICgxMzEwNzIpCiNkZWZpbmUgTUFYX0NMSUVOVFMgKDEwMjQpCiNkZWZpbmUgTUFQX1RJTEVfU0laRSAoNSkKAAAAAAAAAAAgAQAAAAAAAAAAAAAAAAAAAAAAACABAAAAAAAAAAAAAAAAAAAAAAAAIAEAAAAAAAAAAAAAAAAAAAAAAAAgAQAAAAAAAAAAAAAAAAAAAAAAACABAAAAAAAAAAAAAAAAAAAAAAAAIAEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACABAAAAAAAAIAEAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"contents": "X = [A,B]\nY = [C,D]\nAB * CD = (A*C << 16) + (((B*C + A*D) << 8) + B*D)\n16   16    16              16    16           16\n   32          32             32             \n                                 32\n                        32\n\n32Bit Mult\nNO CARRY BITS.. DOES NOT WORK",
			"settings":
			{
				"buffer_size": 270,
				"line_ending": "Windows",
				"name": "X = [A,B]"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAGgAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAMQAAAAAAAAAAAAAAMQAAAAAAAAAxAAAAAAAAABoAAAAgKChCKkMgKyBBKkQpIDw8IDE2KSArIEIqRA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGgAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "8"
					},
					"AgAAACgAAAAAAAAAKQAAAAAAAAAAAAAAKQAAAAAAAAApAAAAAAAAAAIAAAAxNg",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKAAAAAAAAAAqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "16"
					},
					"AwAAABIAAAAAAAAAEwAAAAAAAAAAAAAAEwAAAAAAAAATAAAAAAAAAAIAAAAzMhMAAAAAAAAAFAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEgAAAAAAAAAUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAABgAAAAAAAAAGQAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGAAAAAAAAAAYAAAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAADEAAAAAAAAAMgAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMQAAAAAAAAAxAAAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "\n\n\n\n\n"
					},
					"BQAAADIAAAAAAAAAMwAAAAAAAAAAAAAAMwAAAAAAAAA0AAAAAAAAAAAAAAA0AAAAAAAAADUAAAAAAAAAAAAAADUAAAAAAAAANgAAAAAAAAAAAAAANgAAAAAAAAA3AAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMgAAAAAAAAAyAAAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "16"
					},
					"AgAAADMAAAAAAAAANAAAAAAAAAAAAAAANAAAAAAAAAA1AAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMwAAAAAAAAAzAAAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "   16"
					},
					"BQAAADUAAAAAAAAANgAAAAAAAAAAAAAANgAAAAAAAAA3AAAAAAAAAAAAAAA3AAAAAAAAADgAAAAAAAAAAAAAADgAAAAAAAAAOQAAAAAAAAAAAAAAOQAAAAAAAAA6AAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANQAAAAAAAAA1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "    16"
					},
					"BgAAADoAAAAAAAAAOwAAAAAAAAAAAAAAOwAAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAAAD0AAAAAAAAAAAAAAD0AAAAAAAAAPgAAAAAAAAAAAAAAPgAAAAAAAAA/AAAAAAAAAAAAAAA/AAAAAAAAAEAAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOgAAAAAAAAA6AAAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "         "
					},
					"CQAAAEAAAAAAAAAAQQAAAAAAAAAAAAAAQQAAAAAAAABCAAAAAAAAAAAAAABCAAAAAAAAAEMAAAAAAAAAAAAAAEMAAAAAAAAARAAAAAAAAAAAAAAARAAAAAAAAABFAAAAAAAAAAAAAABFAAAAAAAAAEYAAAAAAAAAAAAAAEYAAAAAAAAARwAAAAAAAAAAAAAARwAAAAAAAABIAAAAAAAAAAAAAABIAAAAAAAAAEkAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "     16"
					},
					"BwAAAEkAAAAAAAAASgAAAAAAAAAAAAAASgAAAAAAAABLAAAAAAAAAAAAAABLAAAAAAAAAEwAAAAAAAAAAAAAAEwAAAAAAAAATQAAAAAAAAAAAAAATQAAAAAAAABOAAAAAAAAAAAAAABOAAAAAAAAAE8AAAAAAAAAAAAAAE8AAAAAAAAAUAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASQAAAAAAAABJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "     16"
					},
					"BwAAAFAAAAAAAAAAUQAAAAAAAAAAAAAAUQAAAAAAAABSAAAAAAAAAAAAAABSAAAAAAAAAFMAAAAAAAAAAAAAAFMAAAAAAAAAVAAAAAAAAAAAAAAAVAAAAAAAAABVAAAAAAAAAAAAAABVAAAAAAAAAFYAAAAAAAAAAAAAAFYAAAAAAAAAVwAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUAAAAAAAAABQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": "          1"
					},
					"CwAAAFcAAAAAAAAAWAAAAAAAAAAAAAAAWAAAAAAAAABZAAAAAAAAAAAAAABZAAAAAAAAAFoAAAAAAAAAAAAAAFoAAAAAAAAAWwAAAAAAAAAAAAAAWwAAAAAAAABcAAAAAAAAAAAAAABcAAAAAAAAAF0AAAAAAAAAAAAAAF0AAAAAAAAAXgAAAAAAAAAAAAAAXgAAAAAAAABfAAAAAAAAAAAAAABfAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAYQAAAAAAAAAAAAAAYQAAAAAAAABiAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVwAAAAAAAABXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "6"
					},
					"AQAAAGIAAAAAAAAAYwAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYgAAAAAAAABiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "   "
					},
					"AwAAAGQAAAAAAAAAZQAAAAAAAAAAAAAAZQAAAAAAAABmAAAAAAAAAAAAAABmAAAAAAAAAGcAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZAAAAAAAAABkAAAAAAAAAAAAAAAAUH9A"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "32"
					},
					"AgAAAGcAAAAAAAAAaAAAAAAAAAAAAAAAaAAAAAAAAABpAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZwAAAAAAAABnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "         "
					},
					"CQAAAGkAAAAAAAAAagAAAAAAAAAAAAAAagAAAAAAAABrAAAAAAAAAAAAAABrAAAAAAAAAGwAAAAAAAAAAAAAAGwAAAAAAAAAbQAAAAAAAAAAAAAAbQAAAAAAAABuAAAAAAAAAAAAAABuAAAAAAAAAG8AAAAAAAAAAAAAAG8AAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAAABxAAAAAAAAAAAAAABxAAAAAAAAAHIAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaQAAAAAAAABpAAAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": " 23"
					},
					"AwAAAHIAAAAAAAAAcwAAAAAAAAAAAAAAcwAAAAAAAAB0AAAAAAAAAAAAAAB0AAAAAAAAAHUAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcgAAAAAAAAByAAAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					2,
					"left_delete",
					null,
					"AgAAAHQAAAAAAAAAdAAAAAAAAAABAAAAM3MAAAAAAAAAcwAAAAAAAAABAAAAMg",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdQAAAAAAAAB1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": "32"
					},
					"AgAAAHMAAAAAAAAAdAAAAAAAAAAAAAAAdAAAAAAAAAB1AAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcwAAAAAAAABzAAAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "             "
					},
					"DQAAAHUAAAAAAAAAdgAAAAAAAAAAAAAAdgAAAAAAAAB3AAAAAAAAAAAAAAB3AAAAAAAAAHgAAAAAAAAAAAAAAHgAAAAAAAAAeQAAAAAAAAAAAAAAeQAAAAAAAAB6AAAAAAAAAAAAAAB6AAAAAAAAAHsAAAAAAAAAAAAAAHsAAAAAAAAAfAAAAAAAAAAAAAAAfAAAAAAAAAB9AAAAAAAAAAAAAAB9AAAAAAAAAH4AAAAAAAAAAAAAAH4AAAAAAAAAfwAAAAAAAAAAAAAAfwAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAIEAAAAAAAAAAAAAAIEAAAAAAAAAggAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdQAAAAAAAAB1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": " 32"
					},
					"AwAAAIIAAAAAAAAAgwAAAAAAAAAAAAAAgwAAAAAAAACEAAAAAAAAAAAAAACEAAAAAAAAAIUAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAggAAAAAAAACCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAIUAAAAAAAAAhgAAAAAAAAAAAAAAhgAAAAAAAACHAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhQAAAAAAAACFAAAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": "    "
					},
					"BAAAAIcAAAAAAAAAiAAAAAAAAAAAAAAAiAAAAAAAAACJAAAAAAAAAAAAAACJAAAAAAAAAIoAAAAAAAAAAAAAAIoAAAAAAAAAiwAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhwAAAAAAAACHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAIsAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACNAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiwAAAAAAAACLAAAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "     "
					},
					"BQAAAI0AAAAAAAAAjgAAAAAAAAAAAAAAjgAAAAAAAACPAAAAAAAAAAAAAACPAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAkQAAAAAAAAAAAAAAkQAAAAAAAACSAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjQAAAAAAAACNAAAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": "                                    "
					},
					"JAAAAJMAAAAAAAAAlAAAAAAAAAAAAAAAlAAAAAAAAACVAAAAAAAAAAAAAACVAAAAAAAAAJYAAAAAAAAAAAAAAJYAAAAAAAAAlwAAAAAAAAAAAAAAlwAAAAAAAACYAAAAAAAAAAAAAACYAAAAAAAAAJkAAAAAAAAAAAAAAJkAAAAAAAAAmgAAAAAAAAAAAAAAmgAAAAAAAACbAAAAAAAAAAAAAACbAAAAAAAAAJwAAAAAAAAAAAAAAJwAAAAAAAAAnQAAAAAAAAAAAAAAnQAAAAAAAACeAAAAAAAAAAAAAACeAAAAAAAAAJ8AAAAAAAAAAAAAAJ8AAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAAChAAAAAAAAAAAAAAChAAAAAAAAAKIAAAAAAAAAAAAAAKIAAAAAAAAAowAAAAAAAAAAAAAAowAAAAAAAACkAAAAAAAAAAAAAACkAAAAAAAAAKUAAAAAAAAAAAAAAKUAAAAAAAAApgAAAAAAAAAAAAAApgAAAAAAAACnAAAAAAAAAAAAAACnAAAAAAAAAKgAAAAAAAAAAAAAAKgAAAAAAAAAqQAAAAAAAAAAAAAAqQAAAAAAAACqAAAAAAAAAAAAAACqAAAAAAAAAKsAAAAAAAAAAAAAAKsAAAAAAAAArAAAAAAAAAAAAAAArAAAAAAAAACtAAAAAAAAAAAAAACtAAAAAAAAAK4AAAAAAAAAAAAAAK4AAAAAAAAArwAAAAAAAAAAAAAArwAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAALEAAAAAAAAAAAAAALEAAAAAAAAAsgAAAAAAAAAAAAAAsgAAAAAAAACzAAAAAAAAAAAAAACzAAAAAAAAALQAAAAAAAAAAAAAALQAAAAAAAAAtQAAAAAAAAAAAAAAtQAAAAAAAAC2AAAAAAAAAAAAAAC2AAAAAAAAALcAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkwAAAAAAAACTAAAAAAAAAAAAAAAAEH5A"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "32"
					},
					"AgAAALcAAAAAAAAAuAAAAAAAAAAAAAAAuAAAAAAAAAC5AAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtwAAAAAAAAC3AAAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "                          "
					},
					"GgAAALoAAAAAAAAAuwAAAAAAAAAAAAAAuwAAAAAAAAC8AAAAAAAAAAAAAAC8AAAAAAAAAL0AAAAAAAAAAAAAAL0AAAAAAAAAvgAAAAAAAAAAAAAAvgAAAAAAAAC/AAAAAAAAAAAAAAC/AAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAAAwQAAAAAAAAAAAAAAwQAAAAAAAADCAAAAAAAAAAAAAADCAAAAAAAAAMMAAAAAAAAAAAAAAMMAAAAAAAAAxAAAAAAAAAAAAAAAxAAAAAAAAADFAAAAAAAAAAAAAADFAAAAAAAAAMYAAAAAAAAAAAAAAMYAAAAAAAAAxwAAAAAAAAAAAAAAxwAAAAAAAADIAAAAAAAAAAAAAADIAAAAAAAAAMkAAAAAAAAAAAAAAMkAAAAAAAAAygAAAAAAAAAAAAAAygAAAAAAAADLAAAAAAAAAAAAAADLAAAAAAAAAMwAAAAAAAAAAAAAAMwAAAAAAAAAzQAAAAAAAAAAAAAAzQAAAAAAAADOAAAAAAAAAAAAAADOAAAAAAAAAM8AAAAAAAAAAAAAAM8AAAAAAAAA0AAAAAAAAAAAAAAA0AAAAAAAAADRAAAAAAAAAAAAAADRAAAAAAAAANIAAAAAAAAAAAAAANIAAAAAAAAA0wAAAAAAAAAAAAAA0wAAAAAAAADUAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAugAAAAAAAAC6AAAAAAAAAAAAAAAAwGxA"
				],
				[
					90,
					1,
					"left_delete",
					null,
					"AQAAANIAAAAAAAAA0gAAAAAAAAACAAAAICA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1AAAAAAAAADUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "32"
					},
					"AgAAANIAAAAAAAAA0wAAAAAAAAAAAAAA0wAAAAAAAADUAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0gAAAAAAAADSAAAAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAH4AAAAAAAAAgAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfgAAAAAAAAB+AAAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"left_delete",
					null,
					"AQAAAH8AAAAAAAAAfwAAAAAAAAABAAAAKQ",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAIcAAAAAAAAAiAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhwAAAAAAAACHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"left_delete",
					null,
					"AQAAAIcAAAAAAAAAhwAAAAAAAAABAAAAKQ",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiAAAAAAAAACIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					1,
					"left_delete",
					null,
					"AQAAAH4AAAAAAAAAfgAAAAAAAAABAAAAKA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfwAAAAAAAAB/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"left_delete",
					null,
					"AQAAAFQAAAAAAAAAVAAAAAAAAAABAAAAIA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVQAAAAAAAABVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					130,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAGAAAAAAAAAAYQAAAAAAAAAAAAAAYQAAAAAAAABiAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYAAAAAAAAABgAAAAAAAAAAAAAAAAAPC/"
				],
				[
					131,
					1,
					"left_delete",
					null,
					"AQAAAGEAAAAAAAAAYQAAAAAAAAABAAAAIA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYgAAAAAAAABiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					135,
					1,
					"left_delete",
					null,
					"AQAAAIIAAAAAAAAAggAAAAAAAAABAAAAIA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgwAAAAAAAACDAAAAAAAAAAAAAAAAAPC/"
				],
				[
					138,
					2,
					"left_delete",
					null,
					"AgAAALIAAAAAAAAAsgAAAAAAAAAEAAAAICAgIK4AAAAAAAAArgAAAAAAAAAEAAAAICAgIA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtgAAAAAAAAC2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": "     "
					},
					"BQAAAK4AAAAAAAAArwAAAAAAAAAAAAAArwAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAALEAAAAAAAAAAAAAALEAAAAAAAAAsgAAAAAAAAAAAAAAsgAAAAAAAACzAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArgAAAAAAAACuAAAAAAAAAAAAAAAAAPC/"
				],
				[
					158,
					1,
					"insert",
					{
						"characters": "\nNO"
					},
					"AwAAANEAAAAAAAAA0gAAAAAAAAAAAAAA0gAAAAAAAADTAAAAAAAAAAAAAADTAAAAAAAAANQAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0QAAAAAAAADRAAAAAAAAAAAAAAAAAPC/"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": " CARRY"
					},
					"BgAAANQAAAAAAAAA1QAAAAAAAAAAAAAA1QAAAAAAAADWAAAAAAAAAAAAAADWAAAAAAAAANcAAAAAAAAAAAAAANcAAAAAAAAA2AAAAAAAAAAAAAAA2AAAAAAAAADZAAAAAAAAAAAAAADZAAAAAAAAANoAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1AAAAAAAAADUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					160,
					1,
					"insert",
					{
						"characters": " -"
					},
					"AgAAANoAAAAAAAAA2wAAAAAAAAAAAAAA2wAAAAAAAADcAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2gAAAAAAAADaAAAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": " DNW"
					},
					"BAAAANwAAAAAAAAA3QAAAAAAAAAAAAAA3QAAAAAAAADeAAAAAAAAAAAAAADeAAAAAAAAAN8AAAAAAAAAAAAAAN8AAAAAAAAA4AAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3AAAAAAAAADcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					6,
					"left_delete",
					null,
					"BgAAAN8AAAAAAAAA3wAAAAAAAAABAAAAV94AAAAAAAAA3gAAAAAAAAABAAAATt0AAAAAAAAA3QAAAAAAAAABAAAARNwAAAAAAAAA3AAAAAAAAAABAAAAINsAAAAAAAAA2wAAAAAAAAABAAAALdoAAAAAAAAA2gAAAAAAAAABAAAAIA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4AAAAAAAAADgAAAAAAAAAAAAAAAAAPC/"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": ".."
					},
					"AgAAANoAAAAAAAAA2wAAAAAAAAAAAAAA2wAAAAAAAADcAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2gAAAAAAAADaAAAAAAAAAAAAAAAAAPC/"
				],
				[
					164,
					1,
					"insert",
					{
						"characters": " DOES"
					},
					"BQAAANwAAAAAAAAA3QAAAAAAAAAAAAAA3QAAAAAAAADeAAAAAAAAAAAAAADeAAAAAAAAAN8AAAAAAAAAAAAAAN8AAAAAAAAA4AAAAAAAAAAAAAAA4AAAAAAAAADhAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3AAAAAAAAADcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": " NOT"
					},
					"BAAAAOEAAAAAAAAA4gAAAAAAAAAAAAAA4gAAAAAAAADjAAAAAAAAAAAAAADjAAAAAAAAAOQAAAAAAAAAAAAAAOQAAAAAAAAA5QAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4QAAAAAAAADhAAAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": " WORK"
					},
					"BQAAAOUAAAAAAAAA5gAAAAAAAAAAAAAA5gAAAAAAAADnAAAAAAAAAAAAAADnAAAAAAAAAOgAAAAAAAAAAAAAAOgAAAAAAAAA6QAAAAAAAAAAAAAA6QAAAAAAAADqAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5QAAAAAAAADlAAAAAAAAAAAAAAAAAPC/"
				],
				[
					170,
					1,
					"insert",
					{
						"characters": " BITS"
					},
					"BQAAANoAAAAAAAAA2wAAAAAAAAAAAAAA2wAAAAAAAADcAAAAAAAAAAAAAADcAAAAAAAAAN0AAAAAAAAAAAAAAN0AAAAAAAAA3gAAAAAAAAAAAAAA3gAAAAAAAADfAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2gAAAAAAAADaAAAAAAAAAAAAAAAAAPC/"
				],
				[
					175,
					1,
					"insert",
					{
						"characters": "\n32Bit"
					},
					"BgAAANEAAAAAAAAA0gAAAAAAAAAAAAAA0gAAAAAAAADTAAAAAAAAAAAAAADTAAAAAAAAANQAAAAAAAAAAAAAANQAAAAAAAAA1QAAAAAAAAAAAAAA1QAAAAAAAADWAAAAAAAAAAAAAADWAAAAAAAAANcAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0QAAAAAAAADRAAAAAAAAAAAAAAAAAPC/"
				],
				[
					176,
					1,
					"insert",
					{
						"characters": " Add"
					},
					"BAAAANcAAAAAAAAA2AAAAAAAAAAAAAAA2AAAAAAAAADZAAAAAAAAAAAAAADZAAAAAAAAANoAAAAAAAAAAAAAANoAAAAAAAAA2wAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1wAAAAAAAADXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					177,
					3,
					"left_delete",
					null,
					"AwAAANoAAAAAAAAA2gAAAAAAAAABAAAAZNkAAAAAAAAA2QAAAAAAAAABAAAAZNgAAAAAAAAA2AAAAAAAAAABAAAAQQ",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2wAAAAAAAADbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": "Mult"
					},
					"BAAAANgAAAAAAAAA2QAAAAAAAAAAAAAA2QAAAAAAAADaAAAAAAAAAAAAAADaAAAAAAAAANsAAAAAAAAAAAAAANsAAAAAAAAA3AAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2AAAAAAAAADYAAAAAAAAAAAAAAAAAPC/"
				],
				[
					180,
					2,
					"left_delete",
					null,
					"AgAAANMAAAAAAAAA0wAAAAAAAAABAAAAMtIAAAAAAAAA0gAAAAAAAAABAAAAMw",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1AAAAAAAAADUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": "32"
					},
					"AgAAANIAAAAAAAAA0wAAAAAAAAAAAAAA0wAAAAAAAADUAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0gAAAAAAAADSAAAAAAAAAAAAAAAAAPC/"
				],
				[
					195,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					197,
					1,
					"insert",
					{
						"characters": "A"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					198,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAQQ",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAPC/"
				],
				[
					199,
					1,
					"insert",
					{
						"characters": "C"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					200,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAQw",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAPC/"
				],
				[
					201,
					1,
					"insert",
					{
						"characters": "X"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					202,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAAEAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAADAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAPC/"
				],
				[
					203,
					1,
					"insert",
					{
						"characters": " A"
					},
					"AgAAAAMAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAFAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAwAAAAAAAAADAAAAAAAAAAAAAAAAAPC/"
				],
				[
					204,
					1,
					"insert",
					{
						"characters": " Concat"
					},
					"BwAAAAUAAAAAAAAABgAAAAAAAAAAAAAABgAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACQAAAAAAAAAAAAAACQAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAAsAAAAAAAAAAAAAAAsAAAAAAAAADAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABQAAAAAAAAAFAAAAAAAAAAAAAAAAAPC/"
				],
				[
					205,
					1,
					"insert",
					{
						"characters": " B"
					},
					"AgAAAAwAAAAAAAAADQAAAAAAAAAAAAAADQAAAAAAAAAOAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADAAAAAAAAAAMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					206,
					1,
					"insert",
					{
						"characters": "\nY"
					},
					"AgAAAA4AAAAAAAAADwAAAAAAAAAAAAAADwAAAAAAAAAQAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADgAAAAAAAAAOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					207,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAABAAAAAAAAAAEQAAAAAAAAAAAAAAEQAAAAAAAAASAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					208,
					1,
					"insert",
					{
						"characters": " C"
					},
					"AgAAABIAAAAAAAAAEwAAAAAAAAAAAAAAEwAAAAAAAAAUAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEgAAAAAAAAASAAAAAAAAAAAAAAAAAPC/"
				],
				[
					209,
					1,
					"insert",
					{
						"characters": " Concat"
					},
					"BwAAABQAAAAAAAAAFQAAAAAAAAAAAAAAFQAAAAAAAAAWAAAAAAAAAAAAAAAWAAAAAAAAABcAAAAAAAAAAAAAABcAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAZAAAAAAAAAAAAAAAZAAAAAAAAABoAAAAAAAAAAAAAABoAAAAAAAAAGwAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFAAAAAAAAAAUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					210,
					8,
					"left_delete",
					null,
					"CAAAABoAAAAAAAAAGgAAAAAAAAABAAAAdBkAAAAAAAAAGQAAAAAAAAABAAAAYRgAAAAAAAAAGAAAAAAAAAABAAAAYxcAAAAAAAAAFwAAAAAAAAABAAAAbhYAAAAAAAAAFgAAAAAAAAABAAAAbxUAAAAAAAAAFQAAAAAAAAABAAAAQxQAAAAAAAAAFAAAAAAAAAABAAAAIBMAAAAAAAAAEwAAAAAAAAABAAAAQw",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGwAAAAAAAAAbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					214,
					1,
					"left_delete",
					null,
					"AQAAAAUAAAAAAAAABQAAAAAAAAAJAAAAIENvbmNhdCBC",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABQAAAAAAAAAOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					216,
					1,
					"insert",
					{
						"characters": "["
					},
					"AQAAAAQAAAAAAAAABQAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					218,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAAAYAAAAAAAAABwAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABgAAAAAAAAAGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					220,
					1,
					"insert",
					{
						"characters": ",B"
					},
					"AgAAAAYAAAAAAAAABwAAAAAAAAAAAAAABwAAAAAAAAAIAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABgAAAAAAAAAGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					225,
					1,
					"paste",
					null,
					"AQAAAA4AAAAAAAAAEwAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADgAAAAAAAAAOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					227,
					1,
					"left_delete",
					null,
					"AQAAAA8AAAAAAAAADwAAAAAAAAABAAAAQQ",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					228,
					1,
					"insert",
					{
						"characters": "C"
					},
					"AQAAAA8AAAAAAAAAEAAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADwAAAAAAAAAPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					230,
					1,
					"left_delete",
					null,
					"AQAAABEAAAAAAAAAEQAAAAAAAAABAAAAQg",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEgAAAAAAAAASAAAAAAAAAAAAAAAAAPC/"
				],
				[
					231,
					1,
					"insert",
					{
						"characters": "D"
					},
					"AQAAABEAAAAAAAAAEgAAAAAAAAAAAAAA",
					"EwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEQAAAAAAAAARAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/C/Users/casht/repos/TechGame/GYMServer.py",
			"settings":
			{
				"buffer_size": 2757,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/casht/repos/TechGame/TD3.py",
			"settings":
			{
				"buffer_size": 5020,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/casht/repos/TechGame/TD3Training.py",
			"settings":
			{
				"buffer_size": 6237,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					15,
					1,
					"left_delete",
					null,
					"AQAAABQJAAAAAAAAFAkAAAAAAAABAAAAMQ",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABUJAAAAAAAAFQkAAAAAAAAAAAAAAADwvw"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "50"
					},
					"AgAAABQJAAAAAAAAFQkAAAAAAAAAAAAAFQkAAAAAAAAWCQAAAAAAAAAAAAA",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABQJAAAAAAAAFAkAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "4"
					},
					"AgAAANsDAAAAAAAA3AMAAAAAAAAAAAAA3AMAAAAAAADcAwAAAAAAAAEAAAAy",
					"EgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANsDAAAAAAAA3AMAAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "True"
					},
					"BQAAAMYNAAAAAAAAxw0AAAAAAAAAAAAAxw0AAAAAAADHDQAAAAAAAAUAAABGYWxzZccNAAAAAAAAyA0AAAAAAAAAAAAAyA0AAAAAAADJDQAAAAAAAAAAAADJDQAAAAAAAMoNAAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxg0AAAAAAADLDQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "1: 1.6ms baseline\n2: 13ms (1thread)",
			"settings":
			{
				"buffer_size": 35,
				"line_ending": "Windows",
				"name": "1: 1.6ms baseline"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAAEAAAAAAAAAAgAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": " 1.6ms"
					},
					"BgAAAAIAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAUAAAAAAAAAAAAAAAUAAAAAAAAABgAAAAAAAAAAAAAABgAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAgAAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAIAAAAAAAAAAgAAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAgAAAAAAAAACQAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAgAAAAAAAAACQAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAADwvw"
				],
				[
					16,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAkAAAAAAAAACwAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAkAAAAAAAAACQAAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "thread"
					},
					"BgAAAAoAAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAAA0AAAAAAAAAAAAAAA0AAAAAAAAADgAAAAAAAAAAAAAADgAAAAAAAAAPAAAAAAAAAAAAAAAPAAAAAAAAABAAAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAoAAAAAAAAACgAAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " 1"
					},
					"AgAAABAAAAAAAAAAEQAAAAAAAAAAAAAAEQAAAAAAAAASAAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAADwvw"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " does"
					},
					"BQAAABIAAAAAAAAAEwAAAAAAAAAAAAAAEwAAAAAAAAAUAAAAAAAAAAAAAAAUAAAAAAAAABUAAAAAAAAAAAAAABUAAAAAAAAAFgAAAAAAAAAAAAAAFgAAAAAAAAAXAAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABIAAAAAAAAAEgAAAAAAAAAAAAAAAADwvw"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " work"
					},
					"BQAAABcAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAZAAAAAAAAAAAAAAAZAAAAAAAAABoAAAAAAAAAAAAAABoAAAAAAAAAGwAAAAAAAAAAAAAAGwAAAAAAAAAcAAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABcAAAAAAAAAFwAAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "2:"
					},
					"AgAAAB4AAAAAAAAAHwAAAAAAAAAAAAAAHwAAAAAAAAAgAAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB4AAAAAAAAAHgAAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACAAAAAAAAAAIQAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACAAAAAAAAAAIAAAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"left_delete",
					null,
					"AQAAAAkAAAAAAAAACQAAAAAAAAAUAAAAKHRocmVhZCAxIGRvZXMgd29yayk",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAkAAAAAAAAAHQAAAAAAAAAAAAAAAADwvw"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "baseline"
					},
					"CAAAAAkAAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAADQAAAAAAAAAAAAAADQAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAARAAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAkAAAAAAAAACQAAAAAAAAAAAAAAAADwvw"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "13ms"
					},
					"BAAAABUAAAAAAAAAFgAAAAAAAAAAAAAAFgAAAAAAAAAXAAAAAAAAAAAAAAAXAAAAAAAAABgAAAAAAAAAAAAAABgAAAAAAAAAGQAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABUAAAAAAAAAFQAAAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": " 1"
					},
					"AgAAABkAAAAAAAAAGgAAAAAAAAAAAAAAGgAAAAAAAAAbAAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABkAAAAAAAAAGQAAAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"left_delete",
					null,
					"AQAAABoAAAAAAAAAGgAAAAAAAAABAAAAMQ",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABsAAAAAAAAAGwAAAAAAAAAAAAAAAADwvw"
				],
				[
					36,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABoAAAAAAAAAHAAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABoAAAAAAAAAGgAAAAAAAAAAAAAAAADwvw"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "1threa"
					},
					"BgAAABsAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAdAAAAAAAAAAAAAAAdAAAAAAAAAB4AAAAAAAAAAAAAAB4AAAAAAAAAHwAAAAAAAAAAAAAAHwAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACEAAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABsAAAAAAAAAGwAAAAAAAAAAAAAAAADwvw"
				],
				[
					38,
					1,
					"left_delete",
					null,
					"AQAAACAAAAAAAAAAIAAAAAAAAAABAAAAYQ",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACEAAAAAAAAAIQAAAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAACAAAAAAAAAAIQAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACAAAAAAAAAAIAAAAAAAAAAAAAAAAADwvw"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAACAAAAAAAAAAIQAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACAAAAAAAAAAIAAAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "/C/Users/casht/Downloads/NVIDIA GPU Computing SDK/OpenCL/src/oclCopyComputeOverlap/VectorHypot.cl",
			"settings":
			{
				"buffer_size": 1485,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/casht/Downloads/NVIDIA GPU Computing SDK/OpenCL/src/oclCopyComputeOverlap/oclCopyComputeOverlap.cpp",
			"settings":
			{
				"buffer_size": 34558,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/casht/repos/TechGame/reRunCMake.sh",
			"settings":
			{
				"buffer_size": 676,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					13,
					1,
					"insert",
					{
						"characters": " \\"
					},
					"AgAAAH4CAAAAAAAAfwIAAAAAAAAAAAAAfwIAAAAAAACAAgAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB+AgAAAAAAAH4CAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAIACAAAAAAAAgQIAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACAAgAAAAAAAIACAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"paste",
					null,
					"AQAAAIECAAAAAAAAnQIAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBAgAAAAAAAIECAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "-D"
					},
					"AgAAAIECAAAAAAAAggIAAAAAAAAAAAAAggIAAAAAAACDAgAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBAgAAAAAAAIECAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "=ON"
					},
					"AwAAAJ8CAAAAAAAAoAIAAAAAAAAAAAAAoAIAAAAAAAChAgAAAAAAAAAAAAChAgAAAAAAAKICAAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACfAgAAAAAAAJ8CAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					2,
					"left_delete",
					null,
					"AgAAAKECAAAAAAAAoQIAAAAAAAABAAAATqACAAAAAAAAoAIAAAAAAAABAAAATw",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAogIAAAAAAACiAgAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "F"
					},
					"AQAAAKACAAAAAAAAoQIAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoAIAAAAAAACgAgAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"left_delete",
					null,
					"AQAAAKACAAAAAAAAoAIAAAAAAAABAAAARg",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoQIAAAAAAAChAgAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "OFF"
					},
					"AwAAAKACAAAAAAAAoQIAAAAAAAAAAAAAoQIAAAAAAACiAgAAAAAAAAAAAACiAgAAAAAAAKMCAAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoAIAAAAAAACgAgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "Exception thrown at 0x0000000000000000 in NewtonPhysicsTests.exe: 0xC0000005: Access violation executing location 0x0000000000000000.",
			"settings":
			{
				"buffer_size": 133,
				"line_ending": "Windows",
				"name": "Exception thrown at 0x0000000000000000 in NewtonPh"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"paste",
					{
						"event":
						{
							"modifier_keys":
							{
							},
							"x": 466.5,
							"y": 206.5
						}
					},
					"AQAAAAAAAAAAAAAAdgAAAAAAAAAAAAAA",
					"EQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAmg8AAAAAAAAAAAAAmg8AAAAAAACaDwAAAAAAAHYAAAAweDAwMDAwMWIwNDNmNGRlMDAge21fZXh0ZXJuYWxGb3JjZT17bV9mPTB4MDAwMDAxYjA0M2Y0ZTFhMCB7MC4wMDAwMDAwMCwgMC4wMDAwMDAwMCwgMC4wMDAwMDAwMCwgMC4wMDAwMDAwMH0gLi4ufSAuLi59",
					"EQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB2AAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"right_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAACaDwAAMHgwMDAwMDFiMDQzZjRkZTAwIHttX2V4dGVybmFsRm9yY2U9e21fZj0weDAwMDAwMWIwNDNmNGUxYTAgezAuMDAwMDAwMDAsIDAuMDAwMDAwMDAsIDAuMDAwMDAwMDAsIDAuMDAwMDAwMDB9IC4uLn0gLi4ufQp7bV9pbnZXb3JsZEluZXJ0aWFNYXRyaXg9e21fZnJvbnQ9e21fZj0weDAwMDAwMWIwNDNmNGRmMDAgezk1OC4xMjkwMjgsIDcyMi45MjEwMjEsIDMwNS4zMzg4MDYsIDAuMDAwMDAwMDB9IC4uLn0gLi4ufSAuLi59CnttX21hdHJpeD17bV9mcm9udD17bV9mPTB4MDAwMDAxYjA0M2Y0ZGUyMCB7LTAuOTY4ODM4NjkyLCAwLjIyODA2NzM2OCwgMC4wOTY2MjkxNDI4LCAwLjAwMDAwMDAwfSBtX2k9Li4ufSAuLi59IC4uLn0Key4uLn0Key4uLn0KMHgwMDAwN2ZmZDhhM2RkODM4IHtuZE5ld3Rvbi5kbGwhdm9pZCgqIG5kQm9keUR5bmFtaWM6OmB2ZnRhYmxlJ1s0OF0pKCl9IHsweDAwMDA3ZmZkOGEyYTQ3NTUge25kTmV3dG9uLmRsbCFuZEJvZHlEeW5hbWljOjpTdWJDbGFzc05hbWUodm9pZCl9LCAuLi59CnttX2Zyb250PXttX2Y9MHgwMDAwMDFiMDQzZjRkZTIwIHstMC45Njg4Mzg2OTIsIDAuMjI4MDY3MzY4LCAwLjA5NjYyOTE0MjgsIDAuMDAwMDAwMDB9IG1faT0weDAwMDAwMWIwNDNmNGRlMjAgey4uLn0gLi4ufSAuLi59CnttX2Y9MHgwMDAwMDFiMDQzZjRkZTYwIHstMC40NzcxMTEwNzEsIDMuNTQzOTkyMDQsIDMuMDA0NjkwMTcsIDAuMDAwMDAwMDB9IG1faT0weDAwMDAwMWIwNDNmNGRlNjAgey0xMDkxMjg3MDY1LCAuLi59IC4uLn0Ke21fZj0weDAwMDAwMWIwNDNmNGRlNzAgezAuNzkwNDgwMjU2LCAzLjY1MDIxMDM4LCAtNy45NDI3NjA5NCwgMC4wMDAwMDAwMH0gbV9pPTB4MDAwMDAxYjA0M2Y0ZGU3MCB7MTA2MTgzODA1OCwgLi4ufSAuLi59CnttX2Y9MHgwMDAwMDFiMDQzZjRkZTgwIHswLjAwMDAwMDAwLCAwLjAwMDAwMDAwLCAwLjAwMDAwMDAwLCAxLjAwMDAwMDAwfSBtX2k9MHgwMDAwMDFiMDQzZjRkZTgwIHswLCAuLi59IC4uLn0Ke21fZj0weDAwMDAwMWIwNDNmNGRlOTAgezEuODIzNDMyMDksIDAuODE5MzQyNjczLCAxLjI0NzcwOTUxLCAxLjAwMDAwMDAwfSBtX2k9MHgwMDAwMDFiMDQzZjRkZTkwIHsxMDcyMjYwNjY1LCAuLi59IC4uLn0Ke21fZj0weDAwMDAwMWIwNDNmNGRlYTAgezEuNTc2MjIwMDQsIDAuMjI5NTk1OTI5LCAwLjc4OTI3ODg2NSwgMC4wMDAwMDAwMH0gbV9pPTB4MDAwMDAxYjA0M2Y0ZGVhMCB7MTA3MDE4NjkwMCwgLi4ufSAuLi59CnttX2Y9MHgwMDAwMDFiMDQzZjRkZWIwIHsyLjA3ODU5NTg4LCAxLjM1MDAyMjkxLCAxLjY1NjA2MjAxLCAwLjAwMDAwMDAwfSBtX2k9MHgwMDAwMDFiMDQzZjRkZWIwIHsxMDc0MDcxNDc5LCAuLi59IC4uLn0Key4uLn0KMHgwMDAwMDAwMDAwMDAwMDAwIDxOVUxMPgozOTQyMjcKNDcKMQoxCjEKMQowCjEKMAowICdcMCcKMSAnXHgxJwowICdcMCcKMCAnXDAnCjAgJ1wwJwowICdcMCcKMSAnXHgxJwowICdcMCcKMSAnXHgxJwp7bV9mcm9udD17bV9mPTB4MDAwMDAxYjA0M2Y0ZGYwMCB7OTU4LjEyOTAyOCwgNzIyLjkyMTAyMSwgMzA1LjMzODgwNiwgMC4wMDAwMDAwMH0gbV9pPTB4MDAwMDAxYjA0M2Y0ZGYwMCB7Li4ufSAuLi59IC4uLn0Ke21fZ2xvYmFsTWF0cml4PXttX2Zyb250PXttX2Y9MHgwMDAwMDFiMDQzZjRkZjQwIHstMC45ODQyODY1NDcsIDAuMTYzOTM0Nzk3LCAwLjA2NTYxODY5MzgsIDAuMDAwMDAwMDB9IC4uLn0gLi4ufSAuLi59CnttX2Y9MHgwMDAwMDFiMDQzZjRlMGEwIHswLjAwMTIyMzQzNzcyLCAwLjAwMTA3MzQzNzYzLCAwLjAwMDE4NzUwMDA0NSwgMC4wMjI1MDAwMDA5fSBtX2k9MHgwMDAwMDFiMDQzZjRlMGEwIHsuLi59IC4uLn0Ke21fZj0weDAwMDAwMWIwNDNmNGUwYjAgezgxNy4zNjg5NTgsIDkzMS41ODY0ODcsIDUzMzMuMzMyMDMsIDQ0LjQ0NDQ0Mjd9IG1faT0weDAwMDAwMWIwNDNmNGUwYjAgezExNDU4NTM4NTMsIC4uLn0gLi4ufQp7bV9mPTB4MDAwMDAxYjA0M2Y0ZTBjMCB7LTEyNy4yMzMyNzYsIDEyMi4zODkyMjksIDYwLjUwMDczMjQsIDAuMDAwMDAwMDB9IG1faT0weDAwMDAwMWIwNDNmNGUwYzAgey0xMDIzNTEwNjcyLCAuLi59IC4uLn0Ke21fZj0weDAwMDAwMWIwNDNmNGUwZDAgey0yLjMyMTM1NTEwLCAtNDQwLjM2NzAzNSwgMTA5OS4zNDkxMiwgMC4wMDAwMDAwMH0gbV9pPTB4MDAwMDAxYjA0M2Y0ZTBkMCB7LTEwNzIzOTM5NjMsIC4uLn0gLi4ufQp7bV9mPTB4MDAwMDAxYjA0M2Y0ZTBlMCB7LTMuOTA5NDc5NjIsIC0zLjQxNTQ1OTYzLCAtMS43ODAyMjAzOSwgMC4wMDAwMDAwMH0gbV9pPTB4MDAwMDAxYjA0M2Y0ZTBlMCB7Li4ufSAuLi59CnttX2Y9MHgwMDAwMDFiMDQzZjRlMGYwIHstMC4wMDM0MDcyNjEzMywgMC4wMDAxNzA4MTM4NzMsIC0wLjAwMDI2MDU5NzgyMiwgMC4wMDAwMDAwMH0gbV9pPTB4MDAwMDAxYjA0M2Y0ZTBmMCB7Li4ufSAuLi59CnsuLi59CnsuLi59CnsuLi59CnttX2xvY2s9MCB9CjB4MDAwMDAxYjAzOGNhMGU0MCBmYWxzZQoweDAwMDAwMWIwNDNmNGRlMDAge21fZXh0ZXJuYWxGb3JjZT17bV9mPTB4MDAwMDAxYjA0M2Y0ZTFhMCB7MC4wMDAwMDAwMCwgMC4wMDAwMDAwMCwgMC4wMDAwMDAwMCwgMC4wMDAwMDAwMH0gLi4ufSAuLi59CjB4MDAwMDAxYjA1M2ViZjJhMCB7bV9pbmZvPTB4MDAwMDAxYjA0M2Y0ZGUwMCB7bV9leHRlcm5hbEZvcmNlPXttX2Y9MHgwMDAwMDFiMDQzZjRlMWEwIHswLjAwMDAwMDAwLCAuLi59IC4uLn0gLi4ufSAuLi59CjB4MDAwMDAxYjA1NDE3NDhhMCB7bV9ib2R5PTB4MDAwMDAxYjA0M2Y0ZGUwMCB7bV9leHRlcm5hbEZvcmNlPXttX2Y9MHgwMDAwMDFiMDQzZjRlMWEwIHswLjAwMDAwMDAwLCAuLi59IC4uLn0gLi4ufSB9CjB4MDAwMDAxYjA1M2FiZWRjMCB7bV9za2VsZXRvbj0weDAwMDAwMWIwNTNhZjMwODAge21fZGF0YT17bV9ib2R5PXttX2p0PXttX3Jvd3M9MHgwMDAwMDFiMDUzYWYzMDgwIHsuLi59IH0gLi4ufSAuLi59IC4uLn0gLi4ufQoweDAwMDAwMDAwMDAwMDAwMDAgPE5VTEw+CjAuNzg1Mzk4MDA2CjEuMDAwMDAwMDAKMS4wMDAwMDAwMAowCjgKe21fZj0weDAwMDAwMWIwNDNmNGUxYTAgezAuMDAwMDAwMDAsIDAuMDAwMDAwMDAsIDAuMDAwMDAwMDAsIDAuMDAwMDAwMDB9IG1faT0weDAwMDAwMWIwNDNmNGUxYTAgezAsIC4uLn0gLi4ufQp7bV9mPTB4MDAwMDAxYjA0M2Y0ZTFiMCB7MC4wMDAwMDAwMCwgMC4wMDAwMDAwMCwgMC4wMDAwMDAwMCwgMC4wMDAwMDAwMH0gbV9pPTB4MDAwMDAxYjA0M2Y0ZTFiMCB7MCwgLi4ufSAuLi59CnttX2Y9MHgwMDAwMDFiMDQzZjRlMWMwIHswLjAwMDAwMDAwLCAwLjAwMDAwMDAwLCAwLjAwMDAwMDAwLCAwLjAwMDAwMDAwfSBtX2k9MHgwMDAwMDFiMDQzZjRlMWMwIHswLCAuLi59IC4uLn0Ke21fZj0weDAwMDAwMWIwNDNmNGUxZDAgezAuMDAwMDAwMDAsIDAuMDAwMDAwMDAsIDAuMDAwMDAwMDAsIDAuMDAwMDAwMDB9IG1faT0weDAwMDAwMWIwNDNmNGUxZDAgezAsIC4uLn0gLi4ufQp7bV9mPTB4MDAwMDAxYjA0M2Y0ZTFlMCB7MC4wMDAwMDAwMCwgLTAuMjIwNzI1MDE1LCAwLjAwMDAwMDAwLCAwLjAwMDAwMDAwfSBtX2k9MHgwMDAwMDFiMDQzZjRlMWUwIHswLCAuLi59IC4uLn0Ke21fZj0weDAwMDAwMWIwNDNmNGUxZjAgezAuMDAwMDAwMDAsIDAuMDAwMDAwMDAsIDAuMDAwMDAwMDAsIDAuMDAwMDAwMDB9IG1faT0weDAwMDAwMWIwNDNmNGUxZjAgezAsIC4uLn0gLi4ufQp7bV9mPTB4MDAwMDAxYjA0M2Y0ZTIwMCB7MC4wMDAwMDAwMCwgMC4wMDAwMDAwMCwgMC4wMDAwMDAwMCwgMC4wMDAwMDAwMH0gbV9pPTB4MDAwMDAxYjA0M2Y0ZTIwMCB7MCwgLi4ufSAuLi59CnttX2Y9MHgwMDAwMDFiMDQzZjRlMjEwIHsxLjAwMDAwMDAwLCAxLjAwMDAwMDAwLCAxLjAwMDAwMDAwLCAxLjAwMDAwMDAwfSBtX2k9MHgwMDAwMDFiMDQzZjRlMjEwIHsxMDY1MzUzMjE2LCAuLi59IC4uLn0KMC4wMDgzMzMzMzM3NwpFcnJvciByZWFkaW5nIHJlZ2lzdGVyIHZhbHVlLgpFcnJvciByZWFkaW5nIHJlZ2lzdGVyIHZhbHVlLg",
					"EQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAJoPAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAhQAAAAAAAAAAAAAA",
					"EQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "openCL/test.ll",
			"settings":
			{
				"buffer_size": 2341,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"GAAAAAAAAAAAAAAAAAAAAAAAAAAlCQAAOyBNb2R1bGVJRCA9ICd0ZXN0LmNsJwpzb3VyY2VfZmlsZW5hbWUgPSAidGVzdC5jbCIKdGFyZ2V0IGRhdGFsYXlvdXQgPSAiZS1tOnctcDI3MDozMjozMi1wMjcxOjMyOjMyLXAyNzI6NjQ6NjQtaTY0OjY0LWY4MDoxMjgtbjg6MTY6MzI6NjQtUzEyOCIKdGFyZ2V0IHRyaXBsZSA9ICJ4ODZfNjQtcGMtd2luZG93cy1tc3ZjMTkuMzMuMzE2MjkiCgo7IEZ1bmN0aW9uIEF0dHJzOiBjb252ZXJnZW50IG5vcmVjdXJzZSBub3Vud2luZCB1d3RhYmxlCmRlZmluZSBkc29fbG9jYWwgc3Bpcl9rZXJuZWwgdm9pZCBAdGVzdChwdHIgYWRkcnNwYWNlKDEpIG5vY2FwdHVyZSBub3VuZGVmIHJlYWRvbmx5IGFsaWduIDQgJTAsIHB0ciBhZGRyc3BhY2UoMSkgbm9jYXB0dXJlIG5vdW5kZWYgd3JpdGVvbmx5IGFsaWduIDQgJTEpIGxvY2FsX3VubmFtZWRfYWRkciAjMCAha2VybmVsX2FyZ19hZGRyX3NwYWNlICE1ICFrZXJuZWxfYXJnX2FjY2Vzc19xdWFsICE2ICFrZXJuZWxfYXJnX3R5cGUgITcgIWtlcm5lbF9hcmdfYmFzZV90eXBlICE3ICFrZXJuZWxfYXJnX3R5cGVfcXVhbCAhOCB7CiAgJTMgPSB0YWlsIGNhbGwgaTMyIEBnZXRfZ2xvYmFsX2lkKGkzMiBub3VuZGVmIDApICMzCiAgJTQgPSBzZXh0IGkzMiAlMyB0byBpNjQKICAlNSA9IGdldGVsZW1lbnRwdHIgaW5ib3VuZHMgZmxvYXQsIHB0ciBhZGRyc3BhY2UoMSkgJTAsIGk2NCAlNAogICU2ID0gbG9hZCBmbG9hdCwgcHRyIGFkZHJzcGFjZSgxKSAlNSwgYWxpZ24gNCwgIXRiYWEgITkKICAlNyA9IHRhaWwgY2FsbCBmbG9hdCBAbGx2bS5mbXVsYWRkLmYzMihmbG9hdCAlNiwgZmxvYXQgMHg0MDA5MjFGQTAwMDAwMDAwLCBmbG9hdCAlNikKICAlOCA9IGdldGVsZW1lbnRwdHIgaW5ib3VuZHMgZmxvYXQsIHB0ciBhZGRyc3BhY2UoMSkgJTEsIGk2NCAlNAogIHN0b3JlIGZsb2F0ICU3LCBwdHIgYWRkcnNwYWNlKDEpICU4LCBhbGlnbiA0LCAhdGJhYSAhOQogIHJldCB2b2lkCn0KCjsgRnVuY3Rpb24gQXR0cnM6IGNvbnZlcmdlbnQKZGVjbGFyZSBkc29fbG9jYWwgaTMyIEBnZXRfZ2xvYmFsX2lkKGkzMiBub3VuZGVmKSBsb2NhbF91bm5hbWVkX2FkZHIgIzEKCjsgRnVuY3Rpb24gQXR0cnM6IG11c3Rwcm9ncmVzcyBub2NhbGxiYWNrIG5vZnJlZSBub3N5bmMgbm91bndpbmQgcmVhZG5vbmUgc3BlY3VsYXRhYmxlIHdpbGxyZXR1cm4KZGVjbGFyZSBmbG9hdCBAbGx2bS5mbXVsYWRkLmYzMihmbG9hdCwgZmxvYXQsIGZsb2F0KSAjMgoKYXR0cmlidXRlcyAjMCA9IHsgY29udmVyZ2VudCBub3JlY3Vyc2Ugbm91bndpbmQgdXd0YWJsZSAiZnJhbWUtcG9pbnRlciI9Im5vbmUiICJtaW4tbGVnYWwtdmVjdG9yLXdpZHRoIj0iMCIgIm5vLXRyYXBwaW5nLW1hdGgiPSJ0cnVlIiAic3RhY2stcHJvdGVjdG9yLWJ1ZmZlci1zaXplIj0iOCIgInRhcmdldC1jcHUiPSJ4ODYtNjQiICJ0YXJnZXQtZmVhdHVyZXMiPSIrY3g4LCtmeHNyLCttbXgsK3NzZSwrc3NlMiwreDg3IiAidHVuZS1jcHUiPSJnZW5lcmljIiAidW5pZm9ybS13b3JrLWdyb3VwLXNpemUiPSJ0cnVlIiB9CmF0dHJpYnV0ZXMgIzEgPSB7IGNvbnZlcmdlbnQgImZyYW1lLXBvaW50ZXIiPSJub25lIiAibm8tdHJhcHBpbmctbWF0aCI9InRydWUiICJzdGFjay1wcm90ZWN0b3ItYnVmZmVyLXNpemUiPSI4IiAidGFyZ2V0LWNwdSI9Ing4Ni02NCIgInRhcmdldC1mZWF0dXJlcyI9IitjeDgsK2Z4c3IsK21teCwrc3NlLCtzc2UyLCt4ODciICJ0dW5lLWNwdSI9ImdlbmVyaWMiIH0KYXR0cmlidXRlcyAjMiA9IHsgbXVzdHByb2dyZXNzIG5vY2FsbGJhY2sgbm9mcmVlIG5vc3luYyBub3Vud2luZCByZWFkbm9uZSBzcGVjdWxhdGFibGUgd2lsbHJldHVybiB9CmF0dHJpYnV0ZXMgIzMgPSB7IGNvbnZlcmdlbnQgbm91bndpbmQgfQoKIWxsdm0ubW9kdWxlLmZsYWdzID0gIXshMCwgITEsICEyfQohb3BlbmNsLm9jbC52ZXJzaW9uID0gIXshM30KIWxsdm0uaWRlbnQgPSAheyE0fQoKITAgPSAhe2kzMiAxLCAhIndjaGFyX3NpemUiLCBpMzIgMn0KITEgPSAhe2kzMiA3LCAhIlBJQyBMZXZlbCIsIGkzMiAyfQohMiA9ICF7aTMyIDcsICEidXd0YWJsZSIsIGkzMiAyfQohMyA9ICF7aTMyIDEsIGkzMiAyfQohNCA9ICF7ISJjbGFuZyB2ZXJzaW9uIDE1LjAuMiJ9CiE1ID0gIXtpMzIgMCwgaTMyIDB9CiE2ID0gIXshIm5vbmUiLCAhIm5vbmUifQohNyA9ICF7ISJmbG9hdCoiLCAhImZsb2F0KiJ9CiE4ID0gIXshIiIsICEiIn0KITkgPSAheyExMCwgITEwLCBpNjQgMH0KITEwID0gIXshImZsb2F0IiwgITExLCBpNjQgMH0KITExID0gIXshIm9tbmlwb3RlbnQgY2hhciIsICExMiwgaTY0IDB9CiExMiA9ICF7ISJTaW1wbGUgQy9DKysgVEJBQSJ9CgAAAAAAAAAAJQkAAAAAAAAAAAAAAAAAAAAAAAAlCQAAAAAAAAAAAAAAAAAAAAAAACUJAAAAAAAAAAAAAAAAAAAAAAAAJQkAAAAAAAAAAAAAAAAAAAAAAAAlCQAAAAAAAAAAAAAAAAAAAAAAACUJAAAAAAAAAAAAAAAAAAAAAAAAJQkAAAAAAAAAAAAAAAAAAAAAAAAlCQAAAAAAAAAAAAAAAAAAAAAAACUJAAAAAAAAAAAAAAAAAAAAAAAAJQkAAAAAAAAAAAAAAAAAAAAAAAAlCQAAAAAAAAAAAAAAAAAAAAAAACUJAAAAAAAAAAAAAAAAAAAAAAAAJQkAAAAAAAAAAAAAAAAAAAAAAAAlCQAAAAAAAAAAAAAAAAAAAAAAACUJAAAAAAAAAAAAAAAAAAAAAAAAJQkAAAAAAAAAAAAAAAAAAAAAAAAlCQAAAAAAAAAAAAAAAAAAAAAAACUJAAAAAAAAAAAAAAAAAAAAAAAAJQkAAAAAAAAAAAAAAAAAAAAAAAAlCQAAAAAAAAAAAAAAAAAAAAAAACUJAAAAAAAAAAAAAAAAAAAAAAAAJQkAAAAAAAAAAAAAAAAAAAAAAAAlCQAAAAAAAAAAAAA",
					"FwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "openCL/peep.h",
			"settings":
			{
				"buffer_size": 13232,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"revert",
					null,
					"",
					"FQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACkLwAAI3ByYWdtYSBvbmNlCgoKI2luY2x1ZGUgImNsX3R5cGVfZ2x1ZS5oIgojaW5jbHVkZSAiZHluYW1pY0RlZmluZXMuaCIKCgojaW5jbHVkZSAiZ3B1dmVjdG9ydHlwZXMuaCIKCiNkZWZpbmUgTUFYX1RSQUNLTk9ERVMgKDEwMjQqOCkKCiNkZWZpbmUgU1FSVF9NQVhTRUNUT1JTIChNQVBESU0vMikKI2RlZmluZSBTRUNUT1JfU0laRSAoMTApCgojZGVmaW5lIE1BWF9QQVRIUyAoODA5NikKCi8vI2RlZmluZSBNQVhfQ0xJRU5UUyAoMTAyNCkKCiNkZWZpbmUgT0ZGU0VUX05VTEwgKDB4RkZGRkZGRkYpCiNkZWZpbmUgT0ZGU0VUX05VTExfMkQgICgob2Zmc2V0UHRyMil7MHhGRkZGRkZGRiAsIDB4RkZGRkZGRkZ9KQojZGVmaW5lIE9GRlNFVF9OVUxMXzNEICAoKG9mZnNldFB0cjMpezB4RkZGRkZGRkYgLCAweEZGRkZGRkZGLCAgMHhGRkZGRkZGRn0pCgojZGVmaW5lIE9GRlNFVF9OVUxMX1NIT1JUXzNEICAoKG9mZnNldFB0clNob3J0Myl7MHhGRkZGICwgMHhGRkZGLCAgMHhGRkZGfSkKCgoKI2RlZmluZSBDTF9DSEVDS0VEX0FSUkFZX1NFVChBUlJBWSwgQVJSQVlfU0laRSwgSU5ERVgsIFZBTFVFKSB7IGlmKElOREVYID49IEFSUkFZX1NJWkUpIHtwcmludGYoIltDTF0gT1VUIE9GIEJPVU5EUyBJTkRFWCBTRVQgT04gQVJSQVkgIiAgI0FSUkFZICIgbGluZSAlZCBcbiIsIF9fTElORV9fKTsgfSBlbHNlIEFSUkFZW0lOREVYXSA9IFZBTFVFOyB9CiNkZWZpbmUgQ0xfQ0hFQ0tFRF9BUlJBWV9HRVRfUFRSKEFSUkFZLCBBUlJBWV9TSVpFLCBJTkRFWCwgUE9JTlRFUikge2lmKElOREVYID49IEFSUkFZX1NJWkUpIHtwcmludGYoIltDTF0gT1VUIE9GIEJPVU5EUyBJTkRFWCAldSBPTiBBUlJBWSAiICAjQVJSQVkgIiBsaW5lICVkIFxuIiwgI0lOREVYLCBfX0xJTkVfXyk7IFBPSU5URVIgPSBOVUxMO30gZWxzZSBQT0lOVEVSID0gJkFSUkFZW0lOREVYXTt9CiNkZWZpbmUgQ0xfQ0hFQ0tfTlVMTChQT0lOVEVSKXtpZihQT0lOVEVSID09IE5VTEwpIHtwcmludGYoIltDTF0gIiAjUE9JTlRFUiAiIFBPSU5URVIgSVMgTlVMTCBsaW5lICVkIFxuIiwgX19MSU5FX18pO319CiNkZWZpbmUgQ0xfVEhST1dfQVNTRVJUKCl7cHJpbnRmKCJbQ0xdIEFTU0VSVCBsaW5lICVkIFxuIiwgX19MSU5FX18pO30KCgoKCiNkZWZpbmUgT0ZGU0VUX1RPX1BUUihBUlJBWSwgT0ZGU0VULCBQT0lOVEVSKSB7IGlmKE9GRlNFVCA9PSBPRkZTRVRfTlVMTCl7ICBQT0lOVEVSID0gTlVMTDt9IGVsc2UgUE9JTlRFUiA9ICYoQVJSQVlbT0ZGU0VUXSk7ICB9IAojZGVmaW5lIE9GRlNFVF9UT19QVFJfMkQoQVJSQVkyRCwgT0ZGU0VUMkQsIFBPSU5URVIpIHsgaWYoKE9GRlNFVDJELnggPT0gT0ZGU0VUX05VTEwpIHx8IChPRkZTRVQyRC55ID09IE9GRlNFVF9OVUxMKSl7IFBPSU5URVIgPSBOVUxMOyB9IGVsc2UgUE9JTlRFUiA9ICYoQVJSQVkyRFtPRkZTRVQyRC54XVtPRkZTRVQyRC55XSk7fSAKI2RlZmluZSBPRkZTRVRfVE9fUFRSXzNEKEFSUkFZM0QsIE9GRlNFVDNELCBQT0lOVEVSKSB7IGlmKChPRkZTRVQzRC54ID09IE9GRlNFVF9OVUxMKSB8fCAoT0ZGU0VUM0QueSA9PSBPRkZTRVRfTlVMTCkgfHwgKE9GRlNFVDNELnogPT0gT0ZGU0VUX05VTEwpKXsgUE9JTlRFUiA9IE5VTEw7IH0gZWxzZSBQT0lOVEVSID0gJihBUlJBWTNEW09GRlNFVDNELnhdW09GRlNFVDNELnldW09GRlNFVDNELnpdKTt9IAoKI2RlZmluZSBDSEVDS0VEX09GRlNFVF9UT19QVFJfM0QoQVJSQVkzRCwgQVJSQVlTSVpFM0QsIE9GRlNFVDNELCBQT0lOVEVSKSB7IGlmKChPRkZTRVQzRC54ID09IE9GRlNFVF9OVUxMKSB8fCAoT0ZGU0VUM0QueSA9PSBPRkZTRVRfTlVMTCkgfHwgKE9GRlNFVDNELnogPT0gT0ZGU0VUX05VTEwpKXsgUE9JTlRFUiA9IE5VTEw7IH0gZWxzZSB7IGlmKE9GRlNFVDNELnggPj0gQVJSQVlTSVpFM0QueCB8fCBPRkZTRVQzRC55ID49IEFSUkFZU0laRTNELnkgfHwgT0ZGU0VUM0QueiA+PSBBUlJBWVNJWkUzRC56KSB7IHByaW50ZigiW0NMXSBPVVQgT0YgQk9VTkRTIElOREVYIEdFVCBPTiBBUlJBWSAiICAjQVJSQVkzRCAiIGxpbmUgJWQgXG4iLCBfX0xJTkVfXyk7IH0gICBQT0lOVEVSID0gJihBUlJBWTNEW09GRlNFVDNELnhdW09GRlNFVDNELnldW09GRlNFVDNELnpdKTt9IH0gCgoKCiNkZWZpbmUgQklUU0VUKEJJVEJBTkssIEJJVEZMQUcpIHsoQklUQkFOSykgfD0gKDEgPDwgQklURkxBRyk7fQojZGVmaW5lIEJJVENMRUFSKEJJVEJBTkssIEJJVEZMQUcpIHsoQklUQkFOSykgJj0gfigxIDw8IEJJVEZMQUcpO30KI2RlZmluZSBCSVRHRVQoQklUQkFOSywgQklURkxBRykgKChCSVRCQU5LKSAmICgxIDw8IEJJVEZMQUcpKQojZGVmaW5lIEJJVEdFVF9NRihCSVRCQU5LLCBCSVRGTEFHKSAoKChCSVRCQU5LKSAmICgxIDw8IEJJVEZMQUcpKT4+QklURkxBRykKCgoKCnN0cnVjdCBDZWxsOwpzdHJ1Y3QgTWFwU2VjdG9yOwoKCmVudW0gUGVlcFN0YXRlX0JpdEZsYWdzCnsKCVBlZXBTdGF0ZV9CaXRGbGFnc192YWxpZCA9IDAsCglQZWVwU3RhdGVfQml0RmxhZ3NfZGVhdGhTdGF0ZSwKCVBlZXBTdGF0ZV9CaXRGbGFnc192aXNpYmxlCn07CgoKc3RydWN0IFBlZXBTdGF0ZV9CYXNpYwp7CgljbF91aW50IGJpdGZsYWdzMDsKCglpbnQzMl90IGZhY3Rpb247CgoJY2xfaW50IGhlYWx0aDsKCWNsX2ludCBkZWF0aFN0YXRlOwoKCgljbF9pbnQgYnVyaWVkR2xpdGNoU3RhdGU7CgoKCW9mZnNldFB0ciBvcmRlclB0cjsKCWJvb2wgb3JkZXJJblByb2dyZXNzOwoKfXR5cGVkZWYgUGVlcFN0YXRlX0Jhc2ljOwoKCgoKc3RydWN0IEJhc2VQaHlzaWNzCnsJCglnZV9pbnQzIHBvc19RMTY7CglnZV9pbnQzIHZfUTE2OwoKCWdlX2ludDMgcG9zX3Bvc3RfUTE2OwoJZ2VfaW50MyB2ZWxfYWRkX1ExNjsKCglmbG9hdCBDU19hbmdsZV9yYWQ7Cgp9dHlwZWRlZiBCYXNlUGh5c2ljczsKCgovL2NvbnN0cmFpbnQgZm9yIGEgdmFsdWUgdG8gYmUgY2xhbXBlZCBieSB0aGUgcGxhbmUgZGVmaW5lZCBieSBwIHBvcyBhbmQgZCBkaXJlY3Rpb24Kc3RydWN0IExpbmVhckNvbnN0cmFpbnQgCnsKCWdlX2ludDMgcF9RMTY7CglnZV9pbnQzIGRfUTE2Owp9IHR5cGVkZWYgTGluZWFyQ29uc3RyYWludDsKCgpzdHJ1Y3QgUGh5c2ljc0NpcmNsZVNoYXBlCnsKCWludCByYWRpdXNfUTE2Owp9dHlwZWRlZiBQaHlzaWNzQ2lyY2xlU2hhcGU7CgoKCgoKCnN0cnVjdCBBU3RhclBhdGhOb2RlCnsKCWJvb2wgdmFsaWQ7CglnZV9pbnQzIG1hcENvb3JkX1ExNjsKCW9mZnNldFB0ciBuZXh0T1B0cjsKCW9mZnNldFB0ciBwcmV2T1B0cjsKCglib29sIHByb2Nlc3Npbmc7Cn10eXBlZGVmIEFTdGFyUGF0aE5vZGU7CgpzdHJ1Y3QgRHJpdmVQaHlzaWNzCnsKCWludDMyX3QgdGFyZ2V0X3hfUTE2OwoJaW50MzJfdCB0YXJnZXRfeV9RMTY7CglpbnQzMl90IHRhcmdldF96X1ExNjsKCglvZmZzZXRQdHIgdGFyZ2V0UGF0aE5vZGVPUHRyOwoJb2Zmc2V0UHRyIHByZXZQYXRoTm9kZU9QdHI7CgoJYm9vbCBuZWFyVGFyZ2V0OwoKCWludCBkcml2aW5nVG9UYXJnZXQ7Cn0gdHlwZWRlZiBEcml2ZVBoeXNpY3M7CgoKCnN0cnVjdCBQZWVwUGh5c2ljcwp7CglzdHJ1Y3QgQmFzZVBoeXNpY3MgYmFzZTsKCXN0cnVjdCBQaHlzaWNzQ2lyY2xlU2hhcGUgc2hhcGU7CglzdHJ1Y3QgRHJpdmVQaHlzaWNzIGRyaXZlOwoJc3RydWN0IExpbmVhckNvbnN0cmFpbnQgcG9zQ29uc3RyYWludHNbMV07CglzdHJ1Y3QgTGluZWFyQ29uc3RyYWludCB2ZWxDb25zdHJhaW50c1sxXTsKfSB0eXBlZGVmIFBlZXBQaHlzaWNzOwoKCnN0cnVjdCBQZWVwQ29tbXVuaWNhdGlvbiB7CglpbnQgb3JkZXJzX2NoYW5uZWw7CglpbnQgbWVzc2FnZV9UYXJnZXRSZWFjaGVkOwoJaW50IG1lc3NhZ2VfVGFyZ2V0UmVhY2hlZF9wZW5kaW5nOwp9dHlwZWRlZiBQZWVwQ29tbXVuaWNhdGlvbjsKCgplbnVtIEl0ZW1UeXBlcwp7CglJdGVtVHlwZV9JTlZBTElEX0lURU0sCglJdGVtVHlwZV9JUk9OX09SRSwKCUl0ZW1UeXBlX0lST05fRFVTVCwKCUl0ZW1UeXBlX0lST05fQkFSLAoJSXRlbVR5cGVfUk9DS19EVVNULAoKCUl0ZW1UeXBlX1RJTl9PUkUsCglJdGVtVHlwZV9USU5fRFVTVCwKCglJdGVtVHlwZV9DT0JBTFRfT1JFLAoJSXRlbVR5cGVfTklDS0xFX09SRSwKCglJdGVtVHlwZV9SVVRIRU5JVU1fT1JFLAoJSXRlbVR5cGVfUlVUSEVOSVVNX0RVU1QsCgoJSXRlbVR5cGVfUkhPRElVTV9PUkUsCglJdGVtVHlwZV9SSE9ESVVNX0RVU1QsCgoJSXRlbVR5cGVfUEFMQURJVU1fT1JFLAoJSXRlbVR5cGVfUEFMQURJVU1fRFVTVCwKCglJdGVtVHlwZV9PU01JVU1fT1JFLAoJSXRlbVR5cGVfT1NNSVVNX0RVU1QsCgoJSXRlbVR5cGVfSVJJRElVTV9PUkUsCglJdGVtVHlwZV9JUklESVVNX0RVU1QsCgoJSXRlbVR5cGVfUExBVElOVU1fT1JFLAoJSXRlbVR5cGVfUExBVElOVU1fRFVTVCwKCgoJSXRlbVR5cGVfU09NRV9PUkUgPSAyNTYsCgoJSXRlbVR5cGVzX05VTUlURU1TCn0gdHlwZWRlZiBJdGVtVHlwZXM7CgpzdHJ1Y3QgSW52ZW50b3J5CnsKCWludCBjb3VudHNbSXRlbVR5cGVzX05VTUlURU1TXTsKfSB0eXBlZGVmIEludmVudG9yeTsKCnN0cnVjdCBQZWVwIHsKCW9mZnNldFB0ciBwdHI7CgoJc3RydWN0IFBlZXBTdGF0ZV9CYXNpYyBzdGF0ZUJhc2ljOwoJc3RydWN0IFBlZXBQaHlzaWNzIHBoeXNpY3M7CglzdHJ1Y3QgUGVlcENvbW11bmljYXRpb24gY29tbXM7CgoJSW52ZW50b3J5IGludmVudG9yeTsKCgoJY2xfaW50IG1pbkRpc3RQZWVwX1ExNjsKCW9mZnNldFB0ciBtaW5EaXN0UGVlcFB0cjsKCglvZmZzZXRQdHJTaG9ydDMgbWFwQ29vcmQ7CglvZmZzZXRQdHJTaG9ydDMgbWFwQ29vcmRfMTsKCgoJZ2VfaW50MyBwb3NNYXBfUTE2OwoJZ2VfaW50MyBsYXN0R29vZFBvc01hcF9RMTY7CgoJb2Zmc2V0UHRyMiBzZWN0b3JQdHI7CglpbnQgc2VjdG9yTGlzdElkeDsKCQoKCgkvL3NlbGVjdGlvbiBieSBjbGllbnRzCglvZmZzZXRQdHIgbmV4dFNlbGVjdGlvblBlZXBQdHJbTUFYX0NMSUVOVFNdOwoJb2Zmc2V0UHRyIHByZXZTZWxlY3Rpb25QZWVwUHRyW01BWF9DTElFTlRTXTsKCn0gdHlwZWRlZiBQZWVwOwoKCgpzdHJ1Y3QgUGFydGljbGUgewoKCVFNUDMyXzIgcG9zOwoJUU1QMzJfMiB2ZWw7Cn10eXBlZGVmIFBhcnRpY2xlOwoKCnN0cnVjdCBUcmlhbmdsZTNEIHsKCWdlX2ludDMgdmVydHNfUTE2WzNdOwp9IHR5cGVkZWYgVHJpYW5nbGUzRDsKCnN0cnVjdCBUcmlhbmdsZTNESGVhdnl7CglUcmlhbmdsZTNEIGJhc2U7CgoJZ2VfaW50MyBub3JtYWxfUTE2OwoJZ2VfaW50MyB1X1ExNjsKCWdlX2ludDMgdl9RMTY7CgoJY2xfdWNoYXIgdmFsaWQ7Cn0gdHlwZWRlZiBUcmlhbmdsZTNESGVhdnk7CgpzdHJ1Y3QgIENvbnZleEh1bGx7CglUcmlhbmdsZTNESGVhdnkgdHJpYW5nbGVzWzE0XTsKfSB0eXBlZGVmIENvbnZleEh1bGw7CgoKCnN0cnVjdCBNYXBFeHBsb3JlckFnZW50CnsKCWdlX3Nob3J0MyB0aWxlTG9jOwp9IHR5cGVkZWYgTWFwRXhwbG9yZXJBZ2VudDsKCgplbnVtIE1hcFRpbGVGbGFncyB7CglNYXBUaWxlRmxhZ3NfY2xhaW1lZCA9IDEwLAoJTWFwVGlsZUZsYWdzX21pbmluZ0luUHJvZ3Jlc3MsCgkKCU1hcFRpbGVGbGFnc19Mb3dDb3JuZXJUUExFRlQsCglNYXBUaWxlRmxhZ3NfTG93Q29ybmVyVFBSSUdIVCwKCU1hcFRpbGVGbGFnc19Mb3dDb3JuZXJCVE1SSUdIVCwKCU1hcFRpbGVGbGFnc19Mb3dDb3JuZXJCVE1MRUZULAoKCU1hcFRpbGVGbGFnc19Sb3RCaXQxLAoJTWFwVGlsZUZsYWdzX1JvdEJpdDIsCgoJTWFwVGlsZUZsYWdzX0V4cGxvcmVkLAoKCU1hcFRpbGVGbGFnc19QZWVwQ291bnQwLAoJTWFwVGlsZUZsYWdzX1BlZXBDb3VudDEsCglNYXBUaWxlRmxhZ3NfUGVlcENvdW50MiwKCglNYXBUaWxlRmxhZ3NfTEFTVEZMQUcKfSB0eXBlZGVmIE1hcFRpbGVGbGFnczsKCgoKCmVudW0gTWFwVGlsZSB7CglNYXBUaWxlX0RpcnQgPSAwLAoJTWFwVGlsZV9TYW5kLAoJTWFwVGlsZV9MaWdodEdyYXNzLAoJTWFwVGlsZV9EYXJrR3Jhc3MsCglNYXBUaWxlX1JvY2ssCglNYXBUaWxlX0dvbGRPcmUsCglNYXBUaWxlX0lyb25PcmUsCglNYXBUaWxlX0RpYW1vbmRPcmUsCglNYXBUaWxlX01vc3N5Um9jaywKCU1hcFRpbGVfU2hhZG93XzAsCglNYXBUaWxlX1NoYWRvd18xLAoJTWFwVGlsZV9TaGFkb3dfMiwKCU1hcFRpbGVfU2hhZG93XzMsCglNYXBUaWxlX1NoYWRvd180LAoJTWFwVGlsZV9MYXZhICAgICA9IDE2LAoJTWFwVGlsZV9XT09ER1JJRCwKCU1hcFRpbGVfTUFDSElORV9DUlVTSEVSLAoJTWFwVGlsZV9NQUNISU5FX0ZVUk5BQ0UsCglNYXBUaWxlX1NoYWRvd181ID0gMjUsCglNYXBUaWxlX1NoYWRvd182LAoJTWFwVGlsZV9TaGFkb3dfNywKCU1hcFRpbGVfU2hhZG93XzgsCglNYXBUaWxlX1NoYWRvd185LAoJTWFwVGlsZV9NQUNISU5FX0NPTU1BTkRfQ0VOVEVSID0gMzUsCglNYXBUaWxlX1NoYWRvd18xMCA9IDQxLAoJTWFwVGlsZV9TaGFkb3dfMTEsCglNYXBUaWxlX1NoYWRvd18xMiwKCU1hcFRpbGVfU2hhZG93XzEzLAoJTWFwVGlsZV9TaGFkb3dfMTQsCglNYXBUaWxlX1NoYWRvd18xNSwKCU1hcFRpbGVfU2hhZG93XzE2LAoKCU1hcFRpbGVfTk9ORSA9IDI1NQp9dHlwZWRlZiBNYXBUaWxlOwoKCiNkZWZpbmUgTlVNX0lURU1USUxFUyAoMykKZW51bSBJdGVtVGlsZSB7CglJdGVtVGlsZV9EdXN0ID0gMjAsCglJdGVtVGlsZV9CYXIgPSAyMSwKCUl0ZW1UaWxlX09yZSA9IDIyCn10eXBlZGVmIEl0ZW1UaWxlOwoKdW5pb24gVGlsZVVuaW9uIHsKCU1hcFRpbGUgbWFwVGlsZTsKCUl0ZW1UaWxlIGl0ZW1UaWxlOwp9dHlwZWRlZiBUaWxlVW5pb247CgoKc3RydWN0IE1hcExldmVsIHsJCgkvL1tYWFhYfEZGRkZ8RkZGRnxGRkZGfEZGRkZ8RkZGRnxBQUFBfEFBQUFdCgkvL0EgLSBNYXBUaWxlCgkvL0YgLSBGTEFHUwoJY2xfdWludCBkYXRhW01BUERJTV1bTUFQRElNXTsKCglvZmZzZXRQdHIgbWFjaGluZVB0cltNQVBESU1dW01BUERJTV07CgoJdWludCBwZWVwQ291bnRzW01BUERJTV1bTUFQRElNXTsKCXVpbnQgcGVlcENvdW50c19GaW5hbFtNQVBESU1dW01BUERJTV07Cn0gdHlwZWRlZiBNYXBMZXZlbDsKCnN0cnVjdCBNYXAgewoJTWFwTGV2ZWwgbGV2ZWxzW01BUERFUFRIXTsKCWNsX2ludCBtYXBXaWR0aDsKCWNsX2ludCBtYXBIZWlnaHQ7CgoKfSB0eXBlZGVmIE1hcDsKCiNkZWZpbmUgTUFYX1BFRVBTX1BFUl9TRUNUT1IgKDE2KQpzdHJ1Y3QgTWFwU2VjdG9yIHsKCW9mZnNldFB0ciBwZWVwUHRyc1tNQVhfUEVFUFNfUEVSX1NFQ1RPUl07CgljbF9pbnQgcHRySXRlcmF0b3I7CglvZmZzZXRQdHIyIHB0cjsKCWNsX3VpbnQgbG9jazsKCWJvb2wgZW1wdHk7CgoJaW50IGNodW5rU3RhcnQ7Cn0gdHlwZWRlZiBNYXBTZWN0b3I7CgoKc3RydWN0IEFTdGFyTm9kZSB7CglnZV9zaG9ydDMgdGlsZUlkeDsKCWludCBoX1ExNjsKCWludCBnX1ExNjsKCglvZmZzZXRQdHIzIG5leHRPUHRyOwoJb2Zmc2V0UHRyMyBwcmV2T1B0cjsKCn0gdHlwZWRlZiBBU3Rhck5vZGU7CgplbnVtIEFTdGFyUGF0aEZpbmRpbmdQcm9ncmVzcwp7CglBU3RhclBhdGhGaW5kaW5nUHJvZ3Jlc3NfUmVhZHksCglBU3RhclBhdGhGaW5kaW5nUHJvZ3Jlc3NfU2VhcmNoaW5nLAoJQVN0YXJQYXRoRmluZGluZ1Byb2dyZXNzX0ZpbmlzaGVkLAoJQVN0YXJQYXRoRmluZGluZ1Byb2dyZXNzX0ZhaWxlZAoKCn0gdHlwZWRlZiBBU3RhclBhdGhGaW5kaW5nUHJvZ3Jlc3M7CgoKI2RlZmluZSBBU1RBUkhFQVBTSVpFICgoTUFQRElNKk1BUERJTSpNQVBERVBUSCkvMTApCnN0cnVjdCBBU3RhclNlYXJjaF9CRlMgewoJQVN0YXJOb2RlIGRldGFpbHNbTUFQRElNXVtNQVBESU1dW01BUERFUFRIXTsKCQoJb2Zmc2V0UHRyMyBvcGVuSGVhcF9PUHRyc1tBU1RBUkhFQVBTSVpFXTsKCWNsX2ludCBvcGVuSGVhcFNpemU7CgkKCW9mZnNldFB0cjMgZW5kTm9kZU9QdHI7CglvZmZzZXRQdHIzIHN0YXJ0Tm9kZU9QdHI7CgoJY2xfdWNoYXIgY2xvc2VkTWFwW01BUERJTV1bTUFQRElNXVtNQVBERVBUSF07CgljbF91Y2hhciBvcGVuTWFwW01BUERJTV1bTUFQRElNXVtNQVBERVBUSF07CgkKCUFTdGFyUGF0aEZpbmRpbmdQcm9ncmVzcyBzdGF0ZTsKCglvZmZzZXRQdHIgcGF0aE9QdHI7Cgp9IHR5cGVkZWYgQVN0YXJTZWFyY2hfQkZTOwoKc3RydWN0IEFTdGFyTm9kZV9JREEKewoJZ2Vfc2hvcnQzIHRpbGVMb2M7Cglib29sIHNlYXJjaGVkU3VjY2Vzc29yc1syNl07CglpbnQgZ0Nvc3Q7Cgp9IHR5cGVkZWYgQVN0YXJOb2RlX0lEQTsKCiNkZWZpbmUgQVNUQVJTRUFSQ0hfSURBX1BBVEhNQVhTSVpFICgoTUFQRElNKjIpKQpzdHJ1Y3QgQVN0YXJTZWFyY2hfSURBIHsKCglnZV9zaG9ydDMgc3RhcnRMb2M7CglnZV9zaG9ydDMgZW5kTG9jOwoKCUFTdGFyTm9kZV9JREEgcGF0aFtBU1RBUlNFQVJDSF9JREFfUEFUSE1BWFNJWkVdOwoJaW50IHBhdGhFbmRJZHg7CgoJaW50IGJvdW5kOwoJaW50IHQ7CgoJQVN0YXJQYXRoRmluZGluZ1Byb2dyZXNzIHN0YXRlOwoJb2Zmc2V0UHRyIHBhdGhPUHRyOwp9IHR5cGVkZWYgQVN0YXJTZWFyY2hfSURBOwoKCgojZGVmaW5lIEFTVEFSUEFUSFNURVBTU0laRSAoKE1BUERJTSpNQVBESU0qTUFQREVQVEgpLzEwKQojZGVmaW5lIEFTVEFSX01BWF9QQVRIUyAoMTYpCnN0cnVjdCBBU3RhclBhdGhTdGVwcwp7CglBU3RhclBhdGhOb2RlIHBhdGhOb2Rlc1tBU1RBUlBBVEhTVEVQU1NJWkVdOwoJaW50IG5leHRMaXN0SWR4OwoKCW9mZnNldFB0ciBwYXRoU3RhcnRzW0FTVEFSX01BWF9QQVRIU107CglpbnQgbmV4dFBhdGhTdGFydElkeDsKCn10eXBlZGVmIEFTdGFyUGF0aFN0ZXBzOwoKc3RydWN0IFBlZXBSZW5kZXJTdXBwb3J0IHsKCWNsX2ludCByZW5kZXJfc2VsZWN0ZWRCeUNsaWVudDsKfXR5cGVkZWYgUGVlcFJlbmRlclN1cHBvcnQ7CgoKCgoKCgplbnVtIE1hY2hpbmVUeXBlcwp7CglNYWNoaW5lVHlwZXNfQ1JVU0hFUiwKCU1hY2hpbmVUeXBlc19TTUVMVEVSLAoJTWFjaGluZVR5cGVzX0NPTU1BTkRfQ0VOVEVSLAoKCU1hY2hpbmVUeXBlc19OVU1UWVBFUwp9IHR5cGVkZWYgTWFjaGluZVR5cGVzOwoKZW51bSBNYWNoaW5lUmVjaXBlcwp7CglNYWNoaW5lUmVjaXBlX0lOVkFMSUQsCglNYWNoaW5lUmVjaXBlX0lST05fT1JFX0NSVVNISU5HLAoJTWFjaGluZVJlY2lwZV9JUk9OX0RVU1RfU01FTFRJTkcsCgoJTWFjaGluZVJlY2lwZV9OVU1SRUNJUEVTCn0gdHlwZWRlZiBNYWNoaW5lUmVjaXBlczsKCgoKc3RydWN0IE1hY2hpbmVSZWNpcGUKewoJSXRlbVR5cGVzIGlucHV0VHlwZXNbOF07IGludCBudW1JbnB1dHM7CglJdGVtVHlwZXMgb3V0cHV0VHlwZXNbOF07IGludCBudW1PdXRwdXRzOwoKCWludCBpbnB1dFJhdGlvWzhdOwoJaW50IG91dHB1dFJhdGlvWzhdOwp9IHR5cGVkZWYgTWFjaGluZVJlY2lwZTsKCnN0cnVjdCBNYWNoaW5lRGVzYwp7CglNYWNoaW5lVHlwZXMgdHlwZTsKCU1hcFRpbGUgdGlsZTsKCgoKCWludCBwcm9jZXNzaW5nVGltZTsKfSB0eXBlZGVmIE1hY2hpbmVEZXNjOwoKZW51bSBNYWNoaW5lU3RhdGUKewoJTWFjaGluZVN0YXRlX0lkbGUsCglNYWNoaW5lU3RhdGVfUnVubmluZywKCU1hY2hpbmVTdGF0ZV9EYW1hZ2VkCn0gdHlwZWRlZiBNYWNoaW5lU3RhdGU7CgoKI2RlZmluZSBNQVhfTUFDSElORVMgKDEwMjQqNCkKc3RydWN0IE1hY2hpbmUKewoJYm9vbCB2YWxpZDsKCW9mZnNldFB0clNob3J0MyBtYXBUaWxlUHRyOwoJb2Zmc2V0UHRyIE1hY2hpbmVEZXNjUHRyOy8vcHRyIGludG8gYmFuayBvZiBkZXNjcmlwdGlvbnMuCgoJb2Zmc2V0UHRyIHJlY2lwZVB0cjsKCglpbnQgdGlja1Byb2dlc3M7CglNYWNoaW5lU3RhdGUgc3RhdGU7CglJbnZlbnRvcnkgaW52ZW50b3J5Owp9IHR5cGVkZWYgTWFjaGluZTsKCgoKCgojZGVmaW5lIE1BWF9PUkRFUlMgKDEwMjQpCmVudW0gT3JkZXJBY3Rpb25zCnsKCU9yZGVyQWN0aW9uX05PTkUsCglPcmRlckFjdGlvbl9NSU5FLAoJT3JkZXJBY3Rpb25fRFJPUE9GRl9NQUNISU5FLAoJT3JkZXJBY3Rpb25fUElDS1VQX01BQ0hJTkUsCglPcmRlckFjdGlvbl9XQVlQT0lOVCwKCU9yZGVyQWN0aW9uX0pVTVBfVE9fT1JERVIKfSB0eXBlZGVmIE9yZGVyQWN0aW9uczsKCgpzdHJ1Y3QgT3JkZXJBY3Rpb25EYXRhCnsKCW9mZnNldFB0ciBqdW1wVG9PcmRlclB0cjsKCn07CgoKc3RydWN0IE9yZGVyCnsKCWJvb2wgdmFsaWQ7Cglib29sIHBlbmRpbmdEZWxldGU7CgoJZ2VfaW50MyBtYXBEZXN0X0Nvb3JkOwoJT3JkZXJBY3Rpb25zIGFjdGlvbjsKCW9mZnNldFB0ciBuZXh0RXhlY3V0aW9uT3JkZXI7CglvZmZzZXRQdHIgcHJldkV4ZWN1dGlvbk9yZGVyOwoKCW9mZnNldFB0ciBuZXh0VmFsaWRPcmRlcjsKCW9mZnNldFB0ciBwcmV2VmFsaWRPcmRlcjsKCgoKCglvZmZzZXRQdHIgcGF0aFRvRGVzdFB0cjsKCn0gdHlwZWRlZiBPcmRlcjsKCgoKCgoKCgoKCgoKCgoKCmVudW0gRWRpdG9yVG9vbHMKewoJRWRpdG9yVG9vbHNfTm9uZSwKCUVkaXRvclRvb2xzX1NlbGVjdCwKCUVkaXRvclRvb2xzX0RlbGV0ZSwKCUVkaXRvclRvb2xzX0NyZWF0ZQp9IHR5cGVkZWYgRWRpdG9yVG9vbHM7CgoKCnN0cnVjdCBTeW5jaHJvbml6ZWRDbGllbnRTdGF0ZSB7CgoJY2xfaW50IGNvbm5lY3RlZDsKCWNsX3VpbnQgc2VsZWN0ZWRQZWVwc0xhc3RJZHg7CgoJb2Zmc2V0UHRyIHNlbGVjdGVkUGVlcFByaW1hcnk7CgoJUGVlcFJlbmRlclN1cHBvcnQgcGVlcFJlbmRlclN1cHBvcnRbTUFYX1BFRVBTXTsKCgoJZ2VfaW50MiBtb3VzZUdVSUJlZ2luOyBjbF91Y2hhciBtb3VzZU9uR1VpQmVnaW47CglnZV9pbnQyIG1vdXNlR1VJRW5kOwoKCQoJZ2VfaW50MiBtb3VzZVdvcmxkQmVnaW5fUTE2OwoJZ2VfaW50MiBtb3VzZVdvcmxkRW5kX1ExNjsKCglpbnQgbWFwWlZpZXc7CglpbnQgbWFwWlZpZXdfMTsKCglFZGl0b3JUb29scyBjdXJUb29sOwoJTWFjaGluZVR5cGVzIGN1clRvb2xNYWNoaW5lOwoKCWdlX3Nob3J0MyBzZWxlY3RlZE1hcENvb3JkOwoJb2Zmc2V0UHRyIHNlbGVjdGVkTWFjaGluZTsKCgoKCQoJU3luY2VkR3VpIGd1aTsKCn0gdHlwZWRlZiBTeW5jaHJvbml6ZWRDbGllbnRTdGF0ZTsKCgoKCgpzdHJ1Y3QgR2FtZVN0YXRlIHsKCglTeW5jaHJvbml6ZWRDbGllbnRTdGF0ZSBjbGllbnRTdGF0ZXNbTUFYX0NMSUVOVFNdOwoJY2xfaW50IG51bUNsaWVudHM7CgoKCVBlZXAgcGVlcHNbTUFYX1BFRVBTXTsKCQoJUGFydGljbGUgcGFydGljbGVzW01BWF9QQVJUSUNMRVNdOwoKCU1hcEV4cGxvcmVyQWdlbnQgZXhwbG9yZXJBZ2VudHNbR0FNRV9VUERBVEVfV09SS0lURU1TXTsKCQoJTWFwIG1hcDsKCU1hcFNlY3RvciBzZWN0b3JzW1NRUlRfTUFYU0VDVE9SU11bU1FSVF9NQVhTRUNUT1JTXTsKCQoJQVN0YXJTZWFyY2hfQkZTIG1hcFNlYXJjaGVyc1sxXTsKCglBU3RhclBhdGhTdGVwcyBwYXRoczsKCglNYWNoaW5lIG1hY2hpbmVzW01BWF9NQUNISU5FU107CglpbnQgbmV4dE1hY2hpbmVJZHg7CglNYWNoaW5lRGVzYyBtYWNoaW5lRGVzY3JpcHRpb25zW01hY2hpbmVUeXBlc19OVU1UWVBFU107CglNYWNoaW5lUmVjaXBlIG1hY2hpbmVSZWNpcGVzW01hY2hpbmVSZWNpcGVfTlVNUkVDSVBFU107CglNYWNoaW5lUmVjaXBlcyB2YWxpZE1hY2hpbmVSZWNpcGVzW01hY2hpbmVUeXBlc19OVU1UWVBFU11bTWFjaGluZVJlY2lwZV9OVU1SRUNJUEVTXTsKCVRpbGVVbmlvbiBJdGVtVHlwZVRpbGVzW0l0ZW1UeXBlc19OVU1JVEVNU107CglmbG9hdDMgSXRlbUNvbG9yc1tJdGVtVHlwZXNfTlVNSVRFTVNdOwoKCglPcmRlciBvcmRlcnNbTUFYX09SREVSU107CglpbnQgbmV4dE9yZGVySWR4OwoKCgoJLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1ub3Qgc3luY2VkCglTeW5jZWRHdWkgZmFrZVBhc3NHdWk7CglHdWlTdHlsZSBndWlTdHlsZTsKCWNsX3VpbnQgZGVidWdMaW5lc0lkeDsKCn0gdHlwZWRlZiBHYW1lU3RhdGU7CgoKI2RlZmluZSBJVEVNVFlQRV9TVFJJTkdfTUFYX0xFTkdUSCAoMTI4KQoKc3RydWN0IFN0YXRpY0RhdGEgewoJZ2VfaW50MyBkaXJlY3Rpb25hbE9mZnNldHNbMjZdOwoKCn10eXBlZGVmIFN0YXRpY0RhdGE7CgpfX2NvbnN0YW50IGNoYXIgSXRlbVR5cGVTdHJpbmdzW0l0ZW1UeXBlc19OVU1JVEVNU11bSVRFTVRZUEVfU1RSSU5HX01BWF9MRU5HVEhdID0geyAKCSJJbnZhbGlkIiwKICAgICJJcm9uIE9yZSIsCiAgICAiSXJvbiBEdXN0IiwKICAgICJJcm9uIEJhciIsCiAgICAiUm9jayBEdXN0IgogIH07CgAAAAAAAAAAqy8AAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					2,
					1,
					"revert",
					null,
					"",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					3,
					1,
					"revert",
					null,
					"",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "GameGPUCompute.h",
			"settings":
			{
				"buffer_size": 4420,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"CwAAAAAAAAAAAAAAAAAAAAAAAABgEAAAI3ByYWdtYSBvbmNlCgojaWZkZWYgX19BUFBMRV9fCiNpbmNsdWRlIDxPcGVuQ0wvb3BlbmNsLmg+CiNlbHNlCiNpbmNsdWRlIDxDTC9jbC5oPgojaW5jbHVkZSA8Q0wvY2xfZ2wuaD4KI2luY2x1ZGUgPENML2NsX2dsX2V4dC5oPgojZW5kaWYKCgojaW5jbHVkZSA8bWVtb3J5PgojaW5jbHVkZSA8dmFyaWFudD4KI2luY2x1ZGUgPHN0cmluZz4KI2luY2x1ZGUgPHZlY3Rvcj4KCiNpbmNsdWRlICJhc3NlcnQuaCIKCgojaW5jbHVkZSAib3BlbkNML2NwdV9ncHVfc3RydWN0cy5oIgoKI2RlZmluZSBHQU1FQ09NUFVURV9NQVhfU09VUkNFX1NJWkUgKDB4MTAwMDAwKQojZGVmaW5lIENMX0hPU1RfRVJST1JfQ0hFQ0socmV0KSBpZiAocmV0ICE9IDApIHtwcmludGYoIltHQU1FQ09NUFVURV0gcmV0IGF0ICVkIGlzICVkXG4iLCBfX0xJTkVfXywgcmV0KTsgZXJyb3JTdGF0ZSA9IHRydWU7IGZmbHVzaChzdGRvdXQpOyBhc3NlcnQoMCk7IH0KCgoKI2RlZmluZSBXQVJQU0laRSAoNjQpCgoKdHlwZWRlZiAgc3RkOjp2YXJpYW50PGludCwgZmxvYXQsIHN0ZDo6c3RyaW5nPiBHUFVDb21waWxlVmFyaWFudDsKCgoKCgpjbGFzcyBHYW1lU3RhdGVfUG9pbnRlcgp7CnB1YmxpYzoKCUdhbWVTdGF0ZV9Qb2ludGVyKHVpbnQ2NF90IHNpemUpIHsgCgkJZGF0YSA9IG5ldyBpbnQ4X3Rbc2l6ZV07CgkJbWVtc2V0KGRhdGEsIDAsIHNpemUpOwoJfQoJfkdhbWVTdGF0ZV9Qb2ludGVyKCkgeyBkZWxldGVbXSBkYXRhOyB9Cgl2b2lkKiBkYXRhID0gbnVsbHB0cjsKfTsKCgoKCgpjbGFzcyBHYW1lR3JhcGhpY3M7CmNsYXNzIEdhbWVHUFVDb21wdXRlCnsKcHVibGljOgoKCglHYW1lR1BVQ29tcHV0ZSgpOwoJfkdhbWVHUFVDb21wdXRlKCk7CgoKCgl2b2lkIEFkZENMU291cmNlKHN0ZDo6c3RyaW5nIHBhdGgpOwoKCgl2b2lkIEFkZENvbXBpbGVEZWZpbml0aW9uKHN0ZDo6c3RyaW5nIG5hbWUsIEdQVUNvbXBpbGVWYXJpYW50IHZhbCk7CgoJdm9pZCBSdW5Jbml0Q29tcHV0ZTAoKTsKCXZvaWQgUnVuSW5pdENvbXB1dGUxKCk7Cgl2b2lkIFJ1bkluaXRDb21wdXRlMigpOwoKCXZvaWQgU3RhZ2UxKCk7CgoJdm9pZCBSZWFkRnVsbEdhbWVTdGF0ZSgpOwoJdm9pZCBXcml0ZUZ1bGxHYW1lU3RhdGUoKTsKCgoJdm9pZCBXcml0ZUdhbWVTdGF0ZUIoKTsKCglzdGQ6OnN0cmluZyBHYW1lU3RhdGVTdHJpbmcoaW50IHRpY2tJZHgpOwoJdm9pZCBTYXZlR2FtZVN0YXRlQmFzZSgpOwoJdm9pZCBTYXZlR2FtZVN0YXRlRGlmZihzdGQ6OnZlY3RvcjxjaGFyPiogZGF0YSxib29sIGRlbGV0ZUZpbGUgPSB0cnVlKTsKCXZvaWQgTG9hZEdhbWVTdGF0ZUZyb21EaWZmKGludCB0aWNraWR4KTsKCXZvaWQgTG9hZEdhbWVTdGF0ZUZyb21EaWZmKHN0ZDo6c3RyaW5nIGRpZmZGaWxlTmFtZSwgc3RkOjpzdHJpbmcgcmVzdWx0R2FtZVN0YXRlRmlsZU5hbWUpOwoJdm9pZCBMb2FkR2FtZVN0YXRlRnJvbURpZmYoc3RkOjp2ZWN0b3I8Y2hhcj4qIGRhdGEsICBpbnQgaWQpOwoKCWVudW0gVkVORE9SCgl7CgkJTlZJRElBLAoJCUFNRAoJfTsKCgljbF9jb250ZXh0IGNvbnRleHQ7CgoJY2xfZGV2aWNlX2lkIGRldmljZV9pZCA9IE5VTEw7CiAgICBjbF91aW50IHJldF9udW1fZGV2aWNlczsKICAgIGNsX3VpbnQgcmV0X251bV9wbGF0Zm9ybXM7CiAgICBpbnQgcGZpZHggPSAwOwoJY2xfcGxhdGZvcm1faWQqIHBsYXRmb3JtczsKCVZFTkRPUiB2ZW5kb3I7CgoJY2xfY29tbWFuZF9xdWV1ZSBjb21tYW5kX3F1ZXVlOwoJY2xfcHJvZ3JhbSBnYW1lUHJvZ3JhbTsKCWNsX3Byb2dyYW0gcmF5R3VpSGVhZGVyOwoJY2xfcHJvZ3JhbSBmdWxsUHJvZ3JhbTsKCWNsX3Byb2dyYW0gdGVzdFByb2dyYW07CgoJY2xfa2VybmVsIHNpemV0ZXN0c19rZXJuZWw7CgoJY2xfa2VybmVsIHByZXVwZGF0ZV9rZXJuZWw7CgljbF9rZXJuZWwgcHJldXBkYXRlX2tlcm5lbF8yOwoJY2xfa2VybmVsIGdhbWVfdXBkYXRlcHJlMV9rZXJuZWw7CgljbF9rZXJuZWwgdXBkYXRlX2tlcm5lbDsKCWNsX2tlcm5lbCB1cGRhdGUyX2tlcm5lbDsKCWNsX2tlcm5lbCBwb3N0X3VwZGF0ZV9zaW5nbGVfa2VybmVsOwoJY2xfa2VybmVsIGFjdGlvbl9rZXJuZWw7CgljbF9rZXJuZWwgaW5pdF9rZXJuZWw7CgljbF9rZXJuZWwgaW5pdF9rZXJuYWxfbXVsdGk7CgljbF9rZXJuZWwgaW5pdF9rZXJuYWxfbXVsdGkyOwoJY2xfa2VybmVsIGluaXRfa2VybmVsXzI7CgoKCglzdGQ6OnZlY3RvcjxjbF9rZXJuZWw+IGtlcm5lbHM7CgoJY2xfZXZlbnQgaW5pdEV2ZW50OwoJY2xfZXZlbnQgaW5pdE11bHRpRXZlbnQ7CgljbF9ldmVudCBpbml0TXVsdGlFdmVudDI7CgljbF9ldmVudCBpbml0MkV2ZW50OwoJY2xfZXZlbnQgcHJlVXBkYXRlRXZlbnQxOwoJY2xfZXZlbnQgcHJlVXBkYXRlRXZlbnQyOwoJY2xfZXZlbnQgdXBkYXRlcHJlMUV2ZW50OyAgICAKCWNsX2V2ZW50IHVwZGF0ZUV2ZW50OyAgCgljbF9ldmVudCB1cGRhdGUyRXZlbnQ7ICAgICAgCgljbF9ldmVudCBwb3N0dXBkYXRlRXZlbnQ7CgljbF9ldmVudCBhY3Rpb25FdmVudDsKCWNsX2V2ZW50IHJlYWRFdmVudDsKCWNsX2V2ZW50IHdyaXRlRXZlbnQ7ICAgIAoJCgoKCVNJWkVURVNUU0RBVEEgc3RydWN0U2l6ZXM7CgoJaW50IHdhcnBTaXplID0gMzI7CglpbnQgbWF4UGVlcHMgPSAxMDI0KjE2OwoJaW50IG1heFBhcnRpY2xlcyA9IDMyOwoJaW50IG1hcERpbSA9IDEwMjQ7CglpbnQgbWFwRGVwdGggPSAzMjsKCWludCBtYXBUaWxlU2l6ZSA9IDU7CiAgICBpbnQgbWF4R3VpUmVjdHMgPSAxMDI0OwoJaW50IG1heExpbmVzID0gMTAyNCo2NDsKCiAgICBsb25nIEdhbWVVcGRhdGVXb3JrSXRlbXMgOwogICAgc2l6ZV90IFdvcmtJdGVtc1sxXSAgOwoJc2l6ZV90IFdvcmtJdGVtc0luaXRNdWx0aVsxXSA7CglzaXplX3QgV29ya0l0ZW1zMVdhcnBbMV0gOwogICAgc2l6ZV90IFNpbmdsZUtlcm5lbFdvcmtJdGVtc1sxXTsKICAgIHNpemVfdCBTaW5nbGVLZXJuZWxXb3JrSXRlbXNQZXJXb3JrR3JvdXBbMV07CgoKCgljbF9tZW0gc2l6ZVRlc3RzX21lbV9vYmo7CgoJY2xfbWVtIHN5bmNoQ2xpZW50c19tZW1fb2JqOwoJY2xfbWVtIHN0YXRpY0RhdGFfbWVtX29iajsKCWNsX21lbSBnYW1lc3RhdGVfbWVtX29iajsKCWNsX21lbSBnYW1lc3RhdGVCX21lbV9vYmo7CgoJY2xfbWVtIGdyYXBoaWNzX3BlZXBzX21lbV9vYmo7CgljbF9tZW0gZ3JhcGhpY3NfcGFydGljbGVzX21lbV9vYmo7CgoJY2xfbWVtIGdyYXBoaWNzX21hcFRpbGUxVkJPX21lbV9vYmo7CgljbF9tZW0gZ3JhcGhpY3NfbWFwVGlsZTFBdHRyVkJPX21lbV9vYmo7CgljbF9tZW0gZ3JhcGhpY3NfbWFwVGlsZTFPdGhlckF0dHJWQk9fbWVtX29iajsKCgljbF9tZW0gZ3JhcGhpY3NfbWFwVGlsZTJWQk9fbWVtX29iajsKCWNsX21lbSBncmFwaGljc19tYXBUaWxlMkF0dHJWQk9fbWVtX29iajsKCWNsX21lbSBncmFwaGljc19tYXBUaWxlMk90aGVyQXR0clZCT19tZW1fb2JqOwoKCWNsX21lbSBncmFwaGljc19ndWlWQk9fb2JqOwoJY2xfbWVtIGdyYXBoaWNzX2xpbmVzVkJPX29iajsKCglzdGQ6OnZlY3RvcjxjbF9tZW0+IGdyYXBoaWNzT2JqZWN0czsKCgl2b2lkIEJ1aWxkS2VybmVsUnVuU2l6ZXMoKTsKCgoJc3RkOjpzaGFyZWRfcHRyPEdhbWVTdGF0ZV9Qb2ludGVyPiBnYW1lU3RhdGU7CglzdGQ6OnNoYXJlZF9wdHI8R2FtZVN0YXRlQWN0aW9ucz4gZ2FtZVN0YXRlQWN0aW9uczsKCUdhbWVHcmFwaGljcyogZ3JhcGhpY3MgPSBudWxscHRyOwoKCXN0ZDo6dmVjdG9yPHN0ZDo6cGFpcjxzdGQ6OnN0cmluZywgR1BVQ29tcGlsZVZhcmlhbnQ+PiBjb21waWxlRGVmaW5pdGlvbnM7CgoJYm9vbCBlcnJvclN0YXRlID0gZmFsc2U7CgljbF9pbnQgcmV0ID0gMDsKCglzdGQ6OnN0cmluZyBidWlsZFByZVByb2Nlc3NvclN0cmluZygpOwoJdm9pZCB3cml0ZVByZVByb2Nlc3NvckhlYWRlckZpbGUoKTsKCglzdGQ6OnN0cmluZyBjb21waWxlVmFyaWFudFN0cmluZyhHUFVDb21waWxlVmFyaWFudCB2YXJpYW50KTsKCgoJdm9pZCBBcXVpcmVBbGxHcmFwaGljc09iamVjdHMoKTsKCXZvaWQgUmVsZWFzZUFsbEdyYXBoaWNzT2JqZWN0cygpOwoKCgoJc3RkOjp2ZWN0b3I8dWludDY0X3Q+IGNsU291cmNlQ0hLU1VNUzsKICAgIHN0ZDo6dmVjdG9yPHN0ZDo6c3RyaW5nPiBjbFNvdXJjZVBhdGhzOwogICAgc3RkOjp2ZWN0b3I8c3RkOjp2ZWN0b3I8Y2hhcj4+IGNsU291cmNlczsKfTsKCgAAAAAAAAAAcxAAAAAAAAAAAAAAAAAAAAAAAABzEAAAAAAAAAAAAAAAAAAAAAAAAHUQAAAAAAAAAAAAAAAAAAAAAAAAdRAAAAAAAAAAAAAAAAAAAAAAAAB1EAAAAAAAAAAAAAAAAAAAAAAAAHUQAAAAAAAAAAAAAAAAAAAAAAAAdRAAAAAAAAAAAAAAAAAAAAAAAAB1EAAAAAAAAAAAAAAAAAAAAAAAAHUQAAAAAAAAAAAAAAAAAAAAAAAAoBAAAAAAAAAAAAAA",
					"GAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANwKAAAAAAAA3AoAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACgEAAAI3ByYWdtYSBvbmNlCgojaWZkZWYgX19BUFBMRV9fCiNpbmNsdWRlIDxPcGVuQ0wvb3BlbmNsLmg+CiNlbHNlCiNpbmNsdWRlIDxDTC9jbC5oPgojaW5jbHVkZSA8Q0wvY2xfZ2wuaD4KI2luY2x1ZGUgPENML2NsX2dsX2V4dC5oPgojZW5kaWYKCgojaW5jbHVkZSA8bWVtb3J5PgojaW5jbHVkZSA8dmFyaWFudD4KI2luY2x1ZGUgPHN0cmluZz4KI2luY2x1ZGUgPHZlY3Rvcj4KCiNpbmNsdWRlICJhc3NlcnQuaCIKCiNpbmNsdWRlICJDb21tb24uaCIKI2luY2x1ZGUgIm9wZW5DTC9jcHVfZ3B1X3N0cnVjdHMuaCIKCiNkZWZpbmUgR0FNRUNPTVBVVEVfTUFYX1NPVVJDRV9TSVpFICgweDEwMDAwMCkKI2RlZmluZSBDTF9IT1NUX0VSUk9SX0NIRUNLKHJldCkgaWYgKHJldCAhPSAwKSB7cHJpbnRmKCJbR0FNRUNPTVBVVEVdIHJldCBhdCAlZCBpcyAlZFxuIiwgX19MSU5FX18sIHJldCk7IGVycm9yU3RhdGUgPSB0cnVlOyBmZmx1c2goc3Rkb3V0KTsgYXNzZXJ0KDApOyB9CgoKCiNkZWZpbmUgV0FSUFNJWkUgKDY0KQoKCnR5cGVkZWYgIHN0ZDo6dmFyaWFudDxpbnQsIGZsb2F0LCBzdGQ6OnN0cmluZz4gR1BVQ29tcGlsZVZhcmlhbnQ7CgoKCgoKY2xhc3MgR2FtZVN0YXRlX1BvaW50ZXIKewpwdWJsaWM6CglHYW1lU3RhdGVfUG9pbnRlcih1aW50NjRfdCBzaXplKSB7IAoJCWRhdGEgPSBuZXcgaW50OF90W3NpemVdOwoJCW1lbXNldChkYXRhLCAwLCBzaXplKTsKCX0KCX5HYW1lU3RhdGVfUG9pbnRlcigpIHsgZGVsZXRlW10gZGF0YTsgfQoJdm9pZCogZGF0YSA9IG51bGxwdHI7Cn07CgoKCgoKY2xhc3MgR2FtZUdyYXBoaWNzOwpjbGFzcyBHYW1lR1BVQ29tcHV0ZQp7CnB1YmxpYzoKCgoJR2FtZUdQVUNvbXB1dGUoKTsKCX5HYW1lR1BVQ29tcHV0ZSgpOwoKCgoJdm9pZCBBZGRDTFNvdXJjZShzdGQ6OnN0cmluZyBwYXRoKTsKCgoJdm9pZCBBZGRDb21waWxlRGVmaW5pdGlvbihzdGQ6OnN0cmluZyBuYW1lLCBHUFVDb21waWxlVmFyaWFudCB2YWwpOwoKCXZvaWQgUnVuSW5pdENvbXB1dGUwKCk7Cgl2b2lkIFJ1bkluaXRDb21wdXRlMSgpOwoJdm9pZCBSdW5Jbml0Q29tcHV0ZTIoKTsKCgl2b2lkIFN0YWdlMSgpOwoKCXZvaWQgUmVhZEZ1bGxHYW1lU3RhdGUoKTsKCXZvaWQgV3JpdGVGdWxsR2FtZVN0YXRlKCk7CgoKCXZvaWQgV3JpdGVHYW1lU3RhdGVCKCk7CgoJc3RkOjpzdHJpbmcgR2FtZVN0YXRlU3RyaW5nKGludCB0aWNrSWR4KTsKCXZvaWQgU2F2ZUdhbWVTdGF0ZUJhc2UoKTsKCXZvaWQgU2F2ZUdhbWVTdGF0ZURpZmYoc3RkOjp2ZWN0b3I8Y2hhcj4qIGRhdGEsYm9vbCBkZWxldGVGaWxlID0gdHJ1ZSk7Cgl2b2lkIExvYWRHYW1lU3RhdGVGcm9tRGlmZihpbnQgdGlja2lkeCk7Cgl2b2lkIExvYWRHYW1lU3RhdGVGcm9tRGlmZihzdGQ6OnN0cmluZyBkaWZmRmlsZU5hbWUsIHN0ZDo6c3RyaW5nIHJlc3VsdEdhbWVTdGF0ZUZpbGVOYW1lKTsKCXZvaWQgTG9hZEdhbWVTdGF0ZUZyb21EaWZmKHN0ZDo6dmVjdG9yPGNoYXI+KiBkYXRhLCAgaW50IGlkKTsKCgllbnVtIFZFTkRPUgoJewoJCU5WSURJQSwKCQlBTUQKCX07CgoJY2xfY29udGV4dCBjb250ZXh0OwoKCWNsX2RldmljZV9pZCBkZXZpY2VfaWQgPSBOVUxMOwogICAgY2xfdWludCByZXRfbnVtX2RldmljZXM7CiAgICBjbF91aW50IHJldF9udW1fcGxhdGZvcm1zOwogICAgaW50IHBmaWR4ID0gMDsKCWNsX3BsYXRmb3JtX2lkKiBwbGF0Zm9ybXM7CglWRU5ET1IgdmVuZG9yOwoKCWNsX2NvbW1hbmRfcXVldWUgY29tbWFuZF9xdWV1ZTsKCWNsX3Byb2dyYW0gZ2FtZVByb2dyYW07CgljbF9wcm9ncmFtIHJheUd1aUhlYWRlcjsKCWNsX3Byb2dyYW0gZnVsbFByb2dyYW07CgljbF9wcm9ncmFtIHRlc3RQcm9ncmFtOwoKCWNsX2tlcm5lbCBzaXpldGVzdHNfa2VybmVsOwoKCWNsX2tlcm5lbCBwcmV1cGRhdGVfa2VybmVsOwoJY2xfa2VybmVsIHByZXVwZGF0ZV9rZXJuZWxfMjsKCWNsX2tlcm5lbCBnYW1lX3VwZGF0ZXByZTFfa2VybmVsOwoJY2xfa2VybmVsIHVwZGF0ZV9rZXJuZWw7CgljbF9rZXJuZWwgdXBkYXRlMl9rZXJuZWw7CgljbF9rZXJuZWwgcG9zdF91cGRhdGVfc2luZ2xlX2tlcm5lbDsKCWNsX2tlcm5lbCBhY3Rpb25fa2VybmVsOwoJY2xfa2VybmVsIGd1aV9rZXJuZWw7CgljbF9rZXJuZWwgaW5pdF9rZXJuZWw7CgljbF9rZXJuZWwgaW5pdF9rZXJuYWxfbXVsdGk7CgljbF9rZXJuZWwgaW5pdF9rZXJuYWxfbXVsdGkyOwoJY2xfa2VybmVsIGluaXRfa2VybmVsXzI7CgoKCglzdGQ6OnZlY3RvcjxjbF9rZXJuZWw+IGtlcm5lbHM7CgoJY2xfZXZlbnQgaW5pdEV2ZW50OwoJY2xfZXZlbnQgaW5pdE11bHRpRXZlbnQ7CgljbF9ldmVudCBpbml0TXVsdGlFdmVudDI7CgljbF9ldmVudCBpbml0MkV2ZW50OwoJY2xfZXZlbnQgcHJlVXBkYXRlRXZlbnQxOwoJY2xfZXZlbnQgcHJlVXBkYXRlRXZlbnQyOwoJY2xfZXZlbnQgdXBkYXRlcHJlMUV2ZW50OyAgICAKCWNsX2V2ZW50IHVwZGF0ZUV2ZW50OyAgCgljbF9ldmVudCB1cGRhdGUyRXZlbnQ7ICAgICAgCgljbF9ldmVudCBwb3N0dXBkYXRlRXZlbnQ7CgljbF9ldmVudCBhY3Rpb25FdmVudDsKCWNsX2V2ZW50IGd1aUV2ZW50OwoJY2xfZXZlbnQgcmVhZEV2ZW50OwoJY2xfZXZlbnQgd3JpdGVFdmVudDsgICAgCgkKCgoJU0laRVRFU1RTREFUQSBzdHJ1Y3RTaXplczsKCglpbnQgd2FycFNpemUgPSAzMjsKCWludCBtYXhQZWVwcyA9IDEwMjQqODsKCWludCBtYXhQYXJ0aWNsZXMgPSAzMjsKCWludCBtYXBEaW0gPSAxMDI0OwoJaW50IG1hcERlcHRoID0gMzI7CglpbnQgbWFwVGlsZVNpemUgPSA1OwogICAgaW50IG1heEd1aVJlY3RzID0gMTAyNCoxNjsKCWludCBtYXhMaW5lcyA9IDEwMjQqNjQ7CgogICAgbG9uZyBHYW1lVXBkYXRlV29ya0l0ZW1zIDsKICAgIHNpemVfdCBXb3JrSXRlbXNbMV0gIDsKCXNpemVfdCBXb3JrSXRlbXNJbml0TXVsdGlbMV0gOwoJc2l6ZV90IFdvcmtJdGVtczFXYXJwWzFdIDsKICAgIHNpemVfdCBTaW5nbGVLZXJuZWxXb3JrSXRlbXNbMV07CiAgICBzaXplX3QgU2luZ2xlS2VybmVsV29ya0l0ZW1zUGVyV29ya0dyb3VwWzFdOwoKCgoJY2xfbWVtIHNpemVUZXN0c19tZW1fb2JqOwoKCWNsX21lbSBzeW5jaENsaWVudHNfbWVtX29iajsKCWNsX21lbSBzdGF0aWNEYXRhX21lbV9vYmo7CgljbF9tZW0gZ2FtZXN0YXRlX21lbV9vYmo7CgljbF9tZW0gZ2FtZXN0YXRlQl9tZW1fb2JqOwoKCWNsX21lbSBncmFwaGljc19wZWVwc19tZW1fb2JqOwoJY2xfbWVtIGdyYXBoaWNzX3BhcnRpY2xlc19tZW1fb2JqOwoKCWNsX21lbSBncmFwaGljc19tYXBUaWxlMVZCT19tZW1fb2JqOwoJY2xfbWVtIGdyYXBoaWNzX21hcFRpbGUxQXR0clZCT19tZW1fb2JqOwoJY2xfbWVtIGdyYXBoaWNzX21hcFRpbGUxT3RoZXJBdHRyVkJPX21lbV9vYmo7CgoJY2xfbWVtIGdyYXBoaWNzX21hcFRpbGUyVkJPX21lbV9vYmo7CgljbF9tZW0gZ3JhcGhpY3NfbWFwVGlsZTJBdHRyVkJPX21lbV9vYmo7CgljbF9tZW0gZ3JhcGhpY3NfbWFwVGlsZTJPdGhlckF0dHJWQk9fbWVtX29iajsKCgljbF9tZW0gZ3JhcGhpY3NfZ3VpVkJPX29iajsKCWNsX21lbSBncmFwaGljc19saW5lc1ZCT19vYmo7CgoJc3RkOjp2ZWN0b3I8Y2xfbWVtPiBncmFwaGljc09iamVjdHM7CgoJdm9pZCBCdWlsZEtlcm5lbFJ1blNpemVzKCk7CgoKCXN0ZDo6c2hhcmVkX3B0cjxHYW1lU3RhdGVfUG9pbnRlcj4gZ2FtZVN0YXRlOwoJc3RkOjpzaGFyZWRfcHRyPEdhbWVTdGF0ZUFjdGlvbnM+IGdhbWVTdGF0ZUFjdGlvbnM7CglHYW1lR3JhcGhpY3MqIGdyYXBoaWNzID0gbnVsbHB0cjsKCglzdGQ6OnZlY3RvcjxzdGQ6OnBhaXI8c3RkOjpzdHJpbmcsIEdQVUNvbXBpbGVWYXJpYW50Pj4gY29tcGlsZURlZmluaXRpb25zOwoKCWJvb2wgZXJyb3JTdGF0ZSA9IGZhbHNlOwoJY2xfaW50IHJldCA9IDA7CgoJc3RkOjpzdHJpbmcgYnVpbGRQcmVQcm9jZXNzb3JTdHJpbmcoKTsKCXZvaWQgd3JpdGVQcmVQcm9jZXNzb3JIZWFkZXJGaWxlKCk7CgoJc3RkOjpzdHJpbmcgY29tcGlsZVZhcmlhbnRTdHJpbmcoR1BVQ29tcGlsZVZhcmlhbnQgdmFyaWFudCk7CgoKCXZvaWQgQXF1aXJlQWxsR3JhcGhpY3NPYmplY3RzKCk7Cgl2b2lkIFJlbGVhc2VBbGxHcmFwaGljc09iamVjdHMoKTsKCgoKCXN0ZDo6dmVjdG9yPHVpbnQ2NF90PiBjbFNvdXJjZUNIS1NVTVM7CiAgICBzdGQ6OnZlY3RvcjxzdGQ6OnN0cmluZz4gY2xTb3VyY2VQYXRoczsKICAgIHN0ZDo6dmVjdG9yPHN0ZDo6dmVjdG9yPGNoYXI+PiBjbFNvdXJjZXM7Cn07CgoAAAAAAAAAAMMQAAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					2,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAADDEAAAI3ByYWdtYSBvbmNlCgojaWZkZWYgX19BUFBMRV9fCiNpbmNsdWRlIDxPcGVuQ0wvb3BlbmNsLmg+CiNlbHNlCiNpbmNsdWRlIDxDTC9jbC5oPgojaW5jbHVkZSA8Q0wvY2xfZ2wuaD4KI2luY2x1ZGUgPENML2NsX2dsX2V4dC5oPgojZW5kaWYKCgojaW5jbHVkZSA8bWVtb3J5PgojaW5jbHVkZSA8dmFyaWFudD4KI2luY2x1ZGUgPHN0cmluZz4KI2luY2x1ZGUgPHZlY3Rvcj4KCiNpbmNsdWRlICJhc3NlcnQuaCIKCiNpbmNsdWRlICJDb21tb24uaCIKI2luY2x1ZGUgIm9wZW5DTC9jcHVfZ3B1X3N0cnVjdHMuaCIKCiNkZWZpbmUgR0FNRUNPTVBVVEVfTUFYX1NPVVJDRV9TSVpFICgweDEwMDAwMCkKI2RlZmluZSBDTF9IT1NUX0VSUk9SX0NIRUNLKHJldCkgaWYgKHJldCAhPSAwKSB7cHJpbnRmKCJbR0FNRUNPTVBVVEVdIHJldCBhdCAlZCBpcyAlZFxuIiwgX19MSU5FX18sIHJldCk7IGVycm9yU3RhdGUgPSB0cnVlOyBmZmx1c2goc3Rkb3V0KTsgYXNzZXJ0KDApOyB9CgoKCiNkZWZpbmUgV0FSUFNJWkUgKDY0KQoKCnR5cGVkZWYgIHN0ZDo6dmFyaWFudDxpbnQsIGZsb2F0LCBzdGQ6OnN0cmluZz4gR1BVQ29tcGlsZVZhcmlhbnQ7CgoKCgoKY2xhc3MgR2FtZVN0YXRlX1BvaW50ZXIKewpwdWJsaWM6CglHYW1lU3RhdGVfUG9pbnRlcih1aW50NjRfdCBzaXplKSB7IAoJCWRhdGEgPSBuZXcgaW50OF90W3NpemVdOwoJCW1lbXNldChkYXRhLCAwLCBzaXplKTsKCX0KCX5HYW1lU3RhdGVfUG9pbnRlcigpIHsgZGVsZXRlW10gZGF0YTsgfQoJdm9pZCogZGF0YSA9IG51bGxwdHI7Cn07CgoKCgoKY2xhc3MgR2FtZUdyYXBoaWNzOwpjbGFzcyBHYW1lR1BVQ29tcHV0ZQp7CnB1YmxpYzoKCgoJR2FtZUdQVUNvbXB1dGUoKTsKCX5HYW1lR1BVQ29tcHV0ZSgpOwoKCgoJdm9pZCBBZGRDTFNvdXJjZShzdGQ6OnN0cmluZyBwYXRoKTsKCgoJdm9pZCBBZGRDb21waWxlRGVmaW5pdGlvbihzdGQ6OnN0cmluZyBuYW1lLCBHUFVDb21waWxlVmFyaWFudCB2YWwpOwoKCXZvaWQgUnVuSW5pdENvbXB1dGUwKCk7Cgl2b2lkIFJ1bkluaXRDb21wdXRlMSgpOwoJdm9pZCBSdW5Jbml0Q29tcHV0ZTIoKTsKCgl2b2lkIFN0YWdlMSgpOwoKCXZvaWQgUmVhZEZ1bGxHYW1lU3RhdGUoKTsKCXZvaWQgV3JpdGVGdWxsR2FtZVN0YXRlKCk7CgoKCXZvaWQgV3JpdGVHYW1lU3RhdGVCKCk7CgoJc3RkOjpzdHJpbmcgR2FtZVN0YXRlU3RyaW5nKGludCB0aWNrSWR4KTsKCXZvaWQgU2F2ZUdhbWVTdGF0ZUJhc2UoKTsKCXZvaWQgU2F2ZUdhbWVTdGF0ZURpZmYoc3RkOjp2ZWN0b3I8Y2hhcj4qIGRhdGEsYm9vbCBkZWxldGVGaWxlID0gdHJ1ZSk7Cgl2b2lkIExvYWRHYW1lU3RhdGVGcm9tRGlmZihpbnQgdGlja2lkeCk7Cgl2b2lkIExvYWRHYW1lU3RhdGVGcm9tRGlmZihzdGQ6OnN0cmluZyBkaWZmRmlsZU5hbWUsIHN0ZDo6c3RyaW5nIHJlc3VsdEdhbWVTdGF0ZUZpbGVOYW1lKTsKCXZvaWQgTG9hZEdhbWVTdGF0ZUZyb21EaWZmKHN0ZDo6dmVjdG9yPGNoYXI+KiBkYXRhLCAgaW50IGlkKTsKCgllbnVtIFZFTkRPUgoJewoJCU5WSURJQSwKCQlBTUQKCX07CgoJY2xfY29udGV4dCBjb250ZXh0OwoKCWNsX2RldmljZV9pZCBkZXZpY2VfaWQgPSBOVUxMOwogICAgY2xfdWludCByZXRfbnVtX2RldmljZXM7CiAgICBjbF91aW50IHJldF9udW1fcGxhdGZvcm1zOwogICAgaW50IHBmaWR4ID0gMDsKCWNsX3BsYXRmb3JtX2lkKiBwbGF0Zm9ybXM7CglWRU5ET1IgdmVuZG9yOwoKCWNsX2NvbW1hbmRfcXVldWUgY29tbWFuZF9xdWV1ZTsKCWNsX2NvbW1hbmRfcXVldWUgY29tbWFuZF9xdWV1ZTI7CgoJY2xfcHJvZ3JhbSBnYW1lUHJvZ3JhbTsKCWNsX3Byb2dyYW0gcmF5R3VpSGVhZGVyOwoJY2xfcHJvZ3JhbSBmdWxsUHJvZ3JhbTsKCWNsX3Byb2dyYW0gdGVzdFByb2dyYW07CgoJY2xfa2VybmVsIHNpemV0ZXN0c19rZXJuZWw7CgoJY2xfa2VybmVsIHByZXVwZGF0ZV9rZXJuZWw7CgljbF9rZXJuZWwgcHJldXBkYXRlX2tlcm5lbF8yOwoJY2xfa2VybmVsIGdhbWVfdXBkYXRlcHJlMV9rZXJuZWw7CgljbF9rZXJuZWwgdXBkYXRlX2tlcm5lbDsKCWNsX2tlcm5lbCB1cGRhdGUyX2tlcm5lbDsKCWNsX2tlcm5lbCBwb3N0X3VwZGF0ZV9zaW5nbGVfa2VybmVsOwoJY2xfa2VybmVsIGFjdGlvbl9rZXJuZWw7CgljbF9rZXJuZWwgZ3VpX2tlcm5lbDsKCWNsX2tlcm5lbCBpbml0X2tlcm5lbDsKCWNsX2tlcm5lbCBpbml0X2tlcm5hbF9tdWx0aTsKCWNsX2tlcm5lbCBpbml0X2tlcm5hbF9tdWx0aTI7CgljbF9rZXJuZWwgaW5pdF9rZXJuZWxfMjsKCgoKCXN0ZDo6dmVjdG9yPGNsX2tlcm5lbD4ga2VybmVsczsKCgljbF9ldmVudCBpbml0RXZlbnQ7CgljbF9ldmVudCBpbml0TXVsdGlFdmVudDsKCWNsX2V2ZW50IGluaXRNdWx0aUV2ZW50MjsKCWNsX2V2ZW50IGluaXQyRXZlbnQ7CgljbF9ldmVudCBwcmVVcGRhdGVFdmVudDE7CgljbF9ldmVudCBwcmVVcGRhdGVFdmVudDI7CgljbF9ldmVudCB1cGRhdGVwcmUxRXZlbnQ7ICAgIAoJY2xfZXZlbnQgdXBkYXRlRXZlbnQ7ICAKCWNsX2V2ZW50IHVwZGF0ZTJFdmVudDsgICAgICAKCWNsX2V2ZW50IHBvc3R1cGRhdGVFdmVudDsKCWNsX2V2ZW50IGFjdGlvbkV2ZW50OwoJY2xfZXZlbnQgZ3VpRXZlbnQ7CgljbF9ldmVudCByZWFkRXZlbnQ7CgljbF9ldmVudCB3cml0ZUV2ZW50OyAgICAKCQoKCglTSVpFVEVTVFNEQVRBIHN0cnVjdFNpemVzOwoKCWludCB3YXJwU2l6ZSA9IDMyOwoJaW50IG1heFBlZXBzID0gMTAyNCo4OwoJaW50IG1heFBhcnRpY2xlcyA9IDMyOwoJaW50IG1hcERpbSA9IDEwMjQ7CglpbnQgbWFwRGVwdGggPSAzMjsKCWludCBtYXBUaWxlU2l6ZSA9IDU7CiAgICBpbnQgbWF4R3VpUmVjdHMgPSAxMDI0KjE2OwoJaW50IG1heExpbmVzID0gMTAyNCo2NDsKCiAgICBsb25nIEdhbWVVcGRhdGVXb3JrSXRlbXMgOwogICAgc2l6ZV90IFdvcmtJdGVtc1sxXSAgOwoJc2l6ZV90IFdvcmtJdGVtc0luaXRNdWx0aVsxXSA7CglzaXplX3QgV29ya0l0ZW1zMVdhcnBbMV0gOwogICAgc2l6ZV90IFNpbmdsZUtlcm5lbFdvcmtJdGVtc1sxXTsKICAgIHNpemVfdCBTaW5nbGVLZXJuZWxXb3JrSXRlbXNQZXJXb3JrR3JvdXBbMV07CgoKCgljbF9tZW0gc2l6ZVRlc3RzX21lbV9vYmo7CgoJY2xfbWVtIHN5bmNoQ2xpZW50c19tZW1fb2JqOwoJY2xfbWVtIHN0YXRpY0RhdGFfbWVtX29iajsKCWNsX21lbSBnYW1lc3RhdGVfbWVtX29iajsKCWNsX21lbSBnYW1lc3RhdGVCX21lbV9vYmo7CgoJY2xfbWVtIGdyYXBoaWNzX3BlZXBzX21lbV9vYmo7CgljbF9tZW0gZ3JhcGhpY3NfcGFydGljbGVzX21lbV9vYmo7CgoJY2xfbWVtIGdyYXBoaWNzX21hcFRpbGUxVkJPX21lbV9vYmo7CgljbF9tZW0gZ3JhcGhpY3NfbWFwVGlsZTFBdHRyVkJPX21lbV9vYmo7CgljbF9tZW0gZ3JhcGhpY3NfbWFwVGlsZTFPdGhlckF0dHJWQk9fbWVtX29iajsKCgljbF9tZW0gZ3JhcGhpY3NfbWFwVGlsZTJWQk9fbWVtX29iajsKCWNsX21lbSBncmFwaGljc19tYXBUaWxlMkF0dHJWQk9fbWVtX29iajsKCWNsX21lbSBncmFwaGljc19tYXBUaWxlMk90aGVyQXR0clZCT19tZW1fb2JqOwoKCWNsX21lbSBncmFwaGljc19ndWlWQk9fb2JqOwoJY2xfbWVtIGdyYXBoaWNzX2xpbmVzVkJPX29iajsKCglzdGQ6OnZlY3RvcjxjbF9tZW0+IGdyYXBoaWNzT2JqZWN0czsKCgl2b2lkIEJ1aWxkS2VybmVsUnVuU2l6ZXMoKTsKCgoJc3RkOjpzaGFyZWRfcHRyPEdhbWVTdGF0ZV9Qb2ludGVyPiBnYW1lU3RhdGU7CglzdGQ6OnNoYXJlZF9wdHI8R2FtZVN0YXRlQWN0aW9ucz4gZ2FtZVN0YXRlQWN0aW9uczsKCUdhbWVHcmFwaGljcyogZ3JhcGhpY3MgPSBudWxscHRyOwoKCXN0ZDo6dmVjdG9yPHN0ZDo6cGFpcjxzdGQ6OnN0cmluZywgR1BVQ29tcGlsZVZhcmlhbnQ+PiBjb21waWxlRGVmaW5pdGlvbnM7CgoJYm9vbCBlcnJvclN0YXRlID0gZmFsc2U7CgljbF9pbnQgcmV0ID0gMDsKCglzdGQ6OnN0cmluZyBidWlsZFByZVByb2Nlc3NvclN0cmluZygpOwoJdm9pZCB3cml0ZVByZVByb2Nlc3NvckhlYWRlckZpbGUoKTsKCglzdGQ6OnN0cmluZyBjb21waWxlVmFyaWFudFN0cmluZyhHUFVDb21waWxlVmFyaWFudCB2YXJpYW50KTsKCgoJdm9pZCBBcXVpcmVBbGxHcmFwaGljc09iamVjdHMoKTsKCXZvaWQgUmVsZWFzZUFsbEdyYXBoaWNzT2JqZWN0cygpOwoKCgoJc3RkOjp2ZWN0b3I8dWludDY0X3Q+IGNsU291cmNlQ0hLU1VNUzsKICAgIHN0ZDo6dmVjdG9yPHN0ZDo6c3RyaW5nPiBjbFNvdXJjZVBhdGhzOwogICAgc3RkOjp2ZWN0b3I8c3RkOjp2ZWN0b3I8Y2hhcj4+IGNsU291cmNlczsKfTsKCgAAAAAAAAAABBEAAAAAAAAAAAAAAAAAAAAAAAAEEQAAAAAAAAAAAAA",
					"DwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAAAEEQAAI3ByYWdtYSBvbmNlCgojaWZkZWYgX19BUFBMRV9fCiNpbmNsdWRlIDxPcGVuQ0wvb3BlbmNsLmg+CiNlbHNlCiNpbmNsdWRlIDxDTC9jbC5oPgojaW5jbHVkZSA8Q0wvY2xfZ2wuaD4KI2luY2x1ZGUgPENML2NsX2dsX2V4dC5oPgojZW5kaWYKCgojaW5jbHVkZSA8bWVtb3J5PgojaW5jbHVkZSA8dmFyaWFudD4KI2luY2x1ZGUgPHN0cmluZz4KI2luY2x1ZGUgPHZlY3Rvcj4KCiNpbmNsdWRlICJhc3NlcnQuaCIKCiNpbmNsdWRlICJDb21tb24uaCIKI2luY2x1ZGUgIm9wZW5DTC9jcHVfZ3B1X3N0cnVjdHMuaCIKCiNkZWZpbmUgR0FNRUNPTVBVVEVfTUFYX1NPVVJDRV9TSVpFICgweDEwMDAwMCkKI2RlZmluZSBDTF9IT1NUX0VSUk9SX0NIRUNLKHJldCkgaWYgKHJldCAhPSAwKSB7cHJpbnRmKCJbR0FNRUNPTVBVVEVdIHJldCBhdCAlZCBpcyAlZFxuIiwgX19MSU5FX18sIHJldCk7IGVycm9yU3RhdGUgPSB0cnVlOyBmZmx1c2goc3Rkb3V0KTsgYXNzZXJ0KDApOyB9CgoKCiNkZWZpbmUgV0FSUFNJWkUgKDY0KQoKCnR5cGVkZWYgIHN0ZDo6dmFyaWFudDxpbnQsIGZsb2F0LCBzdGQ6OnN0cmluZz4gR1BVQ29tcGlsZVZhcmlhbnQ7CgoKCgoKY2xhc3MgR2FtZVN0YXRlX1BvaW50ZXIKewpwdWJsaWM6CglHYW1lU3RhdGVfUG9pbnRlcih1aW50NjRfdCBzaXplKSB7IAoJCWRhdGEgPSBuZXcgaW50OF90W3NpemVdOwoJCW1lbXNldChkYXRhLCAwLCBzaXplKTsKCX0KCX5HYW1lU3RhdGVfUG9pbnRlcigpIHsgZGVsZXRlW10gZGF0YTsgfQoJdm9pZCogZGF0YSA9IG51bGxwdHI7Cn07CgoKCgoKY2xhc3MgR2FtZUdyYXBoaWNzOwpjbGFzcyBHYW1lR1BVQ29tcHV0ZQp7CnB1YmxpYzoKCgoJR2FtZUdQVUNvbXB1dGUoKTsKCX5HYW1lR1BVQ29tcHV0ZSgpOwoKCgoJdm9pZCBBZGRDTFNvdXJjZShzdGQ6OnN0cmluZyBwYXRoKTsKCgoJdm9pZCBBZGRDb21waWxlRGVmaW5pdGlvbihzdGQ6OnN0cmluZyBuYW1lLCBHUFVDb21waWxlVmFyaWFudCB2YWwpOwoKCXZvaWQgUnVuSW5pdENvbXB1dGUwKCk7Cgl2b2lkIFJ1bkluaXRDb21wdXRlMSgpOwoJdm9pZCBSdW5Jbml0Q29tcHV0ZTIoKTsKCgl2b2lkIFN0YWdlMSgpOwoKCXZvaWQgUmVhZEZ1bGxHYW1lU3RhdGUoKTsKCXZvaWQgV3JpdGVGdWxsR2FtZVN0YXRlKCk7CgoKCXZvaWQgV3JpdGVHYW1lU3RhdGVCKCk7CgoJc3RkOjpzdHJpbmcgR2FtZVN0YXRlU3RyaW5nKGludCB0aWNrSWR4KTsKCXZvaWQgU2F2ZUdhbWVTdGF0ZUJhc2UoKTsKCXZvaWQgU2F2ZUdhbWVTdGF0ZURpZmYoc3RkOjp2ZWN0b3I8Y2hhcj4qIGRhdGEsYm9vbCBkZWxldGVGaWxlID0gdHJ1ZSk7Cgl2b2lkIExvYWRHYW1lU3RhdGVGcm9tRGlmZihpbnQgdGlja2lkeCk7Cgl2b2lkIExvYWRHYW1lU3RhdGVGcm9tRGlmZihzdGQ6OnN0cmluZyBkaWZmRmlsZU5hbWUsIHN0ZDo6c3RyaW5nIHJlc3VsdEdhbWVTdGF0ZUZpbGVOYW1lKTsKCXZvaWQgTG9hZEdhbWVTdGF0ZUZyb21EaWZmKHN0ZDo6dmVjdG9yPGNoYXI+KiBkYXRhLCAgaW50IGlkKTsKCgllbnVtIFZFTkRPUgoJewoJCU5WSURJQSwKCQlBTUQKCX07CgoJY2xfY29udGV4dCBjb250ZXh0OwoKCWNsX2RldmljZV9pZCBkZXZpY2VfaWQgPSBOVUxMOwogICAgY2xfdWludCByZXRfbnVtX2RldmljZXM7CiAgICBjbF91aW50IHJldF9udW1fcGxhdGZvcm1zOwogICAgaW50IHBmaWR4ID0gMDsKCWNsX3BsYXRmb3JtX2lkKiBwbGF0Zm9ybXM7CglWRU5ET1IgdmVuZG9yOwoKCWNsX2NvbW1hbmRfcXVldWUgY29tbWFuZF9xdWV1ZTsKCWNsX2NvbW1hbmRfcXVldWUgY29tbWFuZF9xdWV1ZTI7CgoJY2xfcHJvZ3JhbSBnYW1lUHJvZ3JhbTsKCWNsX3Byb2dyYW0gcmF5R3VpSGVhZGVyOwoJY2xfcHJvZ3JhbSBmdWxsUHJvZ3JhbTsKCWNsX3Byb2dyYW0gdGVzdFByb2dyYW07CgoJY2xfa2VybmVsIHNpemV0ZXN0c19rZXJuZWw7CgoJY2xfa2VybmVsIHByZXVwZGF0ZV9rZXJuZWw7CgljbF9rZXJuZWwgcHJldXBkYXRlX2tlcm5lbF8yOwoJY2xfa2VybmVsIGdhbWVfdXBkYXRlcHJlMV9rZXJuZWw7CgljbF9rZXJuZWwgdXBkYXRlX2tlcm5lbDsKCWNsX2tlcm5lbCB1cGRhdGUyX2tlcm5lbDsKCWNsX2tlcm5lbCBwb3N0X3VwZGF0ZV9zaW5nbGVfa2VybmVsOwoJY2xfa2VybmVsIGFjdGlvbl9rZXJuZWw7CgljbF9rZXJuZWwgZ3VpX2tlcm5lbDsKCWNsX2tlcm5lbCBpbml0X2tlcm5lbDsKCWNsX2tlcm5lbCBpbml0X2tlcm5hbF9tdWx0aTsKCWNsX2tlcm5lbCBpbml0X2tlcm5hbF9tdWx0aTI7CgljbF9rZXJuZWwgaW5pdF9rZXJuZWxfMjsKCgoKCXN0ZDo6dmVjdG9yPGNsX2tlcm5lbD4ga2VybmVsczsKCgljbF9ldmVudCBpbml0RXZlbnQ7CgljbF9ldmVudCBpbml0TXVsdGlFdmVudDsKCWNsX2V2ZW50IGluaXRNdWx0aUV2ZW50MjsKCWNsX2V2ZW50IGluaXQyRXZlbnQ7CgljbF9ldmVudCBwcmVVcGRhdGVFdmVudDE7CgljbF9ldmVudCBwcmVVcGRhdGVFdmVudDI7CgljbF9ldmVudCB1cGRhdGVwcmUxRXZlbnQ7ICAgIAoJY2xfZXZlbnQgdXBkYXRlRXZlbnQ7ICAKCWNsX2V2ZW50IHVwZGF0ZTJFdmVudDsgICAgICAKCWNsX2V2ZW50IHBvc3R1cGRhdGVFdmVudDsKCWNsX2V2ZW50IGFjdGlvbkV2ZW50OwoJY2xfZXZlbnQgZ3VpRXZlbnQ7CgljbF9ldmVudCByZWFkRXZlbnQ7CgljbF9ldmVudCB3cml0ZUV2ZW50OyAgICAKCQoKCglTSVpFVEVTVFNEQVRBIHN0cnVjdFNpemVzOwoKCWludCB3YXJwU2l6ZSA9IDMyOwoJaW50IG1heFBlZXBzID0gMTAyNCo4OwoJaW50IG1heFBhcnRpY2xlcyA9IDMyOwoJaW50IG1hcERpbSA9IDEwMjQ7CglpbnQgbWFwRGVwdGggPSAzMjsKCWludCBtYXBUaWxlU2l6ZSA9IDU7CiAgICBpbnQgbWF4R3VpUmVjdHMgPSAxMDI0KjE2OwoJaW50IG1heExpbmVzID0gMTAyNCo2NDsKCiAgICBsb25nIEdhbWVVcGRhdGVXb3JrSXRlbXMgOwogICAgc2l6ZV90IFdvcmtJdGVtc1sxXSAgOwoJc2l6ZV90IFdvcmtJdGVtc0luaXRNdWx0aVsxXSA7CglzaXplX3QgV29ya0l0ZW1zMVdhcnBbMV0gOwogICAgc2l6ZV90IFNpbmdsZUtlcm5lbFdvcmtJdGVtc1sxXTsKICAgIHNpemVfdCBTaW5nbGVLZXJuZWxXb3JrSXRlbXNQZXJXb3JrR3JvdXBbMV07CgoKCgljbF9tZW0gc2l6ZVRlc3RzX21lbV9vYmo7CgoKCWNsX21lbSBzdGF0aWNEYXRhX21lbV9vYmo7CgljbF9tZW0gZ2FtZXN0YXRlX21lbV9vYmo7CgljbF9tZW0gZ2FtZXN0YXRlQl9tZW1fb2JqOwoKCWNsX21lbSBzdGF0aWNEYXRhX21lbV9vYmpfcm87CgljbF9tZW0gZ2FtZXN0YXRlX21lbV9vYmpfcm87CgljbF9tZW0gZ2FtZXN0YXRlQl9tZW1fb2JqX3JvOwoKCgljbF9tZW0gZ3JhcGhpY3NfcGVlcHNfbWVtX29iajsKCWNsX21lbSBncmFwaGljc19wYXJ0aWNsZXNfbWVtX29iajsKCgljbF9tZW0gZ3JhcGhpY3NfbWFwVGlsZTFWQk9fbWVtX29iajsKCWNsX21lbSBncmFwaGljc19tYXBUaWxlMUF0dHJWQk9fbWVtX29iajsKCWNsX21lbSBncmFwaGljc19tYXBUaWxlMU90aGVyQXR0clZCT19tZW1fb2JqOwoKCWNsX21lbSBncmFwaGljc19tYXBUaWxlMlZCT19tZW1fb2JqOwoJY2xfbWVtIGdyYXBoaWNzX21hcFRpbGUyQXR0clZCT19tZW1fb2JqOwoJY2xfbWVtIGdyYXBoaWNzX21hcFRpbGUyT3RoZXJBdHRyVkJPX21lbV9vYmo7CgoJY2xfbWVtIGdyYXBoaWNzX2d1aVZCT19vYmo7CgljbF9tZW0gZ3JhcGhpY3NfbGluZXNWQk9fb2JqOwoKCXN0ZDo6dmVjdG9yPGNsX21lbT4gZ3JhcGhpY3NPYmplY3RzOwoKCXZvaWQgQnVpbGRLZXJuZWxSdW5TaXplcygpOwoKCglzdGQ6OnNoYXJlZF9wdHI8R2FtZVN0YXRlX1BvaW50ZXI+IGdhbWVTdGF0ZTsKCXN0ZDo6c2hhcmVkX3B0cjxHYW1lU3RhdGVBY3Rpb25zPiBnYW1lU3RhdGVBY3Rpb25zOwoJR2FtZUdyYXBoaWNzKiBncmFwaGljcyA9IG51bGxwdHI7CgoJc3RkOjp2ZWN0b3I8c3RkOjpwYWlyPHN0ZDo6c3RyaW5nLCBHUFVDb21waWxlVmFyaWFudD4+IGNvbXBpbGVEZWZpbml0aW9uczsKCglib29sIGVycm9yU3RhdGUgPSBmYWxzZTsKCWNsX2ludCByZXQgPSAwOwoKCXN0ZDo6c3RyaW5nIGJ1aWxkUHJlUHJvY2Vzc29yU3RyaW5nKCk7Cgl2b2lkIHdyaXRlUHJlUHJvY2Vzc29ySGVhZGVyRmlsZSgpOwoKCXN0ZDo6c3RyaW5nIGNvbXBpbGVWYXJpYW50U3RyaW5nKEdQVUNvbXBpbGVWYXJpYW50IHZhcmlhbnQpOwoKCgl2b2lkIEFxdWlyZUFsbEdyYXBoaWNzT2JqZWN0cygpOwoJdm9pZCBSZWxlYXNlQWxsR3JhcGhpY3NPYmplY3RzKCk7CgoKCglzdGQ6OnZlY3Rvcjx1aW50NjRfdD4gY2xTb3VyY2VDSEtTVU1TOwogICAgc3RkOjp2ZWN0b3I8c3RkOjpzdHJpbmc+IGNsU291cmNlUGF0aHM7CiAgICBzdGQ6OnZlY3RvcjxzdGQ6OnZlY3RvcjxjaGFyPj4gY2xTb3VyY2VzOwp9OwoKAAAAAAAAAAATEQAAAAAAAAAAAAAAAAAAAAAAABMRAAAAAAAAAAAAAA",
					"DgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"revert",
					null,
					"DgAAAAAAAAAAAAAAAAAAAAAAAAATEQAAI3ByYWdtYSBvbmNlCgojaWZkZWYgX19BUFBMRV9fCiNpbmNsdWRlIDxPcGVuQ0wvb3BlbmNsLmg+CiNlbHNlCiNpbmNsdWRlIDxDTC9jbC5oPgojaW5jbHVkZSA8Q0wvY2xfZ2wuaD4KI2luY2x1ZGUgPENML2NsX2dsX2V4dC5oPgojZW5kaWYKCgojaW5jbHVkZSA8bWVtb3J5PgojaW5jbHVkZSA8dmFyaWFudD4KI2luY2x1ZGUgPHN0cmluZz4KI2luY2x1ZGUgPHZlY3Rvcj4KCiNpbmNsdWRlICJhc3NlcnQuaCIKCiNpbmNsdWRlICJDb21tb24uaCIKI2luY2x1ZGUgIm9wZW5DTC9jcHVfZ3B1X3N0cnVjdHMuaCIKCiNkZWZpbmUgR0FNRUNPTVBVVEVfTUFYX1NPVVJDRV9TSVpFICgweDEwMDAwMCkKI2RlZmluZSBDTF9IT1NUX0VSUk9SX0NIRUNLKHJldCkgaWYgKHJldCAhPSAwKSB7cHJpbnRmKCJbR0FNRUNPTVBVVEVdIHJldCBhdCAlZCBpcyAlZFxuIiwgX19MSU5FX18sIHJldCk7IGVycm9yU3RhdGUgPSB0cnVlOyBmZmx1c2goc3Rkb3V0KTsgYXNzZXJ0KDApOyB9CgoKCiNkZWZpbmUgV0FSUFNJWkUgKDY0KQoKCnR5cGVkZWYgIHN0ZDo6dmFyaWFudDxpbnQsIGZsb2F0LCBzdGQ6OnN0cmluZz4gR1BVQ29tcGlsZVZhcmlhbnQ7CgoKCgoKY2xhc3MgR2FtZVN0YXRlX1BvaW50ZXIKewpwdWJsaWM6CglHYW1lU3RhdGVfUG9pbnRlcih1aW50NjRfdCBzaXplKSB7IAoJCWRhdGEgPSBuZXcgaW50OF90W3NpemVdOwoJCW1lbXNldChkYXRhLCAwLCBzaXplKTsKCX0KCX5HYW1lU3RhdGVfUG9pbnRlcigpIHsgZGVsZXRlW10gZGF0YTsgfQoJdm9pZCogZGF0YSA9IG51bGxwdHI7Cn07CgoKCgoKY2xhc3MgR2FtZUdyYXBoaWNzOwpjbGFzcyBHYW1lR1BVQ29tcHV0ZQp7CnB1YmxpYzoKCgoJR2FtZUdQVUNvbXB1dGUoKTsKCX5HYW1lR1BVQ29tcHV0ZSgpOwoKCgoJdm9pZCBBZGRDTFNvdXJjZShzdGQ6OnN0cmluZyBwYXRoKTsKCgoJdm9pZCBBZGRDb21waWxlRGVmaW5pdGlvbihzdGQ6OnN0cmluZyBuYW1lLCBHUFVDb21waWxlVmFyaWFudCB2YWwpOwoKCXZvaWQgUnVuSW5pdENvbXB1dGUwKCk7Cgl2b2lkIFJ1bkluaXRDb21wdXRlMSgpOwoJdm9pZCBSdW5Jbml0Q29tcHV0ZTIoKTsKCgl2b2lkIFN0YWdlMSgpOwoKCXZvaWQgUmVhZEZ1bGxHYW1lU3RhdGUoKTsKCXZvaWQgV3JpdGVGdWxsR2FtZVN0YXRlKCk7CgoKCXZvaWQgV3JpdGVHYW1lU3RhdGVCKCk7CgoJc3RkOjpzdHJpbmcgR2FtZVN0YXRlU3RyaW5nKGludCB0aWNrSWR4KTsKCXZvaWQgU2F2ZUdhbWVTdGF0ZUJhc2UoKTsKCXZvaWQgU2F2ZUdhbWVTdGF0ZURpZmYoc3RkOjp2ZWN0b3I8Y2hhcj4qIGRhdGEsYm9vbCBkZWxldGVGaWxlID0gdHJ1ZSk7Cgl2b2lkIExvYWRHYW1lU3RhdGVGcm9tRGlmZihpbnQgdGlja2lkeCk7Cgl2b2lkIExvYWRHYW1lU3RhdGVGcm9tRGlmZihzdGQ6OnN0cmluZyBkaWZmRmlsZU5hbWUsIHN0ZDo6c3RyaW5nIHJlc3VsdEdhbWVTdGF0ZUZpbGVOYW1lKTsKCXZvaWQgTG9hZEdhbWVTdGF0ZUZyb21EaWZmKHN0ZDo6dmVjdG9yPGNoYXI+KiBkYXRhLCAgaW50IGlkKTsKCgllbnVtIFZFTkRPUgoJewoJCU5WSURJQSwKCQlBTUQKCX07CgoJY2xfY29udGV4dCBjb250ZXh0OwoKCWNsX2RldmljZV9pZCBkZXZpY2VfaWQgPSBOVUxMOwogICAgY2xfdWludCByZXRfbnVtX2RldmljZXM7CiAgICBjbF91aW50IHJldF9udW1fcGxhdGZvcm1zOwogICAgaW50IHBmaWR4ID0gMDsKCWNsX3BsYXRmb3JtX2lkKiBwbGF0Zm9ybXM7CglWRU5ET1IgdmVuZG9yOwoKCWNsX2NvbW1hbmRfcXVldWUgY29tbWFuZF9xdWV1ZTsKCWNsX2NvbW1hbmRfcXVldWUgY29tbWFuZF9xdWV1ZTI7CgoJY2xfcHJvZ3JhbSBnYW1lUHJvZ3JhbTsKCWNsX3Byb2dyYW0gcmF5R3VpSGVhZGVyOwoJY2xfcHJvZ3JhbSBmdWxsUHJvZ3JhbTsKCWNsX3Byb2dyYW0gdGVzdFByb2dyYW07CgoJY2xfa2VybmVsIHNpemV0ZXN0c19rZXJuZWw7CgoJY2xfa2VybmVsIHByZXVwZGF0ZV9rZXJuZWw7CgljbF9rZXJuZWwgcHJldXBkYXRlX2tlcm5lbF8yOwoJY2xfa2VybmVsIGdhbWVfdXBkYXRlcHJlMV9rZXJuZWw7CgljbF9rZXJuZWwgdXBkYXRlX2tlcm5lbDsKCWNsX2tlcm5lbCB1cGRhdGUyX2tlcm5lbDsKCWNsX2tlcm5lbCBwb3N0X3VwZGF0ZV9rZXJuZWw7CgljbF9rZXJuZWwgYWN0aW9uX2tlcm5lbDsKCWNsX2tlcm5lbCBndWlfa2VybmVsOwoJY2xfa2VybmVsIGluaXRfa2VybmVsOwoJY2xfa2VybmVsIGluaXRfa2VybmFsX211bHRpOwoJY2xfa2VybmVsIGluaXRfa2VybmFsX211bHRpMjsKCWNsX2tlcm5lbCBpbml0X2tlcm5lbF8yOwoKCgoJc3RkOjp2ZWN0b3I8Y2xfa2VybmVsPiBrZXJuZWxzOwoKCWNsX2V2ZW50IGluaXRFdmVudDsKCWNsX2V2ZW50IGluaXRNdWx0aUV2ZW50OwoJY2xfZXZlbnQgaW5pdE11bHRpRXZlbnQyOwoJY2xfZXZlbnQgaW5pdDJFdmVudDsKCWNsX2V2ZW50IHByZVVwZGF0ZUV2ZW50MTsKCWNsX2V2ZW50IHByZVVwZGF0ZUV2ZW50MjsKCWNsX2V2ZW50IHVwZGF0ZXByZTFFdmVudDsgICAgCgljbF9ldmVudCB1cGRhdGVFdmVudDsgIAoJY2xfZXZlbnQgdXBkYXRlMkV2ZW50OyAgICAgIAoJY2xfZXZlbnQgcG9zdHVwZGF0ZUV2ZW50OwoJY2xfZXZlbnQgYWN0aW9uRXZlbnQ7CgljbF9ldmVudCBndWlFdmVudDsKCWNsX2V2ZW50IHJlYWRFdmVudDsKCWNsX2V2ZW50IHdyaXRlRXZlbnQ7ICAgIAoJCgoKCVNJWkVURVNUU0RBVEEgc3RydWN0U2l6ZXM7CgoJaW50IHdhcnBTaXplID0gMzI7CglpbnQgbWF4UGVlcHMgPSAxMDI0Kjg7CglpbnQgbWF4UGFydGljbGVzID0gMzI7CglpbnQgbWFwRGltID0gMTAyNDsKCWludCBtYXBEZXB0aCA9IDMyOwoJaW50IG1hcFRpbGVTaXplID0gNTsKICAgIGludCBtYXhHdWlSZWN0cyA9IDEwMjQqMTY7CglpbnQgbWF4TGluZXMgPSAxMDI0KjY0OwoKICAgIGxvbmcgR2FtZVVwZGF0ZVdvcmtJdGVtcyA7CglpbnQgbnVtQ29tcHV0ZVVuaXRzOwogICAgc2l6ZV90IFdvcmtJdGVtc1sxXSAgOwoJc2l6ZV90IFdvcmtJdGVtc0luaXRNdWx0aVsxXSA7CglzaXplX3QgV29ya0l0ZW1zMVdhcnBbMV0gOwogICAgc2l6ZV90IFNpbmdsZUtlcm5lbFdvcmtJdGVtc1sxXTsKICAgIHNpemVfdCBTaW5nbGVLZXJuZWxXb3JrSXRlbXNQZXJXb3JrR3JvdXBbMV07CgoKCgljbF9tZW0gc2l6ZVRlc3RzX21lbV9vYmo7CgoKCWNsX21lbSBzdGF0aWNEYXRhX21lbV9vYmo7CgljbF9tZW0gZ2FtZXN0YXRlX21lbV9vYmo7CgljbF9tZW0gZ2FtZXN0YXRlQl9tZW1fb2JqOwoKCWNsX21lbSBzdGF0aWNEYXRhX21lbV9vYmpfcm87CgljbF9tZW0gZ2FtZXN0YXRlX21lbV9vYmpfcm87CgljbF9tZW0gZ2FtZXN0YXRlQl9tZW1fb2JqX3JvOwoKCgljbF9tZW0gZ3JhcGhpY3NfcGVlcHNfbWVtX29iajsKCWNsX21lbSBncmFwaGljc19wYXJ0aWNsZXNfbWVtX29iajsKCgljbF9tZW0gZ3JhcGhpY3NfbWFwVGlsZTFWQk9fbWVtX29iajsKCWNsX21lbSBncmFwaGljc19tYXBUaWxlMUF0dHJWQk9fbWVtX29iajsKCWNsX21lbSBncmFwaGljc19tYXBUaWxlMU90aGVyQXR0clZCT19tZW1fb2JqOwoKCWNsX21lbSBncmFwaGljc19tYXBUaWxlMlZCT19tZW1fb2JqOwoJY2xfbWVtIGdyYXBoaWNzX21hcFRpbGUyQXR0clZCT19tZW1fb2JqOwoJY2xfbWVtIGdyYXBoaWNzX21hcFRpbGUyT3RoZXJBdHRyVkJPX21lbV9vYmo7CgoJY2xfbWVtIGdyYXBoaWNzX2d1aVZCT19vYmo7CgljbF9tZW0gZ3JhcGhpY3NfbGluZXNWQk9fb2JqOwoKCXN0ZDo6dmVjdG9yPGNsX21lbT4gZ3JhcGhpY3NPYmplY3RzOwoKCXZvaWQgQnVpbGRLZXJuZWxSdW5TaXplcygpOwoKCglzdGQ6OnNoYXJlZF9wdHI8R2FtZVN0YXRlX1BvaW50ZXI+IGdhbWVTdGF0ZTsKCXN0ZDo6c2hhcmVkX3B0cjxHYW1lU3RhdGVBY3Rpb25zPiBnYW1lU3RhdGVBY3Rpb25zOwoJR2FtZUdyYXBoaWNzKiBncmFwaGljcyA9IG51bGxwdHI7CgoJc3RkOjp2ZWN0b3I8c3RkOjpwYWlyPHN0ZDo6c3RyaW5nLCBHUFVDb21waWxlVmFyaWFudD4+IGNvbXBpbGVEZWZpbml0aW9uczsKCglib29sIGVycm9yU3RhdGUgPSBmYWxzZTsKCWNsX2ludCByZXQgPSAwOwoKCXN0ZDo6c3RyaW5nIGJ1aWxkUHJlUHJvY2Vzc29yU3RyaW5nKCk7Cgl2b2lkIHdyaXRlUHJlUHJvY2Vzc29ySGVhZGVyRmlsZSgpOwoKCXN0ZDo6c3RyaW5nIGNvbXBpbGVWYXJpYW50U3RyaW5nKEdQVUNvbXBpbGVWYXJpYW50IHZhcmlhbnQpOwoKCgl2b2lkIEFxdWlyZUFsbEdyYXBoaWNzT2JqZWN0cygpOwoJdm9pZCBSZWxlYXNlQWxsR3JhcGhpY3NPYmplY3RzKCk7CgoKCglzdGQ6OnZlY3Rvcjx1aW50NjRfdD4gY2xTb3VyY2VDSEtTVU1TOwogICAgc3RkOjp2ZWN0b3I8c3RkOjpzdHJpbmc+IGNsU291cmNlUGF0aHM7CiAgICBzdGQ6OnZlY3RvcjxzdGQ6OnZlY3RvcjxjaGFyPj4gY2xTb3VyY2VzOwp9OwoKAAAAAAAAAABEEQAAAAAAAAAAAAAAAAAAAAAAAEQRAAAAAAAAAAAAAAAAAAAAAAAARBEAAAAAAAAAAAAAAAAAAAAAAABEEQAAAAAAAAAAAAAAAAAAAAAAAEQRAAAAAAAAAAAAAAAAAAAAAAAARBEAAAAAAAAAAAAAAAAAAAAAAABEEQAAAAAAAAAAAAAAAAAAAAAAAEQRAAAAAAAAAAAAAAAAAAAAAAAARBEAAAAAAAAAAAAAAAAAAAAAAABEEQAAAAAAAAAAAAAAAAAAAAAAAEQRAAAAAAAAAAAAAAAAAAAAAAAARBEAAAAAAAAAAAAAAAAAAAAAAABEEQAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "Packages/MSBuild/MSBuild.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/MSBuild/MSBuild.sublime-build",
					""
				],
				[
					"Packages/MSBuild/MSBuild.sublime-build",
					"Parallel Build"
				],
				[
					"Packages/MSBuild/MSBuild.sublime-build",
					"Debug Configuration"
				],
				[
					"Packages/MSBuild/MSBuild.sublime-build",
					"Release Configuration"
				]
			],
			[
				"Packages/MSBuild/MSBuild.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Enable Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"Package Control: inst",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 508.0,
		"history":
		[
			"Install Package Control",
			"install package control",
			"instal package control",
			"Install Package Control"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/casht/repos/opencltest",
		"/C/Users/casht/repos/opencltest/.cmake",
		"/C/Users/casht/repos/opencltest/build",
		"/C/Users/casht/repos/opencltest/game",
		"/C/Users/casht/repos/opencltest/game/openCL"
	],
	"file_history":
	[
		"/C/Users/casht/Desktop/TESTFOLDER/BeetTweek-Firmware/DSPBoardH7/.project.templated",
		"/C/Users/casht/Desktop/TESTFOLDER/BeetTweek-Firmware/DSPBoardH7/.project",
		"/C/Users/casht/repos/eurorack-beettweek/package_for_github.py",
		"/C/Users/casht/repos/eurorack-beettweek/setup.py",
		"/C/Users/casht/repos/eurorack-beettweek/BeetTweek-Firmware/package_for_github.py",
		"/C/Users/casht/repos/eurorack-beettweek/BeetTweek-Firmware/DSPBoardH7/.cproject",
		"/C/Users/casht/repos/eurorack-beettweek/BeetTweek-Firmware/DSPBoardH7/.project",
		"/C/Users/casht/repos/eurorack-beettweek/BeetTweek-Firmware/DSPBoardH7/CMakeLists.txt",
		"/C/Users/casht/repos/eurorack-beettweek/BeetTweek-Firmware/DSPBoardH7/Middlewares/Third_Party/FatFs/src/ff.h",
		"/C/Users/casht/repos/eurorack-beettweek/BeetTweek-Firmware/DSPBoardH7/.cproject.deployed",
		"/C/Users/casht/repos/eurorack-beettweek/BeetTweek-Firmware/BootloaderH7/.cproject.templated",
		"/C/Users/casht/Desktop/openCL_pipeline.cpp",
		"/C/Users/casht/repos/opencltest/build/game/Debug/openCL/clGame.bc",
		"/C/Users/casht/AppData/Roaming/Sublime Text 3/Packages/User/outline.sublime-settings",
		"/C/Users/casht/Downloads/coriander-6.0.0/bin/cuda_sample.cu",
		"/C/Users/casht/Downloads/raygui-master/examples/scroll_panel/scroll_panel.c",
		"/C/Users/casht/Downloads/raygui-master/examples/standalone/raygui_standalone.c",
		"/C/Users/casht/Downloads/raygui-master/examples/standalone/raygui_custom_backend.h",
		"/E/Repos/llvm-project/build/RelWithDebInfo/bin/test.spv",
		"/C/Users/casht/Downloads/oclInlinePTX/NVIDIA GPU Computing SDK/OpenCL/src/oclInlinePTX/inlinePTX.cl",
		"/E/Repos/llvm-project/build/RelWithDebInfo/bin/test.clcpp",
		"/C/Users/casht/Downloads/oclInlinePTX/NVIDIA GPU Computing SDK/OpenCL/src/oclInlinePTX/oclInlinePTX.cpp",
		"/C/Users/casht/repos/opencltest/game/openCL/test.spv",
		"/C/Users/casht/Desktop/FontData.csv",
		"/C/Users/casht/repos/opencltest/build/game/Debug/gamestatebase2.bin",
		"/C/Users/casht/repos/opencltest/build/game/Debug/tmp.diff",
		"/C/Users/casht/repos/opencltest/build/game/Debug/diff_tick_314.diff",
		"/C/Users/casht/repos/opencltest/build/game/Debug/diff_tick_208.diff",
		"/C/Users/casht/repos/opencltest/game/openCL/clRayGUI.h",
		"/C/Users/casht/repos/opencltest/game/openCL/clGUI.h",
		"/C/Users/casht/Downloads/raygui-master/src/raygui.h",
		"/C/Users/casht/repos/opencltest/angelscriptsdk/add_on/autowrapper/aswrappedcall.h",
		"/C/Users/casht/repos/opencltest/angelscriptsdk/add_on/autowrapper/generator/generateheader.cpp",
		"/C/Users/casht/repos/opencltest/opencltest/dynamicDefines.h",
		"/C/Users/casht/repos/opencltest/CMakeLists.txt",
		"/C/Users/casht/repos/opencltest/opencltest/CMakeLists.txt",
		"/C/Users/casht/repos/opencltest/zlib/CMakeLists.txt",
		"/C/Users/casht/repos/classes-sdsmt/Grad/RoboticControl EE552/FinalProject/main.py",
		"/C/Users/casht/repos/TechGame/rbfx/Source/Urho3D/Engine/Engine.cpp",
		"/C/Users/casht/Desktop/NVIDIA GPU Computing SDK/OpenCL/src/oclSimpleGL/oclSimpleGL.cpp",
		"/C/Users/casht/Desktop/NVIDIA GPU Computing SDK/OpenCL/src/oclSimpleGL/simpleGL.cl",
		"/C/Users/casht/repos/P2PGameTests/P2PGame/Source/SMUtilities/Private/GameNetworking.cpp",
		"/C/Users/casht/repos/TechGame/rbfx/Source/Urho3D/Core/Timer.cpp",
		"/C/Users/casht/repos/TechGame/rbfx/Source/Urho3D/Core/Timer.h",
		"/C/Users/casht/repos/P2PGameTests/P2PGame/Source/SMUtilities/Private/UObjectSimple.cpp",
		"/C/Users/casht/repos/P2PGameTests/P2PGame/Source/SMUtilities/Public/GameNetworking.h",
		"/C/Users/casht/repos/opencltest/SLikeNet/CMakeLists.txt",
		"/C/Users/casht/repos/opencltest/xdelta3/generate_build_files.sh",
		"/C/Users/casht/repos/opencltest/llvm-project/llvm/cmake/modules/LLVM-Config.cmake",
		"/C/Users/casht/repos/opencltest/llvm-project/clang/CMakeLists.txt",
		"/C/Users/casht/repos/P2PGameTests/P2PGame/Source/P2PGame/P2PGameBase.h",
		"/C/Users/casht/repos/P2PGameTests/P2PGame/Source/P2PGame/P2PGame.h",
		"/C/Users/casht/repos/P2PGameTests/P2PGame/Source/P2PGame/P2PSettingsManager.h",
		"/C/Users/casht/repos/TechGame/rbfx-newton/Source/NewtonPhysics/NewtonRigidBody.h",
		"/C/Users/casht/repos/TechGame/rbfx-newton/Source/NewtonPhysics/NewtonRigidBody.cpp",
		"/C/Users/casht/repos/TechGame/reRunCMake.sh",
		"/C/Users/casht/Downloads/08_geometry_rendering.cpp",
		"/C/Users/casht/repos/TechGame/rbfx/Source/Urho3D/Math/Random.h",
		"/C/Users/casht/repos/TechGame/rbfx/Source/Urho3D/Math/Random.cpp",
		"/C/Users/casht/repos/TechGame/rbfx/Source/Urho3D/Math/RandomEngine.h",
		"/C/Users/casht/repos/TechGame/rbfx/Source/Urho3D/Math/RandomEngine.cpp",
		"/C/Users/casht/Downloads/mwc64x/cl/mwc64x.cl",
		"/C/Users/casht/Downloads/mwc64x/test/test_rng.cpp",
		"/C/Users/casht/Downloads/mwc64x/cl/mwc64x/mwc64x_rng.cl",
		"/C/Users/casht/Downloads/mwc64x/cl/mwc64x/mwc64xvec4_rng.cl",
		"/C/Users/casht/Downloads/mwc64x/test/test_mwc64x.cl",
		"/C/Users/casht/Downloads/mwc64x/test/test_mwc64xvec2.cl",
		"/C/Users/casht/repos/opencltest/opencltest/random_generators/isaac.cl",
		"/C/Users/casht/repos/opencltest/opencltest/random_generators/kiss09.cl",
		"/C/Users/casht/repos/opencltest/opencltest/random_generators/kiss99.cl",
		"/C/Users/casht/repos/opencltest/opencltest/random_generators/lcg6432.cl",
		"/C/Users/casht/repos/opencltest/opencltest/random_generators/lcg12864.cl",
		"/C/Users/casht/repos/opencltest/opencltest/random_generators/xorshift1024.cl",
		"/C/Users/casht/repos/opencltest/opencltest/random_generators/tyche.cl",
		"/C/Users/casht/repos/TechGame/rbfx/Source/Urho3D/Input/Input.h",
		"/C/Users/casht/repos/newton-dynamics/newton-4.00/sdk/dCollision/ndBodyKinematic.cpp",
		"/C/Users/casht/repos/newton-dynamics/newton-4.00/sdk/dCollision/ndShapeInstance.h",
		"/C/Users/casht/repos/newton-dynamics/newton-4.00/sdk/dCollision/ndShapeInstance.cpp",
		"/C/Users/casht/repos/newton-dynamics/newton-4.00/sdk/dNewton/ndBodyDynamic.h",
		"/C/Users/casht/repos/newton-dynamics/newton-4.00/sdk/dNewton/ndBodyDynamic.cpp",
		"/C/Users/casht/repos/TechGame/rbfx-newton/Source/NewtonPhysics/NewtonPhysicsWorldDomainConversions.cpp",
		"/C/Users/casht/repos/TechGame/rbfx-newton/Source/NewtonPhysics/NewtonPhysicsWorldCasts.cpp",
		"/C/Users/casht/repos/TechGame/rbfx-newton/Source/NewtonPhysics/UrhoNewtonConversions.h",
		"/C/Users/casht/repos/TechGame/rbfx-newton/Source/NewtonPhysics/NewtonPhysicsWorld.cpp",
		"/C/Users/casht/repos/newton-dynamics/newton-4.00/CMakeLists.txt",
		"/C/Users/casht/repos/TechGame/rbfx-newton/CMakeLists.txt",
		"/C/Users/casht/repos/TechGame/rbfx-newton/ThirdParty/newton-dynamics/newton-4.00/CMakeLists.txt",
		"/E/Repos/UnrealEngine/Engine/Plugins/Developer/BlankPlugin/Source/BlankPlugin/Private/BlankPlugin.cpp",
		"/E/Repos/UnrealEngine/Engine/Plugins/Developer/BlankPlugin/Source/BlankPlugin/Public/IBlankPlugin.h",
		"/C/Users/casht/repos/opencltest/SDL2-2.0.22/include/SDL_opengl.h",
		"/C/Users/casht/repos/opencltest/opencltest/fixedpoint/fpsqrt.c",
		"/C/Users/casht/source/repos/opencltest/opencltest/random_generators/isaac.cl",
		"/E/Repos/UnrealEngine/Engine/Plugins/NewtonDynamics/Source/NewtonDynamics/NewtonDynamics.build.cs",
		"/E/Repos/UnrealEngine/Engine/Plugins/NewtonDynamics/NewtonDynamics.uplugin",
		"/C/Users/casht/Documents/Unreal Projects/MyProject3/MyProject3.uproject",
		"/E/Repos/UnrealEngine/Engine/Plugins/NewtonDynamics/Source/NewtonDynamics/Private/NewtonDynamics.cpp",
		"/E/Repos/UnrealEngine/Engine/Plugins/NewtonDynamics/Source/NewtonDynamics/Public/NewtonDynamics.h",
		"/E/Repos/UnrealEngine/Engine/Plugins/Developer/BlankPlugin/Source/BlankPlugin/BlankPlugin.Build.cs",
		"/C/Users/casht/Documents/Unreal Projects/MyProject3/Plugins/ImGui/UnrealImGui/ImGui.uplugin",
		"/C/Users/casht/repos/P2PGameTests/P2PGame/Source/P2PGame/P2PGame.cpp",
		"/C/Users/casht/repos/P2PGameTests/P2PGame/Source/P2PGame/P2PGameBase.cpp",
		"/E/Repos/UnrealEngine/Engine/Source/Programs/UnrealBuildTool/System/CppDependencyCache.cs",
		"/C/Users/casht/repos/P2PGameTests/P2PGame/Source/P2PGame/P2PSettingsManager.cpp",
		"/C/Users/casht/repos/P2PGameTests/P2PGame/Source/SMUtilities/Public/SMUtilities.h",
		"/C/Users/casht/repos/P2PGameTests/P2PGame/Source/SMUtilities/Public/UObjectSimple.h",
		"/C/Users/casht/repos/TechGame/CMakeLists.txt",
		"/C/Users/casht/repos/eurorack-beettweek/BomProcessing/Process_BOMS/PartAvailability.py",
		"/C/Users/casht/repos/Project1/Project1/GESceneGraph.cpp",
		"/C/Users/casht/repos/Project1/Project1/GESceneGraph.h",
		"/C/Users/casht/repos/Project1/Project1/GEMeshData.h",
		"/C/Users/casht/repos/Project1/Project1/GEConsole.h",
		"/C/Users/casht/repos/Project1/Project1/GEConsole.cpp",
		"/C/Users/casht/repos/Project1/Project1/GEEntityCamera.cpp",
		"/?wsl.localhost/Ubuntu-20.04/home/trevorcash/ros/catkin_ws/src/beginner_tutorials/package.xml",
		"/?wsl.localhost/Ubuntu-20.04/home/trevorcash/repos/TechGame/rbfx/Source/ThirdParty/CMakeLists.txt",
		"/C/Users/casht/repos/eurorack-beettweek/BomProcessing/Process_BOMS/BestBuys.csv",
		"/C/Users/casht/repos/eurorack-beettweek/BomProcessing/Process_BOMS/BestBuys",
		"/C/Users/casht/repos/eurorack-beettweek/Shipped Modules/ChangeLog_1_3.txt",
		"/C/Users/casht/repos/eurorack-beettweek/BomProcessing/Process_BOMS/InventoryQueries.py",
		"/C/Users/casht/repos/eurorack-beettweek/BomProcessing/Process_BOMS/subMatrixInventoryFetch.py",
		"/C/Users/casht/repos/eurorack-beettweek/BomProcessing/Process_BOMS/OctoPart.py",
		"/C/Users/casht/repos/open3dtest/camera_trajectory.py",
		"/C/Users/casht/repos/TechGame/.gitmodules",
		"/C/Users/casht/repos/TechGame/rbfx-newton/ThirdParty/newton-dynamics/newton-4.00/sdk/dNewton/CMakeLists.txt",
		"/?wsl.localhost/Ubuntu-20.04/home/trevorcash/repos/TechGame/reRunCMake.sh",
		"/?wsl.localhost/Ubuntu-20.04/home/trevorcash/repos/TechGame/rbfx/Source/Urho3D/MLControl/GymClient.h",
		"/?wsl.localhost/Ubuntu-20.04/home/trevorcash/repos/TechGame/build/builderrors.txt",
		"/C/Users/casht/repos/TechGame/reRunCMakeLinux.sh"
	],
	"find":
	{
		"height": 43.0
	},
	"find_in_files":
	{
		"height": 113.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/C/Users/casht/repos/eurorack-beettweek/package_for_github.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 542,
						"regions":
						{
						},
						"selection":
						[
							[
								542,
								542
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/C/Users/casht/repos/eurorack-beettweek/setup.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 527,
						"regions":
						{
						},
						"selection":
						[
							[
								527,
								527
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/C/Users/casht/Desktop/TESTFOLDER/BeetTweek-Firmware/DSPBoardH7/.project.templated",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1764,
						"regions":
						{
						},
						"selection":
						[
							[
								1560,
								1560
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/C/Users/casht/Desktop/TESTFOLDER/BeetTweek-Firmware/DSPBoardH7/.cproject.templated",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49878,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3168.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/C/Users/casht/Desktop/TESTFOLDER/BeetTweek-Firmware/DSPBoardH7/.cproject.old",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49716,
						"regions":
						{
						},
						"selection":
						[
							[
								17857,
								17857
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4554.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/C/Users/casht/repos/eurorack-beettweek/BeetTweek-Firmware/DSPBoardH7/.project.templated",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1764,
						"regions":
						{
						},
						"selection":
						[
							[
								1764,
								1764
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 594.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/C/Users/casht/repos/eurorack-beettweek/BeetTweek-Firmware/DSPBoardH7/.project.old",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1851,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/C/Users/casht/repos/eurorack-beettweek/BeetTweek-Firmware/DSPBoardH7/.cproject.templated",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49310,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3630.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/C/Users/casht/Desktop/TESTFOLDER/BeetTweek-Firmware/DSPBoardH7/.project.deployed",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1833,
						"regions":
						{
						},
						"selection":
						[
							[
								531,
								531
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 330.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/C/Users/casht/Desktop/TESTFOLDER/BeetTweek-Firmware/DSPBoardH7/.project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1833,
						"regions":
						{
						},
						"selection":
						[
							[
								1643,
								1643
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 462.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/C/Users/casht/Desktop/TESTFOLDER/BeetTweek-Firmware/DSPBoardH7/.project.old",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1851,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 11,
					"file": "openCL/clGame.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 161140,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 71554.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29,
						"regions":
						{
						},
						"selection":
						[
							[
								29,
								29
							]
						],
						"settings":
						{
							"auto_name": "8+8+32+32+32+32+32+17+21=214",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "openCL/DotProduct.cl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 979,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Lisp/Lisp.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "openCL/DotProduct.o",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2257,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Binary/Binary.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "openCL/DotProduct.bc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7840,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Binary/Binary.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "openCL/matvec.cl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 243,
						"regions":
						{
						},
						"selection":
						[
							[
								243,
								243
							]
						],
						"settings":
						{
							"syntax": "Packages/Lisp/Lisp.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "openCL/matvec.ll",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1194,
						"regions":
						{
						},
						"selection":
						[
							[
								1194,
								1194
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "/C/Users/casht/Desktop/notes_on_game.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1141,
						"regions":
						{
						},
						"selection":
						[
							[
								1141,
								1141
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 616.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "/C/Users/casht/Desktop/TESTFOLDER/BeetTweek-Firmware/LICENSE",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 35149,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 394.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "openCL/dynamicDefines.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 288,
						"regions":
						{
						},
						"selection":
						[
							[
								288,
								288
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 21,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 270,
						"regions":
						{
						},
						"selection":
						[
							[
								66,
								69
							]
						],
						"settings":
						{
							"auto_name": "X = [A,B]",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "/C/Users/casht/repos/TechGame/GYMServer.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2757,
						"regions":
						{
						},
						"selection":
						[
							[
								570,
								570
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1848.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "/C/Users/casht/repos/TechGame/TD3.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5020,
						"regions":
						{
						},
						"selection":
						[
							[
								3626,
								3626
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1386.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "/C/Users/casht/repos/TechGame/TD3Training.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6237,
						"regions":
						{
						},
						"selection":
						[
							[
								3006,
								3006
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1374.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 25,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 35,
						"regions":
						{
						},
						"selection":
						[
							[
								33,
								33
							]
						],
						"settings":
						{
							"auto_name": "1: 1.6ms baseline",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "/C/Users/casht/Downloads/NVIDIA GPU Computing SDK/OpenCL/src/oclCopyComputeOverlap/VectorHypot.cl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1485,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Lisp/Lisp.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 66.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "/C/Users/casht/Downloads/NVIDIA GPU Computing SDK/OpenCL/src/oclCopyComputeOverlap/oclCopyComputeOverlap.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 34558,
						"regions":
						{
						},
						"selection":
						[
							[
								18233,
								18233
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7004.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "/C/Users/casht/repos/TechGame/reRunCMake.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 676,
						"regions":
						{
						},
						"selection":
						[
							[
								49,
								49
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Bash.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 29,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 133,
						"regions":
						{
						},
						"selection":
						[
							[
								133,
								0
							]
						],
						"settings":
						{
							"auto_name": "Exception thrown at 0x0000000000000000 in NewtonPh",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "openCL/test.ll",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2341,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "openCL/peep.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13232,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 10416.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "GameGPUCompute.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4420,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2706.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 31.0
	},
	"input":
	{
		"height": 47.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.183896797153,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 168.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.hex_viewer_inspector":
	{
		"height": 296.0
	},
	"pinned_build_system": "Packages/MSBuild/MSBuild.sublime-build",
	"project": "/C/Users/casht/repos/opencltest/sublimeproject.sublime-project",
	"replace":
	{
		"height": 58.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
		"last_automatic_layout":
		[
			[
				0,
				0,
				1,
				1
			]
		]
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 276.0,
	"status_bar_visible": true,
	"template_settings":
	{
		"max_columns": 1
	}
}
