{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"MapGe",
				"MapGetDataPointerFromCoord"
			],
			[
				"maptilecoords_",
				"map_tilecoords_Q16"
			],
			[
				"NewtonR",
				"NewtonRigidBody"
			],
			[
				"to",
				"toBuyPrintOut"
			],
			[
				"bes",
				"bestBuys"
			],
			[
				"best",
				"bestBuys"
			],
			[
				"total",
				"totalCartStat"
			],
			[
				"tot",
				"totalCartStat"
			],
			[
				"tota",
				"totalJson"
			],
			[
				"ap",
				"append"
			],
			[
				"ne",
				"netwidth"
			],
			[
				"net",
				"netdepth"
			],
			[
				"in",
				"invPart"
			],
			[
				"inv",
				"invPart"
			],
			[
				"item",
				"Items_Needed_Per_Unit"
			],
			[
				"de",
				"default="
			],
			[
				"Gy",
				"GYMServer"
			],
			[
				"geno",
				"genomes"
			],
			[
				"ac",
				"actionSize"
			],
			[
				"Read",
				"ReadFloat"
			],
			[
				"read",
				"ReadInt"
			],
			[
				"num",
				"numGyms"
			],
			[
				"pack",
				"unpack"
			],
			[
				"ran",
				"rand"
			],
			[
				"si",
				"size"
			],
			[
				"ex",
				"except"
			],
			[
				"com",
				"companyName"
			],
			[
				"va",
				"validDistributers"
			],
			[
				"con",
				"convert_dtypes"
			],
			[
				"sub",
				"subMatrixInventoryFetch"
			],
			[
				"st",
				"statePops"
			],
			[
				"Ev",
				"EvaluateSEIR_SDModelErrorP1"
			],
			[
				"ma",
				"maxIterations"
			],
			[
				"sta",
				"stateDataNP"
			],
			[
				"inf",
				"Infinity"
			],
			[
				"sd",
				"stateDataNP"
			],
			[
				"mu",
				"multiply"
			],
			[
				"tra",
				"transpose"
			],
			[
				"exa",
				"expand_dims"
			],
			[
				"mat",
				"matplotlib"
			],
			[
				"inter",
				"interpolatedCollumn"
			],
			[
				"a",
				"axvline"
			],
			[
				"numS",
				"numSamples"
			],
			[
				"param",
				"Params"
			],
			[
				"stat",
				"statePops"
			],
			[
				"state",
				"states"
			],
			[
				"ep",
				"epsilon"
			],
			[
				"ar",
				"array"
			],
			[
				"Ini",
				"InitialParams"
			],
			[
				"ts",
				"tseries"
			],
			[
				"last",
				"lastDay"
			],
			[
				"E",
				"Epsilon"
			],
			[
				"Grou",
				"GroupID\t‚ü†"
			],
			[
				"tr",
				"translationMap\t‚ü†"
			],
			[
				"po",
				"position *= 2\t‚ü†"
			],
			[
				"pu",
				"PushKeys\t‚òÖ pro ‚ü†"
			],
			[
				"OP",
				"OPT_TICK_MULT"
			],
			[
				"outer",
				"outerRefs"
			],
			[
				"ki",
				"kill"
			],
			[
				"pro",
				"processName"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					89,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\GameGPUCompute.h",
						"symkeys":
						[
							[
								328,
								347
							],
							[
								548,
								565
							],
							[
								578,
								595
							],
							[
								607,
								624
							],
							[
								699,
								717
							],
							[
								796,
								810
							],
							[
								824,
								838
							],
							[
								843,
								858
							],
							[
								871,
								882
							],
							[
								910,
								930
							],
							[
								980,
								995
							],
							[
								1005,
								1020
							],
							[
								1030,
								1045
							],
							[
								1056,
								1062
							],
							[
								1073,
								1090
							],
							[
								1100,
								1118
							],
							[
								1130,
								1145
							],
							[
								1163,
								1178
							],
							[
								1199,
								1216
							],
							[
								1226,
								1243
							],
							[
								1299,
								1320
							],
							[
								1341,
								1362
							],
							[
								1433,
								1454
							],
							[
								1497,
								1503
							],
							[
								3562,
								3581
							],
							[
								3857,
								3880
							],
							[
								3890,
								3917
							],
							[
								3935,
								3955
							],
							[
								3992,
								4016
							],
							[
								4026,
								4051
							]
						],
						"symlist":
						[
							"CL_HOST_ERROR_CHECK",
							"GPUCompileVariant",
							"GameState_Pointer",
							" GameState_Pointer",
							" ~GameState_Pointer",
							"GameGPUCompute",
							" GameGPUCompute",
							" ~GameGPUCompute",
							" AddCLSource",
							" AddCompileDefinition",
							" RunInitCompute0",
							" RunInitCompute1",
							" RunInitCompute2",
							" Stage1",
							" ReadFullGameState",
							" WriteFullGameState",
							" WriteGameStateB",
							" GameStateString",
							" SaveGameStateBase",
							" SaveGameStateDiff",
							" LoadGameStateFromDiff",
							" LoadGameStateFromDiff",
							" LoadGameStateFromDiff",
							" VENDOR",
							" BuildKernelRunSizes",
							" buildPreProcessorString",
							" writePreProcessorHeaderFile",
							" compileVariantString",
							" AquireAllGraphicsObjects",
							" ReleaseAllGraphicsObjects"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACOCgAAQVN0YXJBZGRUb0Nsb3NlZApBU3RhckFkZFRvT3BlbgpBU3RhckZvcm1QYXRoU3RlcHMKQVN0YXJGb3JtUGF0aFN0ZXBzX0lEQQpBU3RhckluaXRQYXRoTm9kZQpBU3Rhck5vZGUyTm9kZVRyYXZlcnNpYmxlCkFTdGFyTm9kZURpc3RhbmNlSHVyaXN0aWMKQVN0YXJOb2RlRGlzdGFuY2VIdXJpc3RpY19JREEKQVN0YXJOb2RlSW5DbG9zZWQKQVN0YXJOb2RlSW5PcGVuCkFTdGFyTm9kZUluc3RhbnRpYXRlCkFTdGFyTm9kZVZhbGlkCkFTdGFyT3BlbkhlYXBJbnNlcnQKQVN0YXJPcGVuSGVhcEtleQpBU3Rhck9wZW5IZWFwUmVtb3ZlCkFTdGFyT3BlbkhlYXBUcmlja2xlRG93bgpBU3Rhck9wZW5IZWFwVHJpY2tsZVVwCkFTdGFyUGF0aE5vZGVfR2V0TWFwRGF0YQpBU3RhclBhdGhOb2RlX0xhc3RQYXRoTm9kZQpBU3RhclBhdGhTdGVwc0luaXQKQVN0YXJQYXRoU3RlcHNOZXh0RnJlZVBhdGhOb2RlCkFTdGFyUHJpbnROb2RlU3RhdHMKQVN0YXJQcmludFBhdGgKQVN0YXJQcmludFBhdGhOb2RlU3RhdHMKQVN0YXJQcmludFNlYXJjaFBhdGhGcm9tCkFTdGFyUHJpbnRTZWFyY2hQYXRoVG8KQVN0YXJSZW1vdmVGcm9tQ2xvc2VkCkFTdGFyUmVtb3ZlRnJvbU9wZW4KQVN0YXJTZWFyY2hfQkZTX0NvbnRpbnVlCkFTdGFyU2VhcmNoX0JGU19JbnN0YW50aWF0ZQpBU3RhclNlYXJjaF9CRlNfSW5zdGFudGlhdGVQYXJyYWxsZWwKQVN0YXJTZWFyY2hfQkZTX1JvdXRpbmUKQVN0YXJTZWFyY2hfSURBX0NvbnRpbnVlCkFTdGFyU2VhcmNoX0lEQV9Jbml0Tm9kZQpBU3RhclNlYXJjaF9JREFfTG9jX0luX1BhdGgKQVN0YXJTZWFyY2hfSURBX05vZGVHcmFiTmV4dEJlc3RTdWNjZXNzb3IKQVN0YXJTZWFyY2hfSURBX05vZGVfSW5fUGF0aApBU3RhclNlYXJjaF9JREFfUm91dGluZQpBU3RhclNlYXJjaF9JREFfU2VhcmNoCkJJVEJBTktfR0VUX1NVQk5VTUJFUl9VSU5UCkJJVEJBTktfU0VUX1NVQk5VTUJFUl9VSU5UCkJhcnlDZW50cmljX0luX1RyaWFuZ2xlX1ExNgpDTElFTlRfSW5pdENsaWVudFN0YXRlcwpHRV9JTlQzX0VOVFJZX0NPVU5UCkdFX0lOVDNfU0lOR0xFX0VOVFJZCkdFX0lOVDNfV0hBQ0hBTUFDT0xJVDFfRU5UUlkKR1VJX1RPX1dPUkxEX1ExNgpHZXRNYXBUaWxlQ29vcmRGcm9tV29ybGQyRApMSU5FU19DbGVhckFsbApMSU5FU19EcmF3TGluZQpMSU5FU19EcmF3TGluZVdvcmxkCk1hY2hpbmVfQ3JlYXRlTWFjaGluZQpNYWNoaW5lX0luaXREZXNjcmlwdGlvbnMKTWFrZUNhcmRpbmFsRGlyZWN0aW9uT2Zmc2V0cwpNYXBCdWlsZFRpbGVWaWV3Ck1hcEJ1aWxkVGlsZVZpZXczQXJlYQpNYXBDcmVhdGUKTWFwQ3JlYXRlMgpNYXBDcmVhdGVTbG9wZQpNYXBEYXRhR2V0VGlsZQpNYXBEYXRhSGFzMkxvd0FkamFjZW50Q29ybmVycwpNYXBEYXRhTG93Q29ybmVyQ291bnQKTWFwRGF0YVNldFRpbGUKTWFwRGF0YVhMZXZlbApNYXBFeHBsb3JlclNwYXduCk1hcEdldERhdGFQb2ludGVyRnJvbUNvb3JkCk1hcEdldFRpbGVGcm9tQ29vcmQKTWFwSGFzMkxvd0FkamFjZW50Q29ybmVycwpNYXBIYXNMb3dDb3JuZXIKTWFwTG93Q29ybmVyQ291bnQKTWFwUmlkZ2VUeXBlCk1hcFRpbGVDb252ZXhIdWxsX0Nsb3Nlc3RQb2ludFRvUG9pbnQKTWFwVGlsZUNvbnZleEh1bGxfRnJvbV9UaWxlRGF0YQpNYXBUaWxlQ29udmV4SHVsbF9Qb2ludEluc2lkZQpNYXBUaWxlQ29vcmRDbGFtcApNYXBUaWxlQ29vcmRFbnRlcmFibGUKTWFwVGlsZUNvb3JkU3RhbmRJblZhbGlkCk1hcFRpbGVDb29yZFZhbGlkCk1hcFRpbGVEYXRhSGFzTG93Q29ybmVyCk1hcFRpbGVEYXRhX1BlZXBDb3VudApNYXBUaWxlRGF0YV9TZXRQZWVwQ291bnQKTWFwVGlsZURhdGFfVGlsZVNvbGlkCk1hcFRpbGVHZXRSb3RhdGlvbgpNYXBUaWxlVG9VVgpNYXBUaWxlV2hvbGVUb01hcFRpbGVDZW50ZXJRMTYKTWFwVGlsZVhMZXZlbApNYXBUb1dvcmxkCk1hcFVwZGF0ZVNoYWRvdwpNYXRyaXhfRmxvYXQ0X1RpbWVzX1ZlYzQKUGFydGljbGVEcmF3ClBhcnRpY2xlVXBkYXRlClBlZXBEcmF3ClBlZXBEcml2ZVBoeXNpY3MKUGVlcEdldE1hcFRpbGUKUGVlcE1hcFRpbGVDb2xsaXNpb25zClBlZXBNYXBWaXNpYmxpdHkKUGVlcFBlZXBQaHlzaWNzClBlZXBQcmVVcGRhdGUxClBlZXBQcmVVcGRhdGUyClBlZXBQcmludApQZWVwVG9QZWVwSW50ZXJhY3Rpb24KUGVlcFVwZGF0ZQpQcmludEZsb2F0MgpQcmludEZsb2F0MwpQcmludEZsb2F0NApQcmludE1vdXNlU3RhdGUKUHJpbnRTZWxlY3Rpb25QZWVwU3RhdHMKUHJpbnRfR0VfSU5UMgpQcmludF9HRV9JTlQzClByaW50X0dFX1NIT1JUMwpQcmludF9HRV9VSU5UMwpSZWdpb25Db2xsaXNpb24KU09NRV9JTlRFUk5BTF9DT1JESVNUClN0YXJ0dXBUZXN0cwpUaGlzQ2xpZW50ClRyaWFuZ2xlM0RIZWF2eV9DbG9zZXN0UG9pbnQKVHJpYW5nbGUzRE1ha2VIZWF2eQpUcmlhbmdsZTNEX01ha2UyRmFjZQpUcmlhbmdsZTNEX1RvQmFyeUNlbnRyaWMKVXBkYXRlTWFwRXhwbG9yZXIKV2Fsa0FuZEZpZ2h0CldvcmxkVG9NYXAKZ2FtZV9hcHBseV9hY3Rpb25zCmdhbWVfaW5pdF9tdWx0aQpnYW1lX2luaXRfbXVsdGkyCmdhbWVfaW5pdF9zaW5nbGUKZ2FtZV9pbml0X3NpbmdsZTIKZ2FtZV9wb3N0X3VwZGF0ZV9zaW5nbGUKZ2FtZV9wcmV1cGRhdGVfMQpnYW1lX3ByZXVwZGF0ZV8yCmdhbWVfdXBkYXRlCmdhbWVfdXBkYXRlMgpnYW1lX3VwZGF0ZXByZTEKc2l6ZV90ZXN0c19rZXJuZWwAAAAAAAAAAD4CAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzAkAAAAAAADMCQAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\clGame.c",
						"symkeys":
						[
							[
								251,
								261
							],
							[
								357,
								370
							],
							[
								426,
								439
							],
							[
								503,
								517
							],
							[
								582,
								597
							],
							[
								663,
								674
							],
							[
								729,
								740
							],
							[
								803,
								814
							],
							[
								898,
								924
							],
							[
								1146,
								1172
							],
							[
								1604,
								1618
							],
							[
								1717,
								1731
							],
							[
								1902,
								1920
							],
							[
								2023,
								2049
							],
							[
								2182,
								2201
							],
							[
								2348,
								2360
							],
							[
								3661,
								3690
							],
							[
								4259,
								4284
							],
							[
								4514,
								4537
							],
							[
								4652,
								4673
							],
							[
								4854,
								4875
							],
							[
								4980,
								5004
							],
							[
								5183,
								5198
							],
							[
								5451,
								5472
							],
							[
								5751,
								5768
							],
							[
								6020,
								6033
							],
							[
								6306,
								6319
							],
							[
								6532,
								6556
							],
							[
								6903,
								6924
							],
							[
								8456,
								8480
							],
							[
								9310,
								9331
							],
							[
								9942,
								9962
							],
							[
								10228,
								10245
							],
							[
								10413,
								10440
							],
							[
								11220,
								11256
							],
							[
								11829,
								11846
							],
							[
								12110,
								12124
							],
							[
								12239,
								12264
							],
							[
								13427,
								13455
							],
							[
								14563,
								14579
							],
							[
								14720,
								14744
							],
							[
								16051,
								16070
							],
							[
								16361,
								16380
							],
							[
								16684,
								16700
							],
							[
								16875,
								16892
							],
							[
								17071,
								17086
							],
							[
								17261,
								17283
							],
							[
								18035,
								18054
							],
							[
								18396,
								18410
							],
							[
								18701,
								18731
							],
							[
								19187,
								19208
							],
							[
								19383,
								19408
							],
							[
								19691,
								19720
							],
							[
								19895,
								19914
							],
							[
								20110,
								20133
							],
							[
								20255,
								20277
							],
							[
								20591,
								20615
							],
							[
								20934,
								20948
							],
							[
								21284,
								21303
							],
							[
								21452,
								21472
							],
							[
								21764,
								21792
							],
							[
								22196,
								22214
							],
							[
								25595,
								25617
							],
							[
								27588,
								27612
							],
							[
								33173,
								33196
							],
							[
								34795,
								34823
							],
							[
								35069,
								35096
							],
							[
								35326,
								35350
							],
							[
								35575,
								35616
							],
							[
								36967,
								36989
							],
							[
								39578,
								39602
							],
							[
								40147,
								40170
							],
							[
								41439,
								41463
							],
							[
								41837,
								41863
							],
							[
								42281,
								42308
							],
							[
								42619,
								42640
							],
							[
								42784,
								42808
							],
							[
								43553,
								43581
							],
							[
								47508,
								47527
							],
							[
								48086,
								48106
							],
							[
								48579,
								48610
							],
							[
								51589,
								51598
							],
							[
								51670,
								51685
							],
							[
								53747,
								53768
							],
							[
								54290,
								54300
							],
							[
								54676,
								54686
							],
							[
								55023,
								55037
							],
							[
								56542,
								56557
							],
							[
								57293,
								57330
							],
							[
								58067,
								58096
							],
							[
								58818,
								58839
							],
							[
								66457,
								66473
							],
							[
								69777,
								69789
							],
							[
								71502,
								71516
							],
							[
								71578,
								71592
							],
							[
								73485,
								73501
							],
							[
								75229,
								75239
							],
							[
								79785,
								79799
							],
							[
								79956,
								79971
							],
							[
								83299,
								83315
							],
							[
								88018,
								88039
							],
							[
								88576,
								88599
							],
							[
								92047,
								92064
							],
							[
								92319,
								92345
							],
							[
								93491,
								93505
							],
							[
								94319,
								94333
							],
							[
								94502,
								94526
							],
							[
								94968,
								94987
							],
							[
								96448,
								96464
							],
							[
								96796,
								96807
							],
							[
								96994,
								97009
							],
							[
								97734,
								97752
							],
							[
								117568,
								117598
							],
							[
								117815,
								117829
							],
							[
								121554,
								121563
							],
							[
								124339,
								124349
							],
							[
								124541,
								124553
							],
							[
								126674,
								126690
							],
							[
								127173,
								127191
							],
							[
								127547,
								127570
							],
							[
								127863,
								127879
							],
							[
								129236,
								129251
							],
							[
								129436,
								129452
							],
							[
								129637,
								129654
							],
							[
								134261,
								134278
							],
							[
								134357,
								134365
							],
							[
								136757,
								136769
							],
							[
								137757,
								137772
							],
							[
								138171,
								138182
							],
							[
								139538,
								139550
							],
							[
								140748,
								140771
							],
							[
								142791,
								142807
							],
							[
								143763,
								143779
							],
							[
								146093,
								146110
							]
						],
						"symlist":
						[
							"ThisClient",
							"Print_GE_INT2",
							"Print_GE_INT3",
							"Print_GE_UINT3",
							"Print_GE_SHORT3",
							"PrintFloat2",
							"PrintFloat3",
							"PrintFloat4",
							"BITBANK_GET_SUBNUMBER_UINT",
							"BITBANK_SET_SUBNUMBER_UINT",
							"MapDataGetTile",
							"MapDataSetTile",
							"MapTileGetRotation",
							"MapGetDataPointerFromCoord",
							"MapGetTileFromCoord",
							"MapRidgeType",
							"MapDataHas2LowAdjacentCorners",
							"MapHas2LowAdjacentCorners",
							"MapTileDataHasLowCorner",
							"MapTileData_TileSolid",
							"MapTileData_PeepCount",
							"MapTileData_SetPeepCount",
							"MapHasLowCorner",
							"MapDataLowCornerCount",
							"MapLowCornerCount",
							"MapDataXLevel",
							"MapTileXLevel",
							"MapTileCoordStandInValid",
							"MapTileCoordEnterable",
							"Machine_InitDescriptions",
							"Machine_CreateMachine",
							"AStarNodeInstantiate",
							"AStarInitPathNode",
							"AStarSearch_BFS_Instantiate",
							"AStarSearch_BFS_InstantiateParrallel",
							"MapTileCoordValid",
							"AStarNodeValid",
							"AStarNode2NodeTraversible",
							"MakeCardinalDirectionOffsets",
							"AStarOpenHeapKey",
							"AStarOpenHeapTrickleDown",
							"AStarOpenHeapRemove",
							"AStarRemoveFromOpen",
							"AStarAddToClosed",
							"AStarNodeInClosed",
							"AStarNodeInOpen",
							"AStarOpenHeapTrickleUp",
							"AStarOpenHeapInsert",
							"AStarAddToOpen",
							"AStarPathStepsNextFreePathNode",
							"AStarRemoveFromClosed",
							"AStarNodeDistanceHuristic",
							"AStarNodeDistanceHuristic_IDA",
							"AStarPrintNodeStats",
							"AStarPrintPathNodeStats",
							"AStarPrintSearchPathTo",
							"AStarPrintSearchPathFrom",
							"AStarPrintPath",
							"GE_INT3_ENTRY_COUNT",
							"GE_INT3_SINGLE_ENTRY",
							"GE_INT3_WHACHAMACOLIT1_ENTRY",
							"AStarFormPathSteps",
							"AStarFormPathSteps_IDA",
							"AStarSearch_BFS_Continue",
							"AStarSearch_BFS_Routine",
							"AStarSearch_IDA_Node_In_Path",
							"AStarSearch_IDA_Loc_In_Path",
							"AStarSearch_IDA_InitNode",
							"AStarSearch_IDA_NodeGrabNextBestSuccessor",
							"AStarSearch_IDA_Search",
							"AStarSearch_IDA_Continue",
							"AStarSearch_IDA_Routine",
							"AStarPathNode_GetMapData",
							"AStarPathNode_LastPathNode",
							"BaryCentric_In_Triangle_Q16",
							"SOME_INTERNAL_CORDIST",
							"Triangle3D_ToBaryCentric",
							"Triangle3DHeavy_ClosestPoint",
							"Triangle3DMakeHeavy",
							"Triangle3D_Make2Face",
							"MapTileConvexHull_From_TileData",
							"PeepPrint",
							"PeepPeepPhysics",
							"PeepToPeepInteraction",
							"WorldToMap",
							"MapToWorld",
							"PeepGetMapTile",
							"RegionCollision",
							"MapTileConvexHull_ClosestPointToPoint",
							"MapTileConvexHull_PointInside",
							"PeepMapTileCollisions",
							"PeepDrivePhysics",
							"WalkAndFight",
							"PeepPreUpdate1",
							"PeepPreUpdate2",
							"PeepMapVisiblity",
							"PeepUpdate",
							"ParticleUpdate",
							"MapUpdateShadow",
							"MapBuildTileView",
							"MapBuildTileView3Area",
							"PrintSelectionPeepStats",
							"MapTileCoordClamp",
							"GetMapTileCoordFromWorld2D",
							"LINES_DrawLine",
							"LINES_ClearAll",
							"Matrix_Float4_Times_Vec4",
							"LINES_DrawLineWorld",
							"GUI_TO_WORLD_Q16",
							"MapTileToUV",
							"PrintMouseState",
							"game_apply_actions",
							"MapTileWholeToMapTileCenterQ16",
							"MapCreateSlope",
							"MapCreate",
							"MapCreate2",
							"StartupTests",
							"MapExplorerSpawn",
							"AStarPathStepsInit",
							"CLIENT_InitClientStates",
							"game_init_single",
							"game_init_multi",
							"game_init_multi2",
							"game_init_single2",
							"UpdateMapExplorer",
							"PeepDraw",
							"ParticleDraw",
							"game_updatepre1",
							"game_update",
							"game_update2",
							"game_post_update_single",
							"game_preupdate_1",
							"game_preupdate_2",
							"size_tests_kernel"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA+AgAAIEFkZENMU291cmNlCiBBZGRDb21waWxlRGVmaW5pdGlvbgogQXF1aXJlQWxsR3JhcGhpY3NPYmplY3RzCiBCdWlsZEtlcm5lbFJ1blNpemVzCiBHYW1lR1BVQ29tcHV0ZQogR2FtZVN0YXRlU3RyaW5nCiBHYW1lU3RhdGVfUG9pbnRlcgogTG9hZEdhbWVTdGF0ZUZyb21EaWZmCiBMb2FkR2FtZVN0YXRlRnJvbURpZmYKIExvYWRHYW1lU3RhdGVGcm9tRGlmZgogUmVhZEZ1bGxHYW1lU3RhdGUKIFJlbGVhc2VBbGxHcmFwaGljc09iamVjdHMKIFJ1bkluaXRDb21wdXRlMAogUnVuSW5pdENvbXB1dGUxCiBSdW5Jbml0Q29tcHV0ZTIKIFNhdmVHYW1lU3RhdGVCYXNlCiBTYXZlR2FtZVN0YXRlRGlmZgogU3RhZ2UxCiBWRU5ET1IKIFdyaXRlRnVsbEdhbWVTdGF0ZQogV3JpdGVHYW1lU3RhdGVCCiBidWlsZFByZVByb2Nlc3NvclN0cmluZwogY29tcGlsZVZhcmlhbnRTdHJpbmcKIHdyaXRlUHJlUHJvY2Vzc29ySGVhZGVyRmlsZQogfkdhbWVHUFVDb21wdXRlCiB+R2FtZVN0YXRlX1BvaW50ZXIKQ0xfSE9TVF9FUlJPUl9DSEVDSwpHUFVDb21waWxlVmFyaWFudApHYW1lR1BVQ29tcHV0ZQpHYW1lU3RhdGVfUG9pbnRlcgAAAAAAAAAAjgoAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					91,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\GameGPUCompute.cpp",
						"symkeys":
						[
							[
								314,
								344
							],
							[
								355,
								386
							],
							[
								1529,
								1565
							],
							[
								1665,
								1700
							],
							[
								2097,
								2124
							],
							[
								2992,
								3023
							],
							[
								4173,
								4204
							],
							[
								7871,
								7902
							],
							[
								16455,
								16477
							],
							[
								18701,
								18734
							],
							[
								19523,
								19557
							],
							[
								19975,
								20006
							],
							[
								20208,
								20241
							],
							[
								20653,
								20684
							],
							[
								20783,
								20816
							],
							[
								22000,
								22037
							],
							[
								22976,
								23013
							],
							[
								23133,
								23170
							],
							[
								23631,
								23670
							],
							[
								23916,
								23959
							],
							[
								24392,
								24428
							],
							[
								24885,
								24925
							],
							[
								25162,
								25203
							]
						],
						"symlist":
						[
							"GameGPUCompute::GameGPUCompute",
							"GameGPUCompute::~GameGPUCompute",
							"GameGPUCompute::AddCompileDefinition",
							"GameGPUCompute::BuildKernelRunSizes",
							"GameGPUCompute::AddCLSource",
							"GameGPUCompute::RunInitCompute0",
							"GameGPUCompute::RunInitCompute1",
							"GameGPUCompute::RunInitCompute2",
							"GameGPUCompute::Stage1",
							"GameGPUCompute::ReadFullGameState",
							"GameGPUCompute::WriteFullGameState",
							"GameGPUCompute::WriteGameStateB",
							"GameGPUCompute::SaveGameStateBase",
							"GameGPUCompute::GameStateString",
							"GameGPUCompute::SaveGameStateDiff",
							"GameGPUCompute::LoadGameStateFromDiff",
							"GameGPUCompute::LoadGameStateFromDiff",
							"GameGPUCompute::LoadGameStateFromDiff",
							"GameGPUCompute::buildPreProcessorString",
							"GameGPUCompute::writePreProcessorHeaderFile",
							"GameGPUCompute::compileVariantString",
							"GameGPUCompute::AquireAllGraphicsObjects",
							"GameGPUCompute::ReleaseAllGraphicsObjects"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACOCgAAQVN0YXJBZGRUb0Nsb3NlZApBU3RhckFkZFRvT3BlbgpBU3RhckZvcm1QYXRoU3RlcHMKQVN0YXJGb3JtUGF0aFN0ZXBzX0lEQQpBU3RhckluaXRQYXRoTm9kZQpBU3Rhck5vZGUyTm9kZVRyYXZlcnNpYmxlCkFTdGFyTm9kZURpc3RhbmNlSHVyaXN0aWMKQVN0YXJOb2RlRGlzdGFuY2VIdXJpc3RpY19JREEKQVN0YXJOb2RlSW5DbG9zZWQKQVN0YXJOb2RlSW5PcGVuCkFTdGFyTm9kZUluc3RhbnRpYXRlCkFTdGFyTm9kZVZhbGlkCkFTdGFyT3BlbkhlYXBJbnNlcnQKQVN0YXJPcGVuSGVhcEtleQpBU3Rhck9wZW5IZWFwUmVtb3ZlCkFTdGFyT3BlbkhlYXBUcmlja2xlRG93bgpBU3Rhck9wZW5IZWFwVHJpY2tsZVVwCkFTdGFyUGF0aE5vZGVfR2V0TWFwRGF0YQpBU3RhclBhdGhOb2RlX0xhc3RQYXRoTm9kZQpBU3RhclBhdGhTdGVwc0luaXQKQVN0YXJQYXRoU3RlcHNOZXh0RnJlZVBhdGhOb2RlCkFTdGFyUHJpbnROb2RlU3RhdHMKQVN0YXJQcmludFBhdGgKQVN0YXJQcmludFBhdGhOb2RlU3RhdHMKQVN0YXJQcmludFNlYXJjaFBhdGhGcm9tCkFTdGFyUHJpbnRTZWFyY2hQYXRoVG8KQVN0YXJSZW1vdmVGcm9tQ2xvc2VkCkFTdGFyUmVtb3ZlRnJvbU9wZW4KQVN0YXJTZWFyY2hfQkZTX0NvbnRpbnVlCkFTdGFyU2VhcmNoX0JGU19JbnN0YW50aWF0ZQpBU3RhclNlYXJjaF9CRlNfSW5zdGFudGlhdGVQYXJyYWxsZWwKQVN0YXJTZWFyY2hfQkZTX1JvdXRpbmUKQVN0YXJTZWFyY2hfSURBX0NvbnRpbnVlCkFTdGFyU2VhcmNoX0lEQV9Jbml0Tm9kZQpBU3RhclNlYXJjaF9JREFfTG9jX0luX1BhdGgKQVN0YXJTZWFyY2hfSURBX05vZGVHcmFiTmV4dEJlc3RTdWNjZXNzb3IKQVN0YXJTZWFyY2hfSURBX05vZGVfSW5fUGF0aApBU3RhclNlYXJjaF9JREFfUm91dGluZQpBU3RhclNlYXJjaF9JREFfU2VhcmNoCkJJVEJBTktfR0VUX1NVQk5VTUJFUl9VSU5UCkJJVEJBTktfU0VUX1NVQk5VTUJFUl9VSU5UCkJhcnlDZW50cmljX0luX1RyaWFuZ2xlX1ExNgpDTElFTlRfSW5pdENsaWVudFN0YXRlcwpHRV9JTlQzX0VOVFJZX0NPVU5UCkdFX0lOVDNfU0lOR0xFX0VOVFJZCkdFX0lOVDNfV0hBQ0hBTUFDT0xJVDFfRU5UUlkKR1VJX1RPX1dPUkxEX1ExNgpHZXRNYXBUaWxlQ29vcmRGcm9tV29ybGQyRApMSU5FU19DbGVhckFsbApMSU5FU19EcmF3TGluZQpMSU5FU19EcmF3TGluZVdvcmxkCk1hY2hpbmVfQ3JlYXRlTWFjaGluZQpNYWNoaW5lX0luaXREZXNjcmlwdGlvbnMKTWFrZUNhcmRpbmFsRGlyZWN0aW9uT2Zmc2V0cwpNYXBCdWlsZFRpbGVWaWV3Ck1hcEJ1aWxkVGlsZVZpZXczQXJlYQpNYXBDcmVhdGUKTWFwQ3JlYXRlMgpNYXBDcmVhdGVTbG9wZQpNYXBEYXRhR2V0VGlsZQpNYXBEYXRhSGFzMkxvd0FkamFjZW50Q29ybmVycwpNYXBEYXRhTG93Q29ybmVyQ291bnQKTWFwRGF0YVNldFRpbGUKTWFwRGF0YVhMZXZlbApNYXBFeHBsb3JlclNwYXduCk1hcEdldERhdGFQb2ludGVyRnJvbUNvb3JkCk1hcEdldFRpbGVGcm9tQ29vcmQKTWFwSGFzMkxvd0FkamFjZW50Q29ybmVycwpNYXBIYXNMb3dDb3JuZXIKTWFwTG93Q29ybmVyQ291bnQKTWFwUmlkZ2VUeXBlCk1hcFRpbGVDb252ZXhIdWxsX0Nsb3Nlc3RQb2ludFRvUG9pbnQKTWFwVGlsZUNvbnZleEh1bGxfRnJvbV9UaWxlRGF0YQpNYXBUaWxlQ29udmV4SHVsbF9Qb2ludEluc2lkZQpNYXBUaWxlQ29vcmRDbGFtcApNYXBUaWxlQ29vcmRFbnRlcmFibGUKTWFwVGlsZUNvb3JkU3RhbmRJblZhbGlkCk1hcFRpbGVDb29yZFZhbGlkCk1hcFRpbGVEYXRhSGFzTG93Q29ybmVyCk1hcFRpbGVEYXRhX1BlZXBDb3VudApNYXBUaWxlRGF0YV9TZXRQZWVwQ291bnQKTWFwVGlsZURhdGFfVGlsZVNvbGlkCk1hcFRpbGVHZXRSb3RhdGlvbgpNYXBUaWxlVG9VVgpNYXBUaWxlV2hvbGVUb01hcFRpbGVDZW50ZXJRMTYKTWFwVGlsZVhMZXZlbApNYXBUb1dvcmxkCk1hcFVwZGF0ZVNoYWRvdwpNYXRyaXhfRmxvYXQ0X1RpbWVzX1ZlYzQKUGFydGljbGVEcmF3ClBhcnRpY2xlVXBkYXRlClBlZXBEcmF3ClBlZXBEcml2ZVBoeXNpY3MKUGVlcEdldE1hcFRpbGUKUGVlcE1hcFRpbGVDb2xsaXNpb25zClBlZXBNYXBWaXNpYmxpdHkKUGVlcFBlZXBQaHlzaWNzClBlZXBQcmVVcGRhdGUxClBlZXBQcmVVcGRhdGUyClBlZXBQcmludApQZWVwVG9QZWVwSW50ZXJhY3Rpb24KUGVlcFVwZGF0ZQpQcmludEZsb2F0MgpQcmludEZsb2F0MwpQcmludEZsb2F0NApQcmludE1vdXNlU3RhdGUKUHJpbnRTZWxlY3Rpb25QZWVwU3RhdHMKUHJpbnRfR0VfSU5UMgpQcmludF9HRV9JTlQzClByaW50X0dFX1NIT1JUMwpQcmludF9HRV9VSU5UMwpSZWdpb25Db2xsaXNpb24KU09NRV9JTlRFUk5BTF9DT1JESVNUClN0YXJ0dXBUZXN0cwpUaGlzQ2xpZW50ClRyaWFuZ2xlM0RIZWF2eV9DbG9zZXN0UG9pbnQKVHJpYW5nbGUzRE1ha2VIZWF2eQpUcmlhbmdsZTNEX01ha2UyRmFjZQpUcmlhbmdsZTNEX1RvQmFyeUNlbnRyaWMKVXBkYXRlTWFwRXhwbG9yZXIKV2Fsa0FuZEZpZ2h0CldvcmxkVG9NYXAKZ2FtZV9hcHBseV9hY3Rpb25zCmdhbWVfaW5pdF9tdWx0aQpnYW1lX2luaXRfbXVsdGkyCmdhbWVfaW5pdF9zaW5nbGUKZ2FtZV9pbml0X3NpbmdsZTIKZ2FtZV9wb3N0X3VwZGF0ZV9zaW5nbGUKZ2FtZV9wcmV1cGRhdGVfMQpnYW1lX3ByZXVwZGF0ZV8yCmdhbWVfdXBkYXRlCmdhbWVfdXBkYXRlMgpnYW1lX3VwZGF0ZXByZTEKc2l6ZV90ZXN0c19rZXJuZWwAAAAAAAAAACEDAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					92,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\main.cpp",
						"symkeys":
						[
							[
								711,
								729
							],
							[
								884,
								898
							],
							[
								1024,
								1028
							],
							[
								1192,
								1196
							],
							[
								1220,
								1226
							],
							[
								1302,
								1314
							],
							[
								1722,
								1737
							],
							[
								2124,
								2129
							],
							[
								2196,
								2200
							]
						],
						"symlist":
						[
							"ActionTrackingInit",
							"ActionWrapInit",
							"GSCS",
							"GSCS",
							"random",
							"WaitTickTime",
							"MessageCallback",
							"print",
							"main"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAhAwAAR2FtZUdQVUNvbXB1dGU6OkFkZENMU291cmNlCkdhbWVHUFVDb21wdXRlOjpBZGRDb21waWxlRGVmaW5pdGlvbgpHYW1lR1BVQ29tcHV0ZTo6QXF1aXJlQWxsR3JhcGhpY3NPYmplY3RzCkdhbWVHUFVDb21wdXRlOjpCdWlsZEtlcm5lbFJ1blNpemVzCkdhbWVHUFVDb21wdXRlOjpHYW1lR1BVQ29tcHV0ZQpHYW1lR1BVQ29tcHV0ZTo6R2FtZVN0YXRlU3RyaW5nCkdhbWVHUFVDb21wdXRlOjpMb2FkR2FtZVN0YXRlRnJvbURpZmYKR2FtZUdQVUNvbXB1dGU6OkxvYWRHYW1lU3RhdGVGcm9tRGlmZgpHYW1lR1BVQ29tcHV0ZTo6TG9hZEdhbWVTdGF0ZUZyb21EaWZmCkdhbWVHUFVDb21wdXRlOjpSZWFkRnVsbEdhbWVTdGF0ZQpHYW1lR1BVQ29tcHV0ZTo6UmVsZWFzZUFsbEdyYXBoaWNzT2JqZWN0cwpHYW1lR1BVQ29tcHV0ZTo6UnVuSW5pdENvbXB1dGUwCkdhbWVHUFVDb21wdXRlOjpSdW5Jbml0Q29tcHV0ZTEKR2FtZUdQVUNvbXB1dGU6OlJ1bkluaXRDb21wdXRlMgpHYW1lR1BVQ29tcHV0ZTo6U2F2ZUdhbWVTdGF0ZUJhc2UKR2FtZUdQVUNvbXB1dGU6OlNhdmVHYW1lU3RhdGVEaWZmCkdhbWVHUFVDb21wdXRlOjpTdGFnZTEKR2FtZUdQVUNvbXB1dGU6OldyaXRlRnVsbEdhbWVTdGF0ZQpHYW1lR1BVQ29tcHV0ZTo6V3JpdGVHYW1lU3RhdGVCCkdhbWVHUFVDb21wdXRlOjpidWlsZFByZVByb2Nlc3NvclN0cmluZwpHYW1lR1BVQ29tcHV0ZTo6Y29tcGlsZVZhcmlhbnRTdHJpbmcKR2FtZUdQVUNvbXB1dGU6OndyaXRlUHJlUHJvY2Vzc29ySGVhZGVyRmlsZQpHYW1lR1BVQ29tcHV0ZTo6fkdhbWVHUFVDb21wdXRlAAAAAAAAAABaAAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\clGame.c",
						"symkeys":
						[
							[
								251,
								261
							],
							[
								357,
								370
							],
							[
								426,
								439
							],
							[
								503,
								517
							],
							[
								582,
								597
							],
							[
								663,
								674
							],
							[
								729,
								740
							],
							[
								803,
								814
							],
							[
								898,
								924
							],
							[
								1146,
								1172
							],
							[
								1604,
								1618
							],
							[
								1717,
								1731
							],
							[
								1902,
								1920
							],
							[
								2023,
								2049
							],
							[
								2182,
								2201
							],
							[
								2348,
								2360
							],
							[
								3661,
								3690
							],
							[
								4259,
								4284
							],
							[
								4514,
								4537
							],
							[
								4652,
								4673
							],
							[
								4854,
								4875
							],
							[
								4980,
								5004
							],
							[
								5183,
								5198
							],
							[
								5451,
								5472
							],
							[
								5751,
								5768
							],
							[
								6020,
								6033
							],
							[
								6306,
								6319
							],
							[
								6532,
								6556
							],
							[
								6903,
								6924
							],
							[
								8456,
								8480
							],
							[
								9310,
								9331
							],
							[
								9942,
								9962
							],
							[
								10228,
								10245
							],
							[
								10413,
								10440
							],
							[
								11220,
								11256
							],
							[
								11829,
								11846
							],
							[
								12110,
								12124
							],
							[
								12239,
								12264
							],
							[
								13427,
								13455
							],
							[
								14563,
								14579
							],
							[
								14720,
								14744
							],
							[
								16051,
								16070
							],
							[
								16361,
								16380
							],
							[
								16684,
								16700
							],
							[
								16875,
								16892
							],
							[
								17071,
								17086
							],
							[
								17261,
								17283
							],
							[
								18035,
								18054
							],
							[
								18396,
								18410
							],
							[
								18701,
								18731
							],
							[
								19187,
								19208
							],
							[
								19383,
								19408
							],
							[
								19691,
								19720
							],
							[
								19895,
								19914
							],
							[
								20110,
								20133
							],
							[
								20255,
								20277
							],
							[
								20591,
								20615
							],
							[
								20934,
								20948
							],
							[
								21284,
								21303
							],
							[
								21452,
								21472
							],
							[
								21764,
								21792
							],
							[
								22196,
								22214
							],
							[
								25595,
								25617
							],
							[
								27588,
								27612
							],
							[
								33173,
								33196
							],
							[
								34795,
								34823
							],
							[
								35069,
								35096
							],
							[
								35326,
								35350
							],
							[
								35575,
								35616
							],
							[
								36967,
								36989
							],
							[
								39578,
								39602
							],
							[
								40147,
								40170
							],
							[
								41439,
								41463
							],
							[
								41837,
								41863
							],
							[
								42281,
								42308
							],
							[
								42619,
								42640
							],
							[
								42784,
								42808
							],
							[
								43553,
								43581
							],
							[
								47508,
								47527
							],
							[
								48086,
								48106
							],
							[
								48579,
								48610
							],
							[
								51589,
								51598
							],
							[
								51670,
								51685
							],
							[
								53747,
								53768
							],
							[
								54290,
								54300
							],
							[
								54676,
								54686
							],
							[
								55023,
								55037
							],
							[
								56542,
								56557
							],
							[
								57293,
								57330
							],
							[
								58067,
								58096
							],
							[
								58818,
								58839
							],
							[
								66457,
								66473
							],
							[
								69777,
								69789
							],
							[
								71502,
								71516
							],
							[
								71578,
								71592
							],
							[
								73485,
								73501
							],
							[
								75229,
								75239
							],
							[
								79785,
								79799
							],
							[
								79956,
								79971
							],
							[
								83299,
								83315
							],
							[
								88018,
								88039
							],
							[
								88576,
								88599
							],
							[
								92047,
								92064
							],
							[
								92319,
								92345
							],
							[
								93491,
								93505
							],
							[
								94319,
								94333
							],
							[
								94502,
								94526
							],
							[
								94968,
								94987
							],
							[
								96448,
								96464
							],
							[
								96796,
								96807
							],
							[
								96994,
								97009
							],
							[
								97734,
								97752
							],
							[
								117568,
								117598
							],
							[
								117815,
								117829
							],
							[
								121554,
								121563
							],
							[
								124339,
								124349
							],
							[
								124541,
								124553
							],
							[
								126674,
								126690
							],
							[
								127173,
								127191
							],
							[
								127547,
								127570
							],
							[
								127863,
								127879
							],
							[
								129236,
								129251
							],
							[
								129436,
								129452
							],
							[
								129637,
								129654
							],
							[
								134261,
								134278
							],
							[
								134357,
								134365
							],
							[
								136757,
								136769
							],
							[
								137757,
								137772
							],
							[
								138171,
								138182
							],
							[
								139538,
								139550
							],
							[
								140748,
								140771
							],
							[
								142791,
								142807
							],
							[
								143763,
								143779
							],
							[
								146093,
								146110
							]
						],
						"symlist":
						[
							"ThisClient",
							"Print_GE_INT2",
							"Print_GE_INT3",
							"Print_GE_UINT3",
							"Print_GE_SHORT3",
							"PrintFloat2",
							"PrintFloat3",
							"PrintFloat4",
							"BITBANK_GET_SUBNUMBER_UINT",
							"BITBANK_SET_SUBNUMBER_UINT",
							"MapDataGetTile",
							"MapDataSetTile",
							"MapTileGetRotation",
							"MapGetDataPointerFromCoord",
							"MapGetTileFromCoord",
							"MapRidgeType",
							"MapDataHas2LowAdjacentCorners",
							"MapHas2LowAdjacentCorners",
							"MapTileDataHasLowCorner",
							"MapTileData_TileSolid",
							"MapTileData_PeepCount",
							"MapTileData_SetPeepCount",
							"MapHasLowCorner",
							"MapDataLowCornerCount",
							"MapLowCornerCount",
							"MapDataXLevel",
							"MapTileXLevel",
							"MapTileCoordStandInValid",
							"MapTileCoordEnterable",
							"Machine_InitDescriptions",
							"Machine_CreateMachine",
							"AStarNodeInstantiate",
							"AStarInitPathNode",
							"AStarSearch_BFS_Instantiate",
							"AStarSearch_BFS_InstantiateParrallel",
							"MapTileCoordValid",
							"AStarNodeValid",
							"AStarNode2NodeTraversible",
							"MakeCardinalDirectionOffsets",
							"AStarOpenHeapKey",
							"AStarOpenHeapTrickleDown",
							"AStarOpenHeapRemove",
							"AStarRemoveFromOpen",
							"AStarAddToClosed",
							"AStarNodeInClosed",
							"AStarNodeInOpen",
							"AStarOpenHeapTrickleUp",
							"AStarOpenHeapInsert",
							"AStarAddToOpen",
							"AStarPathStepsNextFreePathNode",
							"AStarRemoveFromClosed",
							"AStarNodeDistanceHuristic",
							"AStarNodeDistanceHuristic_IDA",
							"AStarPrintNodeStats",
							"AStarPrintPathNodeStats",
							"AStarPrintSearchPathTo",
							"AStarPrintSearchPathFrom",
							"AStarPrintPath",
							"GE_INT3_ENTRY_COUNT",
							"GE_INT3_SINGLE_ENTRY",
							"GE_INT3_WHACHAMACOLIT1_ENTRY",
							"AStarFormPathSteps",
							"AStarFormPathSteps_IDA",
							"AStarSearch_BFS_Continue",
							"AStarSearch_BFS_Routine",
							"AStarSearch_IDA_Node_In_Path",
							"AStarSearch_IDA_Loc_In_Path",
							"AStarSearch_IDA_InitNode",
							"AStarSearch_IDA_NodeGrabNextBestSuccessor",
							"AStarSearch_IDA_Search",
							"AStarSearch_IDA_Continue",
							"AStarSearch_IDA_Routine",
							"AStarPathNode_GetMapData",
							"AStarPathNode_LastPathNode",
							"BaryCentric_In_Triangle_Q16",
							"SOME_INTERNAL_CORDIST",
							"Triangle3D_ToBaryCentric",
							"Triangle3DHeavy_ClosestPoint",
							"Triangle3DMakeHeavy",
							"Triangle3D_Make2Face",
							"MapTileConvexHull_From_TileData",
							"PeepPrint",
							"PeepPeepPhysics",
							"PeepToPeepInteraction",
							"WorldToMap",
							"MapToWorld",
							"PeepGetMapTile",
							"RegionCollision",
							"MapTileConvexHull_ClosestPointToPoint",
							"MapTileConvexHull_PointInside",
							"PeepMapTileCollisions",
							"PeepDrivePhysics",
							"WalkAndFight",
							"PeepPreUpdate1",
							"PeepPreUpdate2",
							"PeepMapVisiblity",
							"PeepUpdate",
							"ParticleUpdate",
							"MapUpdateShadow",
							"MapBuildTileView",
							"MapBuildTileView3Area",
							"PrintSelectionPeepStats",
							"MapTileCoordClamp",
							"GetMapTileCoordFromWorld2D",
							"LINES_DrawLine",
							"LINES_ClearAll",
							"Matrix_Float4_Times_Vec4",
							"LINES_DrawLineWorld",
							"GUI_TO_WORLD_Q16",
							"MapTileToUV",
							"PrintMouseState",
							"game_apply_actions",
							"MapTileWholeToMapTileCenterQ16",
							"MapCreateSlope",
							"MapCreate",
							"MapCreate2",
							"StartupTests",
							"MapExplorerSpawn",
							"AStarPathStepsInit",
							"CLIENT_InitClientStates",
							"game_init_single",
							"game_init_multi",
							"game_init_multi2",
							"game_init_single2",
							"UpdateMapExplorer",
							"PeepDraw",
							"ParticleDraw",
							"game_updatepre1",
							"game_update",
							"game_update2",
							"game_post_update_single",
							"game_preupdate_1",
							"game_preupdate_2",
							"size_tests_kernel"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABaAAAAQWN0aW9uVHJhY2tpbmdJbml0CkFjdGlvbldyYXBJbml0CkdTQ1MKR1NDUwpNZXNzYWdlQ2FsbGJhY2sKV2FpdFRpY2tUaW1lCm1haW4KcHJpbnQKcmFuZG9tAAAAAAAAAACOCgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\clGUI.h",
						"symkeys":
						[
							[
								278,
								302
							],
							[
								392,
								409
							],
							[
								853,
								869
							],
							[
								1020,
								1038
							],
							[
								1327,
								1347
							],
							[
								1532,
								1555
							],
							[
								1726,
								1741
							],
							[
								2663,
								2684
							],
							[
								3295,
								3311
							],
							[
								3410,
								3419
							],
							[
								4765,
								4779
							],
							[
								5412,
								5426
							],
							[
								6204,
								6215
							],
							[
								6306,
								6315
							],
							[
								6426,
								6443
							],
							[
								9381,
								9396
							],
							[
								9613,
								9639
							],
							[
								10267,
								10279
							],
							[
								10654,
								10665
							],
							[
								11035,
								11046
							],
							[
								11206,
								11214
							],
							[
								12040,
								12049
							],
							[
								12493,
								12502
							],
							[
								12788,
								12798
							],
							[
								14673,
								14698
							],
							[
								15981,
								16004
							],
							[
								17401,
								17420
							],
							[
								18856,
								18873
							],
							[
								18947,
								18963
							],
							[
								21563,
								21577
							],
							[
								21649,
								21670
							]
						],
						"symlist":
						[
							"GUI_FAKESWITCH_PARAM_INT",
							"GUI_PushContainer",
							"GUI_PopContianer",
							"GUI_GetTotalOffset",
							"GUI_GetContainerSize",
							"GUI_COMMON_WIDGET_START",
							"GUI_MERGED_CLIP",
							"gui_CommonWidgetStart",
							"GUI_MOUSE_ON_GUI",
							"GUI_RESET",
							"GUI_RESET_POST",
							"GUI_INIT_STYLE",
							"GetGuiState",
							"GrabGuiId",
							"GUI_DrawRectangle",
							"GUI_BoundsCheck",
							"GUI_InteractionBoundsCheck",
							"GUI_PushClip",
							"GUI_PopClip",
							"ascii_to_uv",
							"GUI_TEXT",
							"GUI_LABEL",
							"GUI_IMAGE",
							"GUI_BUTTON",
							"GUI_SLIDER_INT_HORIZONTAL",
							"GUI_SLIDER_INT_VERTICAL",
							"GUI_SCROLLBOX_BEGIN",
							"GUI_SCROLLBOX_END",
							"GUI_BEGIN_WINDOW",
							"GUI_END_WINDOW",
							"GUI_UpdateToggleGroup"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACOCgAAQVN0YXJBZGRUb0Nsb3NlZApBU3RhckFkZFRvT3BlbgpBU3RhckZvcm1QYXRoU3RlcHMKQVN0YXJGb3JtUGF0aFN0ZXBzX0lEQQpBU3RhckluaXRQYXRoTm9kZQpBU3Rhck5vZGUyTm9kZVRyYXZlcnNpYmxlCkFTdGFyTm9kZURpc3RhbmNlSHVyaXN0aWMKQVN0YXJOb2RlRGlzdGFuY2VIdXJpc3RpY19JREEKQVN0YXJOb2RlSW5DbG9zZWQKQVN0YXJOb2RlSW5PcGVuCkFTdGFyTm9kZUluc3RhbnRpYXRlCkFTdGFyTm9kZVZhbGlkCkFTdGFyT3BlbkhlYXBJbnNlcnQKQVN0YXJPcGVuSGVhcEtleQpBU3Rhck9wZW5IZWFwUmVtb3ZlCkFTdGFyT3BlbkhlYXBUcmlja2xlRG93bgpBU3Rhck9wZW5IZWFwVHJpY2tsZVVwCkFTdGFyUGF0aE5vZGVfR2V0TWFwRGF0YQpBU3RhclBhdGhOb2RlX0xhc3RQYXRoTm9kZQpBU3RhclBhdGhTdGVwc0luaXQKQVN0YXJQYXRoU3RlcHNOZXh0RnJlZVBhdGhOb2RlCkFTdGFyUHJpbnROb2RlU3RhdHMKQVN0YXJQcmludFBhdGgKQVN0YXJQcmludFBhdGhOb2RlU3RhdHMKQVN0YXJQcmludFNlYXJjaFBhdGhGcm9tCkFTdGFyUHJpbnRTZWFyY2hQYXRoVG8KQVN0YXJSZW1vdmVGcm9tQ2xvc2VkCkFTdGFyUmVtb3ZlRnJvbU9wZW4KQVN0YXJTZWFyY2hfQkZTX0NvbnRpbnVlCkFTdGFyU2VhcmNoX0JGU19JbnN0YW50aWF0ZQpBU3RhclNlYXJjaF9CRlNfSW5zdGFudGlhdGVQYXJyYWxsZWwKQVN0YXJTZWFyY2hfQkZTX1JvdXRpbmUKQVN0YXJTZWFyY2hfSURBX0NvbnRpbnVlCkFTdGFyU2VhcmNoX0lEQV9Jbml0Tm9kZQpBU3RhclNlYXJjaF9JREFfTG9jX0luX1BhdGgKQVN0YXJTZWFyY2hfSURBX05vZGVHcmFiTmV4dEJlc3RTdWNjZXNzb3IKQVN0YXJTZWFyY2hfSURBX05vZGVfSW5fUGF0aApBU3RhclNlYXJjaF9JREFfUm91dGluZQpBU3RhclNlYXJjaF9JREFfU2VhcmNoCkJJVEJBTktfR0VUX1NVQk5VTUJFUl9VSU5UCkJJVEJBTktfU0VUX1NVQk5VTUJFUl9VSU5UCkJhcnlDZW50cmljX0luX1RyaWFuZ2xlX1ExNgpDTElFTlRfSW5pdENsaWVudFN0YXRlcwpHRV9JTlQzX0VOVFJZX0NPVU5UCkdFX0lOVDNfU0lOR0xFX0VOVFJZCkdFX0lOVDNfV0hBQ0hBTUFDT0xJVDFfRU5UUlkKR1VJX1RPX1dPUkxEX1ExNgpHZXRNYXBUaWxlQ29vcmRGcm9tV29ybGQyRApMSU5FU19DbGVhckFsbApMSU5FU19EcmF3TGluZQpMSU5FU19EcmF3TGluZVdvcmxkCk1hY2hpbmVfQ3JlYXRlTWFjaGluZQpNYWNoaW5lX0luaXREZXNjcmlwdGlvbnMKTWFrZUNhcmRpbmFsRGlyZWN0aW9uT2Zmc2V0cwpNYXBCdWlsZFRpbGVWaWV3Ck1hcEJ1aWxkVGlsZVZpZXczQXJlYQpNYXBDcmVhdGUKTWFwQ3JlYXRlMgpNYXBDcmVhdGVTbG9wZQpNYXBEYXRhR2V0VGlsZQpNYXBEYXRhSGFzMkxvd0FkamFjZW50Q29ybmVycwpNYXBEYXRhTG93Q29ybmVyQ291bnQKTWFwRGF0YVNldFRpbGUKTWFwRGF0YVhMZXZlbApNYXBFeHBsb3JlclNwYXduCk1hcEdldERhdGFQb2ludGVyRnJvbUNvb3JkCk1hcEdldFRpbGVGcm9tQ29vcmQKTWFwSGFzMkxvd0FkamFjZW50Q29ybmVycwpNYXBIYXNMb3dDb3JuZXIKTWFwTG93Q29ybmVyQ291bnQKTWFwUmlkZ2VUeXBlCk1hcFRpbGVDb252ZXhIdWxsX0Nsb3Nlc3RQb2ludFRvUG9pbnQKTWFwVGlsZUNvbnZleEh1bGxfRnJvbV9UaWxlRGF0YQpNYXBUaWxlQ29udmV4SHVsbF9Qb2ludEluc2lkZQpNYXBUaWxlQ29vcmRDbGFtcApNYXBUaWxlQ29vcmRFbnRlcmFibGUKTWFwVGlsZUNvb3JkU3RhbmRJblZhbGlkCk1hcFRpbGVDb29yZFZhbGlkCk1hcFRpbGVEYXRhSGFzTG93Q29ybmVyCk1hcFRpbGVEYXRhX1BlZXBDb3VudApNYXBUaWxlRGF0YV9TZXRQZWVwQ291bnQKTWFwVGlsZURhdGFfVGlsZVNvbGlkCk1hcFRpbGVHZXRSb3RhdGlvbgpNYXBUaWxlVG9VVgpNYXBUaWxlV2hvbGVUb01hcFRpbGVDZW50ZXJRMTYKTWFwVGlsZVhMZXZlbApNYXBUb1dvcmxkCk1hcFVwZGF0ZVNoYWRvdwpNYXRyaXhfRmxvYXQ0X1RpbWVzX1ZlYzQKUGFydGljbGVEcmF3ClBhcnRpY2xlVXBkYXRlClBlZXBEcmF3ClBlZXBEcml2ZVBoeXNpY3MKUGVlcEdldE1hcFRpbGUKUGVlcE1hcFRpbGVDb2xsaXNpb25zClBlZXBNYXBWaXNpYmxpdHkKUGVlcFBlZXBQaHlzaWNzClBlZXBQcmVVcGRhdGUxClBlZXBQcmVVcGRhdGUyClBlZXBQcmludApQZWVwVG9QZWVwSW50ZXJhY3Rpb24KUGVlcFVwZGF0ZQpQcmludEZsb2F0MgpQcmludEZsb2F0MwpQcmludEZsb2F0NApQcmludE1vdXNlU3RhdGUKUHJpbnRTZWxlY3Rpb25QZWVwU3RhdHMKUHJpbnRfR0VfSU5UMgpQcmludF9HRV9JTlQzClByaW50X0dFX1NIT1JUMwpQcmludF9HRV9VSU5UMwpSZWdpb25Db2xsaXNpb24KU09NRV9JTlRFUk5BTF9DT1JESVNUClN0YXJ0dXBUZXN0cwpUaGlzQ2xpZW50ClRyaWFuZ2xlM0RIZWF2eV9DbG9zZXN0UG9pbnQKVHJpYW5nbGUzRE1ha2VIZWF2eQpUcmlhbmdsZTNEX01ha2UyRmFjZQpUcmlhbmdsZTNEX1RvQmFyeUNlbnRyaWMKVXBkYXRlTWFwRXhwbG9yZXIKV2Fsa0FuZEZpZ2h0CldvcmxkVG9NYXAKZ2FtZV9hcHBseV9hY3Rpb25zCmdhbWVfaW5pdF9tdWx0aQpnYW1lX2luaXRfbXVsdGkyCmdhbWVfaW5pdF9zaW5nbGUKZ2FtZV9pbml0X3NpbmdsZTIKZ2FtZV9wb3N0X3VwZGF0ZV9zaW5nbGUKZ2FtZV9wcmV1cGRhdGVfMQpnYW1lX3ByZXVwZGF0ZV8yCmdhbWVfdXBkYXRlCmdhbWVfdXBkYXRlMgpnYW1lX3VwZGF0ZXByZTEKc2l6ZV90ZXN0c19rZXJuZWwAAAAAAAAAAAgCAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\clGame.c",
						"symkeys":
						[
							[
								251,
								261
							],
							[
								357,
								370
							],
							[
								426,
								439
							],
							[
								503,
								517
							],
							[
								582,
								597
							],
							[
								663,
								674
							],
							[
								729,
								740
							],
							[
								803,
								814
							],
							[
								898,
								924
							],
							[
								1146,
								1172
							],
							[
								1604,
								1618
							],
							[
								1717,
								1731
							],
							[
								1902,
								1920
							],
							[
								2023,
								2049
							],
							[
								2182,
								2201
							],
							[
								2348,
								2360
							],
							[
								3661,
								3690
							],
							[
								4259,
								4284
							],
							[
								4514,
								4537
							],
							[
								4652,
								4673
							],
							[
								4854,
								4875
							],
							[
								4980,
								5004
							],
							[
								5183,
								5198
							],
							[
								5451,
								5472
							],
							[
								5751,
								5768
							],
							[
								6020,
								6033
							],
							[
								6306,
								6319
							],
							[
								6532,
								6556
							],
							[
								6903,
								6924
							],
							[
								8456,
								8480
							],
							[
								9310,
								9331
							],
							[
								9942,
								9962
							],
							[
								10228,
								10245
							],
							[
								10413,
								10440
							],
							[
								11220,
								11256
							],
							[
								11829,
								11846
							],
							[
								12110,
								12124
							],
							[
								12239,
								12264
							],
							[
								13427,
								13455
							],
							[
								14563,
								14579
							],
							[
								14720,
								14744
							],
							[
								16051,
								16070
							],
							[
								16361,
								16380
							],
							[
								16684,
								16700
							],
							[
								16875,
								16892
							],
							[
								17071,
								17086
							],
							[
								17261,
								17283
							],
							[
								18035,
								18054
							],
							[
								18396,
								18410
							],
							[
								18701,
								18731
							],
							[
								19187,
								19208
							],
							[
								19383,
								19408
							],
							[
								19691,
								19720
							],
							[
								19895,
								19914
							],
							[
								20110,
								20133
							],
							[
								20255,
								20277
							],
							[
								20591,
								20615
							],
							[
								20934,
								20948
							],
							[
								21284,
								21303
							],
							[
								21452,
								21472
							],
							[
								21764,
								21792
							],
							[
								22196,
								22214
							],
							[
								25595,
								25617
							],
							[
								27588,
								27612
							],
							[
								33173,
								33196
							],
							[
								34795,
								34823
							],
							[
								35069,
								35096
							],
							[
								35326,
								35350
							],
							[
								35575,
								35616
							],
							[
								36967,
								36989
							],
							[
								39578,
								39602
							],
							[
								40147,
								40170
							],
							[
								41439,
								41463
							],
							[
								41837,
								41863
							],
							[
								42281,
								42308
							],
							[
								42619,
								42640
							],
							[
								42784,
								42808
							],
							[
								43553,
								43581
							],
							[
								47508,
								47527
							],
							[
								48086,
								48106
							],
							[
								48579,
								48610
							],
							[
								51589,
								51598
							],
							[
								51670,
								51685
							],
							[
								53747,
								53768
							],
							[
								54290,
								54300
							],
							[
								54676,
								54686
							],
							[
								55023,
								55037
							],
							[
								56542,
								56557
							],
							[
								57293,
								57330
							],
							[
								58067,
								58096
							],
							[
								58818,
								58839
							],
							[
								66457,
								66473
							],
							[
								69777,
								69789
							],
							[
								71502,
								71516
							],
							[
								71578,
								71592
							],
							[
								73485,
								73501
							],
							[
								75229,
								75239
							],
							[
								79785,
								79799
							],
							[
								79956,
								79971
							],
							[
								83299,
								83315
							],
							[
								88018,
								88039
							],
							[
								88576,
								88599
							],
							[
								92047,
								92064
							],
							[
								92319,
								92345
							],
							[
								93491,
								93505
							],
							[
								94319,
								94333
							],
							[
								94502,
								94526
							],
							[
								94968,
								94987
							],
							[
								96448,
								96464
							],
							[
								96796,
								96807
							],
							[
								96994,
								97009
							],
							[
								97734,
								97752
							],
							[
								117568,
								117598
							],
							[
								117815,
								117829
							],
							[
								121554,
								121563
							],
							[
								124339,
								124349
							],
							[
								124541,
								124553
							],
							[
								126674,
								126690
							],
							[
								127173,
								127191
							],
							[
								127547,
								127570
							],
							[
								127863,
								127879
							],
							[
								129236,
								129251
							],
							[
								129436,
								129452
							],
							[
								129637,
								129654
							],
							[
								134261,
								134278
							],
							[
								134357,
								134365
							],
							[
								136757,
								136769
							],
							[
								137757,
								137772
							],
							[
								138171,
								138182
							],
							[
								139538,
								139550
							],
							[
								140748,
								140771
							],
							[
								142791,
								142807
							],
							[
								143763,
								143779
							],
							[
								146093,
								146110
							]
						],
						"symlist":
						[
							"ThisClient",
							"Print_GE_INT2",
							"Print_GE_INT3",
							"Print_GE_UINT3",
							"Print_GE_SHORT3",
							"PrintFloat2",
							"PrintFloat3",
							"PrintFloat4",
							"BITBANK_GET_SUBNUMBER_UINT",
							"BITBANK_SET_SUBNUMBER_UINT",
							"MapDataGetTile",
							"MapDataSetTile",
							"MapTileGetRotation",
							"MapGetDataPointerFromCoord",
							"MapGetTileFromCoord",
							"MapRidgeType",
							"MapDataHas2LowAdjacentCorners",
							"MapHas2LowAdjacentCorners",
							"MapTileDataHasLowCorner",
							"MapTileData_TileSolid",
							"MapTileData_PeepCount",
							"MapTileData_SetPeepCount",
							"MapHasLowCorner",
							"MapDataLowCornerCount",
							"MapLowCornerCount",
							"MapDataXLevel",
							"MapTileXLevel",
							"MapTileCoordStandInValid",
							"MapTileCoordEnterable",
							"Machine_InitDescriptions",
							"Machine_CreateMachine",
							"AStarNodeInstantiate",
							"AStarInitPathNode",
							"AStarSearch_BFS_Instantiate",
							"AStarSearch_BFS_InstantiateParrallel",
							"MapTileCoordValid",
							"AStarNodeValid",
							"AStarNode2NodeTraversible",
							"MakeCardinalDirectionOffsets",
							"AStarOpenHeapKey",
							"AStarOpenHeapTrickleDown",
							"AStarOpenHeapRemove",
							"AStarRemoveFromOpen",
							"AStarAddToClosed",
							"AStarNodeInClosed",
							"AStarNodeInOpen",
							"AStarOpenHeapTrickleUp",
							"AStarOpenHeapInsert",
							"AStarAddToOpen",
							"AStarPathStepsNextFreePathNode",
							"AStarRemoveFromClosed",
							"AStarNodeDistanceHuristic",
							"AStarNodeDistanceHuristic_IDA",
							"AStarPrintNodeStats",
							"AStarPrintPathNodeStats",
							"AStarPrintSearchPathTo",
							"AStarPrintSearchPathFrom",
							"AStarPrintPath",
							"GE_INT3_ENTRY_COUNT",
							"GE_INT3_SINGLE_ENTRY",
							"GE_INT3_WHACHAMACOLIT1_ENTRY",
							"AStarFormPathSteps",
							"AStarFormPathSteps_IDA",
							"AStarSearch_BFS_Continue",
							"AStarSearch_BFS_Routine",
							"AStarSearch_IDA_Node_In_Path",
							"AStarSearch_IDA_Loc_In_Path",
							"AStarSearch_IDA_InitNode",
							"AStarSearch_IDA_NodeGrabNextBestSuccessor",
							"AStarSearch_IDA_Search",
							"AStarSearch_IDA_Continue",
							"AStarSearch_IDA_Routine",
							"AStarPathNode_GetMapData",
							"AStarPathNode_LastPathNode",
							"BaryCentric_In_Triangle_Q16",
							"SOME_INTERNAL_CORDIST",
							"Triangle3D_ToBaryCentric",
							"Triangle3DHeavy_ClosestPoint",
							"Triangle3DMakeHeavy",
							"Triangle3D_Make2Face",
							"MapTileConvexHull_From_TileData",
							"PeepPrint",
							"PeepPeepPhysics",
							"PeepToPeepInteraction",
							"WorldToMap",
							"MapToWorld",
							"PeepGetMapTile",
							"RegionCollision",
							"MapTileConvexHull_ClosestPointToPoint",
							"MapTileConvexHull_PointInside",
							"PeepMapTileCollisions",
							"PeepDrivePhysics",
							"WalkAndFight",
							"PeepPreUpdate1",
							"PeepPreUpdate2",
							"PeepMapVisiblity",
							"PeepUpdate",
							"ParticleUpdate",
							"MapUpdateShadow",
							"MapBuildTileView",
							"MapBuildTileView3Area",
							"PrintSelectionPeepStats",
							"MapTileCoordClamp",
							"GetMapTileCoordFromWorld2D",
							"LINES_DrawLine",
							"LINES_ClearAll",
							"Matrix_Float4_Times_Vec4",
							"LINES_DrawLineWorld",
							"GUI_TO_WORLD_Q16",
							"MapTileToUV",
							"PrintMouseState",
							"game_apply_actions",
							"MapTileWholeToMapTileCenterQ16",
							"MapCreateSlope",
							"MapCreate",
							"MapCreate2",
							"StartupTests",
							"MapExplorerSpawn",
							"AStarPathStepsInit",
							"CLIENT_InitClientStates",
							"game_init_single",
							"game_init_multi",
							"game_init_multi2",
							"game_init_single2",
							"UpdateMapExplorer",
							"PeepDraw",
							"ParticleDraw",
							"game_updatepre1",
							"game_update",
							"game_update2",
							"game_post_update_single",
							"game_preupdate_1",
							"game_preupdate_2",
							"size_tests_kernel"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAIAgAAR1VJX0JFR0lOX1dJTkRPVwpHVUlfQlVUVE9OCkdVSV9Cb3VuZHNDaGVjawpHVUlfQ09NTU9OX1dJREdFVF9TVEFSVApHVUlfRHJhd1JlY3RhbmdsZQpHVUlfRU5EX1dJTkRPVwpHVUlfRkFLRVNXSVRDSF9QQVJBTV9JTlQKR1VJX0dldENvbnRhaW5lclNpemUKR1VJX0dldFRvdGFsT2Zmc2V0CkdVSV9JTUFHRQpHVUlfSU5JVF9TVFlMRQpHVUlfSW50ZXJhY3Rpb25Cb3VuZHNDaGVjawpHVUlfTEFCRUwKR1VJX01FUkdFRF9DTElQCkdVSV9NT1VTRV9PTl9HVUkKR1VJX1BvcENsaXAKR1VJX1BvcENvbnRpYW5lcgpHVUlfUHVzaENsaXAKR1VJX1B1c2hDb250YWluZXIKR1VJX1JFU0VUCkdVSV9SRVNFVF9QT1NUCkdVSV9TQ1JPTExCT1hfQkVHSU4KR1VJX1NDUk9MTEJPWF9FTkQKR1VJX1NMSURFUl9JTlRfSE9SSVpPTlRBTApHVUlfU0xJREVSX0lOVF9WRVJUSUNBTApHVUlfVEVYVApHVUlfVXBkYXRlVG9nZ2xlR3JvdXAKR2V0R3VpU3RhdGUKR3JhYkd1aUlkCmFzY2lpX3RvX3V2Cmd1aV9Db21tb25XaWRnZXRTdGFydAAAAAAAAAAAjgoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					6,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\clGame.c",
						"symkeys":
						[
							[
								251,
								261
							],
							[
								357,
								370
							],
							[
								426,
								439
							],
							[
								503,
								517
							],
							[
								582,
								597
							],
							[
								663,
								674
							],
							[
								729,
								740
							],
							[
								803,
								814
							],
							[
								898,
								924
							],
							[
								1146,
								1172
							],
							[
								1604,
								1618
							],
							[
								1717,
								1731
							],
							[
								1902,
								1920
							],
							[
								2023,
								2049
							],
							[
								2182,
								2201
							],
							[
								2348,
								2360
							],
							[
								3661,
								3690
							],
							[
								4259,
								4284
							],
							[
								4514,
								4537
							],
							[
								4652,
								4673
							],
							[
								4854,
								4875
							],
							[
								4980,
								5004
							],
							[
								5183,
								5198
							],
							[
								5451,
								5472
							],
							[
								5751,
								5768
							],
							[
								6020,
								6033
							],
							[
								6306,
								6319
							],
							[
								6532,
								6556
							],
							[
								6903,
								6924
							],
							[
								8456,
								8480
							],
							[
								9310,
								9331
							],
							[
								9942,
								9962
							],
							[
								10228,
								10245
							],
							[
								10413,
								10440
							],
							[
								11220,
								11256
							],
							[
								11829,
								11846
							],
							[
								12110,
								12124
							],
							[
								12239,
								12264
							],
							[
								13427,
								13455
							],
							[
								14563,
								14579
							],
							[
								14720,
								14744
							],
							[
								16051,
								16070
							],
							[
								16361,
								16380
							],
							[
								16684,
								16700
							],
							[
								16875,
								16892
							],
							[
								17071,
								17086
							],
							[
								17261,
								17283
							],
							[
								18035,
								18054
							],
							[
								18396,
								18410
							],
							[
								18701,
								18731
							],
							[
								19187,
								19208
							],
							[
								19383,
								19408
							],
							[
								19691,
								19720
							],
							[
								19895,
								19914
							],
							[
								20110,
								20133
							],
							[
								20255,
								20277
							],
							[
								20591,
								20615
							],
							[
								20934,
								20948
							],
							[
								21284,
								21303
							],
							[
								21452,
								21472
							],
							[
								21764,
								21792
							],
							[
								22196,
								22214
							],
							[
								25595,
								25617
							],
							[
								27588,
								27612
							],
							[
								33173,
								33196
							],
							[
								34795,
								34823
							],
							[
								35069,
								35096
							],
							[
								35326,
								35350
							],
							[
								35575,
								35616
							],
							[
								36967,
								36989
							],
							[
								39578,
								39602
							],
							[
								40147,
								40170
							],
							[
								41439,
								41463
							],
							[
								41837,
								41863
							],
							[
								42281,
								42308
							],
							[
								42619,
								42640
							],
							[
								42784,
								42808
							],
							[
								43553,
								43581
							],
							[
								47508,
								47527
							],
							[
								48086,
								48106
							],
							[
								48579,
								48610
							],
							[
								51589,
								51598
							],
							[
								51670,
								51685
							],
							[
								53747,
								53768
							],
							[
								54290,
								54300
							],
							[
								54676,
								54686
							],
							[
								55023,
								55037
							],
							[
								56542,
								56557
							],
							[
								57293,
								57330
							],
							[
								58067,
								58096
							],
							[
								58818,
								58839
							],
							[
								66457,
								66473
							],
							[
								69777,
								69789
							],
							[
								71502,
								71516
							],
							[
								71578,
								71592
							],
							[
								73485,
								73501
							],
							[
								75229,
								75239
							],
							[
								79785,
								79799
							],
							[
								79956,
								79971
							],
							[
								83299,
								83315
							],
							[
								88018,
								88039
							],
							[
								88576,
								88599
							],
							[
								92047,
								92064
							],
							[
								92319,
								92345
							],
							[
								93491,
								93505
							],
							[
								94319,
								94333
							],
							[
								94502,
								94526
							],
							[
								94968,
								94987
							],
							[
								96448,
								96464
							],
							[
								96796,
								96807
							],
							[
								96994,
								97009
							],
							[
								97734,
								97752
							],
							[
								117570,
								117600
							],
							[
								117817,
								117831
							],
							[
								121556,
								121565
							],
							[
								124341,
								124351
							],
							[
								124543,
								124555
							],
							[
								126676,
								126692
							],
							[
								127175,
								127193
							],
							[
								127549,
								127572
							],
							[
								127865,
								127881
							],
							[
								129238,
								129253
							],
							[
								129438,
								129454
							],
							[
								129639,
								129656
							],
							[
								134263,
								134280
							],
							[
								134359,
								134367
							],
							[
								136759,
								136771
							],
							[
								137759,
								137774
							],
							[
								138173,
								138184
							],
							[
								139540,
								139552
							],
							[
								140750,
								140773
							],
							[
								142793,
								142809
							],
							[
								143765,
								143781
							],
							[
								146095,
								146112
							]
						],
						"symlist":
						[
							"ThisClient",
							"Print_GE_INT2",
							"Print_GE_INT3",
							"Print_GE_UINT3",
							"Print_GE_SHORT3",
							"PrintFloat2",
							"PrintFloat3",
							"PrintFloat4",
							"BITBANK_GET_SUBNUMBER_UINT",
							"BITBANK_SET_SUBNUMBER_UINT",
							"MapDataGetTile",
							"MapDataSetTile",
							"MapTileGetRotation",
							"MapGetDataPointerFromCoord",
							"MapGetTileFromCoord",
							"MapRidgeType",
							"MapDataHas2LowAdjacentCorners",
							"MapHas2LowAdjacentCorners",
							"MapTileDataHasLowCorner",
							"MapTileData_TileSolid",
							"MapTileData_PeepCount",
							"MapTileData_SetPeepCount",
							"MapHasLowCorner",
							"MapDataLowCornerCount",
							"MapLowCornerCount",
							"MapDataXLevel",
							"MapTileXLevel",
							"MapTileCoordStandInValid",
							"MapTileCoordEnterable",
							"Machine_InitDescriptions",
							"Machine_CreateMachine",
							"AStarNodeInstantiate",
							"AStarInitPathNode",
							"AStarSearch_BFS_Instantiate",
							"AStarSearch_BFS_InstantiateParrallel",
							"MapTileCoordValid",
							"AStarNodeValid",
							"AStarNode2NodeTraversible",
							"MakeCardinalDirectionOffsets",
							"AStarOpenHeapKey",
							"AStarOpenHeapTrickleDown",
							"AStarOpenHeapRemove",
							"AStarRemoveFromOpen",
							"AStarAddToClosed",
							"AStarNodeInClosed",
							"AStarNodeInOpen",
							"AStarOpenHeapTrickleUp",
							"AStarOpenHeapInsert",
							"AStarAddToOpen",
							"AStarPathStepsNextFreePathNode",
							"AStarRemoveFromClosed",
							"AStarNodeDistanceHuristic",
							"AStarNodeDistanceHuristic_IDA",
							"AStarPrintNodeStats",
							"AStarPrintPathNodeStats",
							"AStarPrintSearchPathTo",
							"AStarPrintSearchPathFrom",
							"AStarPrintPath",
							"GE_INT3_ENTRY_COUNT",
							"GE_INT3_SINGLE_ENTRY",
							"GE_INT3_WHACHAMACOLIT1_ENTRY",
							"AStarFormPathSteps",
							"AStarFormPathSteps_IDA",
							"AStarSearch_BFS_Continue",
							"AStarSearch_BFS_Routine",
							"AStarSearch_IDA_Node_In_Path",
							"AStarSearch_IDA_Loc_In_Path",
							"AStarSearch_IDA_InitNode",
							"AStarSearch_IDA_NodeGrabNextBestSuccessor",
							"AStarSearch_IDA_Search",
							"AStarSearch_IDA_Continue",
							"AStarSearch_IDA_Routine",
							"AStarPathNode_GetMapData",
							"AStarPathNode_LastPathNode",
							"BaryCentric_In_Triangle_Q16",
							"SOME_INTERNAL_CORDIST",
							"Triangle3D_ToBaryCentric",
							"Triangle3DHeavy_ClosestPoint",
							"Triangle3DMakeHeavy",
							"Triangle3D_Make2Face",
							"MapTileConvexHull_From_TileData",
							"PeepPrint",
							"PeepPeepPhysics",
							"PeepToPeepInteraction",
							"WorldToMap",
							"MapToWorld",
							"PeepGetMapTile",
							"RegionCollision",
							"MapTileConvexHull_ClosestPointToPoint",
							"MapTileConvexHull_PointInside",
							"PeepMapTileCollisions",
							"PeepDrivePhysics",
							"WalkAndFight",
							"PeepPreUpdate1",
							"PeepPreUpdate2",
							"PeepMapVisiblity",
							"PeepUpdate",
							"ParticleUpdate",
							"MapUpdateShadow",
							"MapBuildTileView",
							"MapBuildTileView3Area",
							"PrintSelectionPeepStats",
							"MapTileCoordClamp",
							"GetMapTileCoordFromWorld2D",
							"LINES_DrawLine",
							"LINES_ClearAll",
							"Matrix_Float4_Times_Vec4",
							"LINES_DrawLineWorld",
							"GUI_TO_WORLD_Q16",
							"MapTileToUV",
							"PrintMouseState",
							"game_apply_actions",
							"MapTileWholeToMapTileCenterQ16",
							"MapCreateSlope",
							"MapCreate",
							"MapCreate2",
							"StartupTests",
							"MapExplorerSpawn",
							"AStarPathStepsInit",
							"CLIENT_InitClientStates",
							"game_init_single",
							"game_init_multi",
							"game_init_multi2",
							"game_init_single2",
							"UpdateMapExplorer",
							"PeepDraw",
							"ParticleDraw",
							"game_updatepre1",
							"game_update",
							"game_update2",
							"game_post_update_single",
							"game_preupdate_1",
							"game_preupdate_2",
							"size_tests_kernel"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACOCgAAQVN0YXJBZGRUb0Nsb3NlZApBU3RhckFkZFRvT3BlbgpBU3RhckZvcm1QYXRoU3RlcHMKQVN0YXJGb3JtUGF0aFN0ZXBzX0lEQQpBU3RhckluaXRQYXRoTm9kZQpBU3Rhck5vZGUyTm9kZVRyYXZlcnNpYmxlCkFTdGFyTm9kZURpc3RhbmNlSHVyaXN0aWMKQVN0YXJOb2RlRGlzdGFuY2VIdXJpc3RpY19JREEKQVN0YXJOb2RlSW5DbG9zZWQKQVN0YXJOb2RlSW5PcGVuCkFTdGFyTm9kZUluc3RhbnRpYXRlCkFTdGFyTm9kZVZhbGlkCkFTdGFyT3BlbkhlYXBJbnNlcnQKQVN0YXJPcGVuSGVhcEtleQpBU3Rhck9wZW5IZWFwUmVtb3ZlCkFTdGFyT3BlbkhlYXBUcmlja2xlRG93bgpBU3Rhck9wZW5IZWFwVHJpY2tsZVVwCkFTdGFyUGF0aE5vZGVfR2V0TWFwRGF0YQpBU3RhclBhdGhOb2RlX0xhc3RQYXRoTm9kZQpBU3RhclBhdGhTdGVwc0luaXQKQVN0YXJQYXRoU3RlcHNOZXh0RnJlZVBhdGhOb2RlCkFTdGFyUHJpbnROb2RlU3RhdHMKQVN0YXJQcmludFBhdGgKQVN0YXJQcmludFBhdGhOb2RlU3RhdHMKQVN0YXJQcmludFNlYXJjaFBhdGhGcm9tCkFTdGFyUHJpbnRTZWFyY2hQYXRoVG8KQVN0YXJSZW1vdmVGcm9tQ2xvc2VkCkFTdGFyUmVtb3ZlRnJvbU9wZW4KQVN0YXJTZWFyY2hfQkZTX0NvbnRpbnVlCkFTdGFyU2VhcmNoX0JGU19JbnN0YW50aWF0ZQpBU3RhclNlYXJjaF9CRlNfSW5zdGFudGlhdGVQYXJyYWxsZWwKQVN0YXJTZWFyY2hfQkZTX1JvdXRpbmUKQVN0YXJTZWFyY2hfSURBX0NvbnRpbnVlCkFTdGFyU2VhcmNoX0lEQV9Jbml0Tm9kZQpBU3RhclNlYXJjaF9JREFfTG9jX0luX1BhdGgKQVN0YXJTZWFyY2hfSURBX05vZGVHcmFiTmV4dEJlc3RTdWNjZXNzb3IKQVN0YXJTZWFyY2hfSURBX05vZGVfSW5fUGF0aApBU3RhclNlYXJjaF9JREFfUm91dGluZQpBU3RhclNlYXJjaF9JREFfU2VhcmNoCkJJVEJBTktfR0VUX1NVQk5VTUJFUl9VSU5UCkJJVEJBTktfU0VUX1NVQk5VTUJFUl9VSU5UCkJhcnlDZW50cmljX0luX1RyaWFuZ2xlX1ExNgpDTElFTlRfSW5pdENsaWVudFN0YXRlcwpHRV9JTlQzX0VOVFJZX0NPVU5UCkdFX0lOVDNfU0lOR0xFX0VOVFJZCkdFX0lOVDNfV0hBQ0hBTUFDT0xJVDFfRU5UUlkKR1VJX1RPX1dPUkxEX1ExNgpHZXRNYXBUaWxlQ29vcmRGcm9tV29ybGQyRApMSU5FU19DbGVhckFsbApMSU5FU19EcmF3TGluZQpMSU5FU19EcmF3TGluZVdvcmxkCk1hY2hpbmVfQ3JlYXRlTWFjaGluZQpNYWNoaW5lX0luaXREZXNjcmlwdGlvbnMKTWFrZUNhcmRpbmFsRGlyZWN0aW9uT2Zmc2V0cwpNYXBCdWlsZFRpbGVWaWV3Ck1hcEJ1aWxkVGlsZVZpZXczQXJlYQpNYXBDcmVhdGUKTWFwQ3JlYXRlMgpNYXBDcmVhdGVTbG9wZQpNYXBEYXRhR2V0VGlsZQpNYXBEYXRhSGFzMkxvd0FkamFjZW50Q29ybmVycwpNYXBEYXRhTG93Q29ybmVyQ291bnQKTWFwRGF0YVNldFRpbGUKTWFwRGF0YVhMZXZlbApNYXBFeHBsb3JlclNwYXduCk1hcEdldERhdGFQb2ludGVyRnJvbUNvb3JkCk1hcEdldFRpbGVGcm9tQ29vcmQKTWFwSGFzMkxvd0FkamFjZW50Q29ybmVycwpNYXBIYXNMb3dDb3JuZXIKTWFwTG93Q29ybmVyQ291bnQKTWFwUmlkZ2VUeXBlCk1hcFRpbGVDb252ZXhIdWxsX0Nsb3Nlc3RQb2ludFRvUG9pbnQKTWFwVGlsZUNvbnZleEh1bGxfRnJvbV9UaWxlRGF0YQpNYXBUaWxlQ29udmV4SHVsbF9Qb2ludEluc2lkZQpNYXBUaWxlQ29vcmRDbGFtcApNYXBUaWxlQ29vcmRFbnRlcmFibGUKTWFwVGlsZUNvb3JkU3RhbmRJblZhbGlkCk1hcFRpbGVDb29yZFZhbGlkCk1hcFRpbGVEYXRhSGFzTG93Q29ybmVyCk1hcFRpbGVEYXRhX1BlZXBDb3VudApNYXBUaWxlRGF0YV9TZXRQZWVwQ291bnQKTWFwVGlsZURhdGFfVGlsZVNvbGlkCk1hcFRpbGVHZXRSb3RhdGlvbgpNYXBUaWxlVG9VVgpNYXBUaWxlV2hvbGVUb01hcFRpbGVDZW50ZXJRMTYKTWFwVGlsZVhMZXZlbApNYXBUb1dvcmxkCk1hcFVwZGF0ZVNoYWRvdwpNYXRyaXhfRmxvYXQ0X1RpbWVzX1ZlYzQKUGFydGljbGVEcmF3ClBhcnRpY2xlVXBkYXRlClBlZXBEcmF3ClBlZXBEcml2ZVBoeXNpY3MKUGVlcEdldE1hcFRpbGUKUGVlcE1hcFRpbGVDb2xsaXNpb25zClBlZXBNYXBWaXNpYmxpdHkKUGVlcFBlZXBQaHlzaWNzClBlZXBQcmVVcGRhdGUxClBlZXBQcmVVcGRhdGUyClBlZXBQcmludApQZWVwVG9QZWVwSW50ZXJhY3Rpb24KUGVlcFVwZGF0ZQpQcmludEZsb2F0MgpQcmludEZsb2F0MwpQcmludEZsb2F0NApQcmludE1vdXNlU3RhdGUKUHJpbnRTZWxlY3Rpb25QZWVwU3RhdHMKUHJpbnRfR0VfSU5UMgpQcmludF9HRV9JTlQzClByaW50X0dFX1NIT1JUMwpQcmludF9HRV9VSU5UMwpSZWdpb25Db2xsaXNpb24KU09NRV9JTlRFUk5BTF9DT1JESVNUClN0YXJ0dXBUZXN0cwpUaGlzQ2xpZW50ClRyaWFuZ2xlM0RIZWF2eV9DbG9zZXN0UG9pbnQKVHJpYW5nbGUzRE1ha2VIZWF2eQpUcmlhbmdsZTNEX01ha2UyRmFjZQpUcmlhbmdsZTNEX1RvQmFyeUNlbnRyaWMKVXBkYXRlTWFwRXhwbG9yZXIKV2Fsa0FuZEZpZ2h0CldvcmxkVG9NYXAKZ2FtZV9hcHBseV9hY3Rpb25zCmdhbWVfaW5pdF9tdWx0aQpnYW1lX2luaXRfbXVsdGkyCmdhbWVfaW5pdF9zaW5nbGUKZ2FtZV9pbml0X3NpbmdsZTIKZ2FtZV9wb3N0X3VwZGF0ZV9zaW5nbGUKZ2FtZV9wcmV1cGRhdGVfMQpnYW1lX3ByZXVwZGF0ZV8yCmdhbWVfdXBkYXRlCmdhbWVfdXBkYXRlMgpnYW1lX3VwZGF0ZXByZTEKc2l6ZV90ZXN0c19rZXJuZWwAAAAAAAAAAI4KAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMoJAAAAAAAAygkAAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\peep.h",
						"symkeys":
						[
							[
								512,
								532
							],
							[
								714,
								738
							],
							[
								945,
								958
							],
							[
								1065,
								1080
							],
							[
								1140,
								1153
							],
							[
								1268,
								1284
							],
							[
								1459,
								1475
							],
							[
								1694,
								1718
							],
							[
								2139,
								2145
							],
							[
								2203,
								2211
							],
							[
								2270,
								2276
							],
							[
								2332,
								2341
							],
							[
								2442,
								2460
							],
							[
								2566,
								2581
							],
							[
								2733,
								2748
							],
							[
								2761,
								2772
							],
							[
								2888,
								2899
							],
							[
								2995,
								3011
							],
							[
								3057,
								3073
							],
							[
								3084,
								3102
							],
							[
								3131,
								3149
							],
							[
								3164,
								3177
							],
							[
								3254,
								3267
							],
							[
								3277,
								3289
							],
							[
								3474,
								3486
							],
							[
								3498,
								3509
							],
							[
								3698,
								3709
							],
							[
								3720,
								3737
							],
							[
								3834,
								3851
							],
							[
								3863,
								3867
							],
							[
								4322,
								4326
							],
							[
								4338,
								4346
							],
							[
								4387,
								4395
							],
							[
								4406,
								4416
							],
							[
								4452,
								4462
							],
							[
								4472,
								4487
							],
							[
								4589,
								4604
							],
							[
								4615,
								4625
							],
							[
								4669,
								4679
							],
							[
								4691,
								4707
							],
							[
								4740,
								4756
							],
							[
								4765,
								4777
							],
							[
								5155,
								5167
							],
							[
								5178,
								5185
							],
							[
								5822,
								5829
							],
							[
								5840,
								5848
							],
							[
								6081,
								6089
							],
							[
								6099,
								6102
							],
							[
								6182,
								6185
							],
							[
								6229,
								6238
							],
							[
								6378,
								6387
							],
							[
								6398,
								6407
							],
							[
								6510,
								6519
							],
							[
								6527,
								6551
							],
							[
								6705,
								6729
							],
							[
								6792,
								6807
							],
							[
								7136,
								7151
							],
							[
								7161,
								7174
							],
							[
								7250,
								7263
							],
							[
								7322,
								7337
							],
							[
								7535,
								7550
							],
							[
								7562,
								7574
							],
							[
								7627,
								7639
							],
							[
								7690,
								7707
							],
							[
								7788,
								7805
							],
							[
								7904,
								7918
							],
							[
								8059,
								8073
							],
							[
								8083,
								8100
							],
							[
								8145,
								8162
							],
							[
								8185,
								8194
							],
							[
								8311,
								8320
							],
							[
								8329,
								8341
							],
							[
								8426,
								8438
							],
							[
								8448,
								8457
							],
							[
								8503,
								8512
							],
							[
								8522,
								8533
							],
							[
								8730,
								8741
							],
							[
								8781,
								8788
							],
							[
								8943,
								8950
							],
							[
								8958,
								8970
							],
							[
								9083,
								9095
							],
							[
								9105,
								9110
							],
							[
								9167,
								9172
							],
							[
								9195,
								9206
							],
							[
								9279,
								9290
							],
							[
								9302,
								9325
							],
							[
								9684,
								9707
							],
							[
								9721,
								9730
							],
							[
								10252,
								10261
							],
							[
								10272,
								10282
							],
							[
								10328,
								10338
							]
						],
						"symlist":
						[
							"CL_CHECKED_ARRAY_SET",
							"CL_CHECKED_ARRAY_GET_PTR",
							"CL_CHECK_NULL",
							"CL_THROW_ASSERT",
							"OFFSET_TO_PTR",
							"OFFSET_TO_PTR_2D",
							"OFFSET_TO_PTR_3D",
							"CHECKED_OFFSET_TO_PTR_3D",
							"BITSET",
							"BITCLEAR",
							"BITGET",
							"BITGET_MF",
							"PeepState_BitFlags",
							"PeepState_Basic",
							"PeepState_Basic",
							"BasePhysics",
							"BasePhysics",
							"LinearConstraint",
							"LinearConstraint",
							"PhysicsCircleShape",
							"PhysicsCircleShape",
							"AStarPathNode",
							"AStarPathNode",
							"DrivePhysics",
							"DrivePhysics",
							"PeepPhysics",
							"PeepPhysics",
							"PeepCommunication",
							"PeepCommunication",
							"Peep",
							"Peep",
							"Particle",
							"Particle",
							"Triangle3D",
							"Triangle3D",
							"Triangle3DHeavy",
							"Triangle3DHeavy",
							"ConvexHull",
							"ConvexHull",
							"MapExplorerAgent",
							"MapExplorerAgent",
							"MapTileFlags",
							"MapTileFlags",
							"MapTile",
							"MapTile",
							"MapLevel",
							"MapLevel",
							"Map",
							"Map",
							"MapSector",
							"MapSector",
							"AStarNode",
							"AStarNode",
							"AStarPathFindingProgress",
							"AStarPathFindingProgress",
							"AStarSearch_BFS",
							"AStarSearch_BFS",
							"AStarNode_IDA",
							"AStarNode_IDA",
							"AStarSearch_IDA",
							"AStarSearch_IDA",
							"AStarPathJob",
							"AStarPathJob",
							"AStarJobScheduler",
							"AStarJobScheduler",
							"AStarPathSteps",
							"AStarPathSteps",
							"PeepRenderSupport",
							"PeepRenderSupport",
							"ItemTypes",
							"ItemTypes",
							"MachineTypes",
							"MachineTypes",
							"Inventory",
							"Inventory",
							"MachineDesc",
							"MachineDesc",
							"Machine",
							"Machine",
							"OrderActions",
							"OrderActions",
							"Order",
							"Order",
							"EditorTools",
							"EditorTools",
							"SynchronizedClientState",
							"SynchronizedClientState",
							"GameState",
							"GameState",
							"StaticData",
							"StaticData"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACOCgAAQVN0YXJBZGRUb0Nsb3NlZApBU3RhckFkZFRvT3BlbgpBU3RhckZvcm1QYXRoU3RlcHMKQVN0YXJGb3JtUGF0aFN0ZXBzX0lEQQpBU3RhckluaXRQYXRoTm9kZQpBU3Rhck5vZGUyTm9kZVRyYXZlcnNpYmxlCkFTdGFyTm9kZURpc3RhbmNlSHVyaXN0aWMKQVN0YXJOb2RlRGlzdGFuY2VIdXJpc3RpY19JREEKQVN0YXJOb2RlSW5DbG9zZWQKQVN0YXJOb2RlSW5PcGVuCkFTdGFyTm9kZUluc3RhbnRpYXRlCkFTdGFyTm9kZVZhbGlkCkFTdGFyT3BlbkhlYXBJbnNlcnQKQVN0YXJPcGVuSGVhcEtleQpBU3Rhck9wZW5IZWFwUmVtb3ZlCkFTdGFyT3BlbkhlYXBUcmlja2xlRG93bgpBU3Rhck9wZW5IZWFwVHJpY2tsZVVwCkFTdGFyUGF0aE5vZGVfR2V0TWFwRGF0YQpBU3RhclBhdGhOb2RlX0xhc3RQYXRoTm9kZQpBU3RhclBhdGhTdGVwc0luaXQKQVN0YXJQYXRoU3RlcHNOZXh0RnJlZVBhdGhOb2RlCkFTdGFyUHJpbnROb2RlU3RhdHMKQVN0YXJQcmludFBhdGgKQVN0YXJQcmludFBhdGhOb2RlU3RhdHMKQVN0YXJQcmludFNlYXJjaFBhdGhGcm9tCkFTdGFyUHJpbnRTZWFyY2hQYXRoVG8KQVN0YXJSZW1vdmVGcm9tQ2xvc2VkCkFTdGFyUmVtb3ZlRnJvbU9wZW4KQVN0YXJTZWFyY2hfQkZTX0NvbnRpbnVlCkFTdGFyU2VhcmNoX0JGU19JbnN0YW50aWF0ZQpBU3RhclNlYXJjaF9CRlNfSW5zdGFudGlhdGVQYXJyYWxsZWwKQVN0YXJTZWFyY2hfQkZTX1JvdXRpbmUKQVN0YXJTZWFyY2hfSURBX0NvbnRpbnVlCkFTdGFyU2VhcmNoX0lEQV9Jbml0Tm9kZQpBU3RhclNlYXJjaF9JREFfTG9jX0luX1BhdGgKQVN0YXJTZWFyY2hfSURBX05vZGVHcmFiTmV4dEJlc3RTdWNjZXNzb3IKQVN0YXJTZWFyY2hfSURBX05vZGVfSW5fUGF0aApBU3RhclNlYXJjaF9JREFfUm91dGluZQpBU3RhclNlYXJjaF9JREFfU2VhcmNoCkJJVEJBTktfR0VUX1NVQk5VTUJFUl9VSU5UCkJJVEJBTktfU0VUX1NVQk5VTUJFUl9VSU5UCkJhcnlDZW50cmljX0luX1RyaWFuZ2xlX1ExNgpDTElFTlRfSW5pdENsaWVudFN0YXRlcwpHRV9JTlQzX0VOVFJZX0NPVU5UCkdFX0lOVDNfU0lOR0xFX0VOVFJZCkdFX0lOVDNfV0hBQ0hBTUFDT0xJVDFfRU5UUlkKR1VJX1RPX1dPUkxEX1ExNgpHZXRNYXBUaWxlQ29vcmRGcm9tV29ybGQyRApMSU5FU19DbGVhckFsbApMSU5FU19EcmF3TGluZQpMSU5FU19EcmF3TGluZVdvcmxkCk1hY2hpbmVfQ3JlYXRlTWFjaGluZQpNYWNoaW5lX0luaXREZXNjcmlwdGlvbnMKTWFrZUNhcmRpbmFsRGlyZWN0aW9uT2Zmc2V0cwpNYXBCdWlsZFRpbGVWaWV3Ck1hcEJ1aWxkVGlsZVZpZXczQXJlYQpNYXBDcmVhdGUKTWFwQ3JlYXRlMgpNYXBDcmVhdGVTbG9wZQpNYXBEYXRhR2V0VGlsZQpNYXBEYXRhSGFzMkxvd0FkamFjZW50Q29ybmVycwpNYXBEYXRhTG93Q29ybmVyQ291bnQKTWFwRGF0YVNldFRpbGUKTWFwRGF0YVhMZXZlbApNYXBFeHBsb3JlclNwYXduCk1hcEdldERhdGFQb2ludGVyRnJvbUNvb3JkCk1hcEdldFRpbGVGcm9tQ29vcmQKTWFwSGFzMkxvd0FkamFjZW50Q29ybmVycwpNYXBIYXNMb3dDb3JuZXIKTWFwTG93Q29ybmVyQ291bnQKTWFwUmlkZ2VUeXBlCk1hcFRpbGVDb252ZXhIdWxsX0Nsb3Nlc3RQb2ludFRvUG9pbnQKTWFwVGlsZUNvbnZleEh1bGxfRnJvbV9UaWxlRGF0YQpNYXBUaWxlQ29udmV4SHVsbF9Qb2ludEluc2lkZQpNYXBUaWxlQ29vcmRDbGFtcApNYXBUaWxlQ29vcmRFbnRlcmFibGUKTWFwVGlsZUNvb3JkU3RhbmRJblZhbGlkCk1hcFRpbGVDb29yZFZhbGlkCk1hcFRpbGVEYXRhSGFzTG93Q29ybmVyCk1hcFRpbGVEYXRhX1BlZXBDb3VudApNYXBUaWxlRGF0YV9TZXRQZWVwQ291bnQKTWFwVGlsZURhdGFfVGlsZVNvbGlkCk1hcFRpbGVHZXRSb3RhdGlvbgpNYXBUaWxlVG9VVgpNYXBUaWxlV2hvbGVUb01hcFRpbGVDZW50ZXJRMTYKTWFwVGlsZVhMZXZlbApNYXBUb1dvcmxkCk1hcFVwZGF0ZVNoYWRvdwpNYXRyaXhfRmxvYXQ0X1RpbWVzX1ZlYzQKUGFydGljbGVEcmF3ClBhcnRpY2xlVXBkYXRlClBlZXBEcmF3ClBlZXBEcml2ZVBoeXNpY3MKUGVlcEdldE1hcFRpbGUKUGVlcE1hcFRpbGVDb2xsaXNpb25zClBlZXBNYXBWaXNpYmxpdHkKUGVlcFBlZXBQaHlzaWNzClBlZXBQcmVVcGRhdGUxClBlZXBQcmVVcGRhdGUyClBlZXBQcmludApQZWVwVG9QZWVwSW50ZXJhY3Rpb24KUGVlcFVwZGF0ZQpQcmludEZsb2F0MgpQcmludEZsb2F0MwpQcmludEZsb2F0NApQcmludE1vdXNlU3RhdGUKUHJpbnRTZWxlY3Rpb25QZWVwU3RhdHMKUHJpbnRfR0VfSU5UMgpQcmludF9HRV9JTlQzClByaW50X0dFX1NIT1JUMwpQcmludF9HRV9VSU5UMwpSZWdpb25Db2xsaXNpb24KU09NRV9JTlRFUk5BTF9DT1JESVNUClN0YXJ0dXBUZXN0cwpUaGlzQ2xpZW50ClRyaWFuZ2xlM0RIZWF2eV9DbG9zZXN0UG9pbnQKVHJpYW5nbGUzRE1ha2VIZWF2eQpUcmlhbmdsZTNEX01ha2UyRmFjZQpUcmlhbmdsZTNEX1RvQmFyeUNlbnRyaWMKVXBkYXRlTWFwRXhwbG9yZXIKV2Fsa0FuZEZpZ2h0CldvcmxkVG9NYXAKZ2FtZV9hcHBseV9hY3Rpb25zCmdhbWVfaW5pdF9tdWx0aQpnYW1lX2luaXRfbXVsdGkyCmdhbWVfaW5pdF9zaW5nbGUKZ2FtZV9pbml0X3NpbmdsZTIKZ2FtZV9wb3N0X3VwZGF0ZV9zaW5nbGUKZ2FtZV9wcmV1cGRhdGVfMQpnYW1lX3ByZXVwZGF0ZV8yCmdhbWVfdXBkYXRlCmdhbWVfdXBkYXRlMgpnYW1lX3VwZGF0ZXByZTEKc2l6ZV90ZXN0c19rZXJuZWwAAAAAAAAAAMAEAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPwIAAAAAAAACwkAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\PeepFuncs.h",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADABAAAQVN0YXJKb2JTY2hlZHVsZXIKQVN0YXJKb2JTY2hlZHVsZXIKQVN0YXJOb2RlCkFTdGFyTm9kZQpBU3Rhck5vZGVfSURBCkFTdGFyTm9kZV9JREEKQVN0YXJQYXRoRmluZGluZ1Byb2dyZXNzCkFTdGFyUGF0aEZpbmRpbmdQcm9ncmVzcwpBU3RhclBhdGhKb2IKQVN0YXJQYXRoSm9iCkFTdGFyUGF0aE5vZGUKQVN0YXJQYXRoTm9kZQpBU3RhclBhdGhTdGVwcwpBU3RhclBhdGhTdGVwcwpBU3RhclNlYXJjaF9CRlMKQVN0YXJTZWFyY2hfQkZTCkFTdGFyU2VhcmNoX0lEQQpBU3RhclNlYXJjaF9JREEKQklUQ0xFQVIKQklUR0VUCkJJVEdFVF9NRgpCSVRTRVQKQmFzZVBoeXNpY3MKQmFzZVBoeXNpY3MKQ0hFQ0tFRF9PRkZTRVRfVE9fUFRSXzNECkNMX0NIRUNLRURfQVJSQVlfR0VUX1BUUgpDTF9DSEVDS0VEX0FSUkFZX1NFVApDTF9DSEVDS19OVUxMCkNMX1RIUk9XX0FTU0VSVApDb252ZXhIdWxsCkNvbnZleEh1bGwKRHJpdmVQaHlzaWNzCkRyaXZlUGh5c2ljcwpFZGl0b3JUb29scwpFZGl0b3JUb29scwpHYW1lU3RhdGUKR2FtZVN0YXRlCkludmVudG9yeQpJbnZlbnRvcnkKSXRlbVR5cGVzCkl0ZW1UeXBlcwpMaW5lYXJDb25zdHJhaW50CkxpbmVhckNvbnN0cmFpbnQKTWFjaGluZQpNYWNoaW5lCk1hY2hpbmVEZXNjCk1hY2hpbmVEZXNjCk1hY2hpbmVUeXBlcwpNYWNoaW5lVHlwZXMKTWFwCk1hcApNYXBFeHBsb3JlckFnZW50Ck1hcEV4cGxvcmVyQWdlbnQKTWFwTGV2ZWwKTWFwTGV2ZWwKTWFwU2VjdG9yCk1hcFNlY3RvcgpNYXBUaWxlCk1hcFRpbGUKTWFwVGlsZUZsYWdzCk1hcFRpbGVGbGFncwpPRkZTRVRfVE9fUFRSCk9GRlNFVF9UT19QVFJfMkQKT0ZGU0VUX1RPX1BUUl8zRApPcmRlcgpPcmRlcgpPcmRlckFjdGlvbnMKT3JkZXJBY3Rpb25zClBhcnRpY2xlClBhcnRpY2xlClBlZXAKUGVlcApQZWVwQ29tbXVuaWNhdGlvbgpQZWVwQ29tbXVuaWNhdGlvbgpQZWVwUGh5c2ljcwpQZWVwUGh5c2ljcwpQZWVwUmVuZGVyU3VwcG9ydApQZWVwUmVuZGVyU3VwcG9ydApQZWVwU3RhdGVfQmFzaWMKUGVlcFN0YXRlX0Jhc2ljClBlZXBTdGF0ZV9CaXRGbGFncwpQaHlzaWNzQ2lyY2xlU2hhcGUKUGh5c2ljc0NpcmNsZVNoYXBlClN0YXRpY0RhdGEKU3RhdGljRGF0YQpTeW5jaHJvbml6ZWRDbGllbnRTdGF0ZQpTeW5jaHJvbml6ZWRDbGllbnRTdGF0ZQpUcmlhbmdsZTNEClRyaWFuZ2xlM0QKVHJpYW5nbGUzREhlYXZ5ClRyaWFuZ2xlM0RIZWF2eQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					9,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\guiState.h",
						"symkeys":
						[
							[
								36,
								44
							],
							[
								200,
								208
							],
							[
								217,
								230
							]
						],
						"symlist":
						[
							"GuiState",
							"GuiState",
							"GuiState_Init"
						]
					},
					"AQAAAAAAAAAAAAAAHwAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					10,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\PeepFuncs.h",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAfAAAAR3VpU3RhdGUKR3VpU3RhdGUKR3VpU3RhdGVfSW5pdAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					11,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\peep.h",
						"symkeys":
						[
							[
								512,
								532
							],
							[
								714,
								738
							],
							[
								945,
								958
							],
							[
								1065,
								1080
							],
							[
								1140,
								1153
							],
							[
								1268,
								1284
							],
							[
								1459,
								1475
							],
							[
								1694,
								1718
							],
							[
								2139,
								2145
							],
							[
								2203,
								2211
							],
							[
								2270,
								2276
							],
							[
								2332,
								2341
							],
							[
								2442,
								2460
							],
							[
								2566,
								2581
							],
							[
								2733,
								2748
							],
							[
								2761,
								2772
							],
							[
								2888,
								2899
							],
							[
								2995,
								3011
							],
							[
								3057,
								3073
							],
							[
								3084,
								3102
							],
							[
								3131,
								3149
							],
							[
								3164,
								3177
							],
							[
								3254,
								3267
							],
							[
								3277,
								3289
							],
							[
								3474,
								3486
							],
							[
								3498,
								3509
							],
							[
								3698,
								3709
							],
							[
								3720,
								3737
							],
							[
								3834,
								3851
							],
							[
								3863,
								3867
							],
							[
								4322,
								4326
							],
							[
								4338,
								4346
							],
							[
								4387,
								4395
							],
							[
								4406,
								4416
							],
							[
								4452,
								4462
							],
							[
								4472,
								4487
							],
							[
								4589,
								4604
							],
							[
								4615,
								4625
							],
							[
								4669,
								4679
							],
							[
								4691,
								4707
							],
							[
								4740,
								4756
							],
							[
								4765,
								4777
							],
							[
								5155,
								5167
							],
							[
								5178,
								5185
							],
							[
								5822,
								5829
							],
							[
								5840,
								5848
							],
							[
								6081,
								6089
							],
							[
								6099,
								6102
							],
							[
								6182,
								6185
							],
							[
								6229,
								6238
							],
							[
								6378,
								6387
							],
							[
								6398,
								6407
							],
							[
								6510,
								6519
							],
							[
								6527,
								6551
							],
							[
								6705,
								6729
							],
							[
								6792,
								6807
							],
							[
								7136,
								7151
							],
							[
								7161,
								7174
							],
							[
								7250,
								7263
							],
							[
								7322,
								7337
							],
							[
								7535,
								7550
							],
							[
								7562,
								7574
							],
							[
								7627,
								7639
							],
							[
								7690,
								7707
							],
							[
								7788,
								7805
							],
							[
								7904,
								7918
							],
							[
								8059,
								8073
							],
							[
								8083,
								8100
							],
							[
								8145,
								8162
							],
							[
								8185,
								8194
							],
							[
								8311,
								8320
							],
							[
								8329,
								8341
							],
							[
								8426,
								8438
							],
							[
								8448,
								8457
							],
							[
								8503,
								8512
							],
							[
								8522,
								8533
							],
							[
								8730,
								8741
							],
							[
								8781,
								8788
							],
							[
								8943,
								8950
							],
							[
								8958,
								8970
							],
							[
								9083,
								9095
							],
							[
								9105,
								9110
							],
							[
								9167,
								9172
							],
							[
								9195,
								9206
							],
							[
								9279,
								9290
							],
							[
								9302,
								9325
							],
							[
								9684,
								9707
							],
							[
								9721,
								9730
							],
							[
								10252,
								10261
							],
							[
								10272,
								10282
							],
							[
								10328,
								10338
							]
						],
						"symlist":
						[
							"CL_CHECKED_ARRAY_SET",
							"CL_CHECKED_ARRAY_GET_PTR",
							"CL_CHECK_NULL",
							"CL_THROW_ASSERT",
							"OFFSET_TO_PTR",
							"OFFSET_TO_PTR_2D",
							"OFFSET_TO_PTR_3D",
							"CHECKED_OFFSET_TO_PTR_3D",
							"BITSET",
							"BITCLEAR",
							"BITGET",
							"BITGET_MF",
							"PeepState_BitFlags",
							"PeepState_Basic",
							"PeepState_Basic",
							"BasePhysics",
							"BasePhysics",
							"LinearConstraint",
							"LinearConstraint",
							"PhysicsCircleShape",
							"PhysicsCircleShape",
							"AStarPathNode",
							"AStarPathNode",
							"DrivePhysics",
							"DrivePhysics",
							"PeepPhysics",
							"PeepPhysics",
							"PeepCommunication",
							"PeepCommunication",
							"Peep",
							"Peep",
							"Particle",
							"Particle",
							"Triangle3D",
							"Triangle3D",
							"Triangle3DHeavy",
							"Triangle3DHeavy",
							"ConvexHull",
							"ConvexHull",
							"MapExplorerAgent",
							"MapExplorerAgent",
							"MapTileFlags",
							"MapTileFlags",
							"MapTile",
							"MapTile",
							"MapLevel",
							"MapLevel",
							"Map",
							"Map",
							"MapSector",
							"MapSector",
							"AStarNode",
							"AStarNode",
							"AStarPathFindingProgress",
							"AStarPathFindingProgress",
							"AStarSearch_BFS",
							"AStarSearch_BFS",
							"AStarNode_IDA",
							"AStarNode_IDA",
							"AStarSearch_IDA",
							"AStarSearch_IDA",
							"AStarPathJob",
							"AStarPathJob",
							"AStarJobScheduler",
							"AStarJobScheduler",
							"AStarPathSteps",
							"AStarPathSteps",
							"PeepRenderSupport",
							"PeepRenderSupport",
							"ItemTypes",
							"ItemTypes",
							"MachineTypes",
							"MachineTypes",
							"Inventory",
							"Inventory",
							"MachineDesc",
							"MachineDesc",
							"Machine",
							"Machine",
							"OrderActions",
							"OrderActions",
							"Order",
							"Order",
							"EditorTools",
							"EditorTools",
							"SynchronizedClientState",
							"SynchronizedClientState",
							"GameState",
							"GameState",
							"StaticData",
							"StaticData"
						]
					},
					"AQAAAAAAAAAAAAAAwAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					14,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\clGame.c",
						"symkeys":
						[
							[
								251,
								261
							],
							[
								357,
								370
							],
							[
								426,
								439
							],
							[
								503,
								517
							],
							[
								582,
								597
							],
							[
								663,
								674
							],
							[
								729,
								740
							],
							[
								803,
								814
							],
							[
								898,
								924
							],
							[
								1146,
								1172
							],
							[
								1604,
								1618
							],
							[
								1717,
								1731
							],
							[
								1902,
								1920
							],
							[
								2023,
								2049
							],
							[
								2182,
								2201
							],
							[
								2348,
								2360
							],
							[
								3661,
								3690
							],
							[
								4259,
								4284
							],
							[
								4514,
								4537
							],
							[
								4652,
								4673
							],
							[
								4854,
								4875
							],
							[
								4980,
								5004
							],
							[
								5183,
								5198
							],
							[
								5451,
								5472
							],
							[
								5751,
								5768
							],
							[
								6020,
								6033
							],
							[
								6306,
								6319
							],
							[
								6532,
								6556
							],
							[
								6903,
								6924
							],
							[
								8456,
								8480
							],
							[
								9310,
								9331
							],
							[
								9942,
								9962
							],
							[
								10228,
								10245
							],
							[
								10413,
								10440
							],
							[
								11220,
								11256
							],
							[
								11829,
								11846
							],
							[
								12110,
								12124
							],
							[
								12239,
								12264
							],
							[
								13427,
								13455
							],
							[
								14563,
								14579
							],
							[
								14720,
								14744
							],
							[
								16051,
								16070
							],
							[
								16361,
								16380
							],
							[
								16684,
								16700
							],
							[
								16875,
								16892
							],
							[
								17071,
								17086
							],
							[
								17261,
								17283
							],
							[
								18035,
								18054
							],
							[
								18396,
								18410
							],
							[
								18701,
								18731
							],
							[
								19187,
								19208
							],
							[
								19383,
								19408
							],
							[
								19691,
								19720
							],
							[
								19895,
								19914
							],
							[
								20110,
								20133
							],
							[
								20255,
								20277
							],
							[
								20591,
								20615
							],
							[
								20934,
								20948
							],
							[
								21284,
								21303
							],
							[
								21452,
								21472
							],
							[
								21764,
								21792
							],
							[
								22196,
								22214
							],
							[
								25595,
								25617
							],
							[
								27588,
								27612
							],
							[
								33173,
								33196
							],
							[
								34795,
								34823
							],
							[
								35069,
								35096
							],
							[
								35326,
								35350
							],
							[
								35575,
								35616
							],
							[
								36967,
								36989
							],
							[
								39578,
								39602
							],
							[
								40147,
								40170
							],
							[
								41439,
								41463
							],
							[
								41837,
								41863
							],
							[
								42281,
								42308
							],
							[
								42619,
								42640
							],
							[
								42784,
								42808
							],
							[
								43553,
								43581
							],
							[
								47508,
								47527
							],
							[
								48086,
								48106
							],
							[
								48579,
								48610
							],
							[
								51589,
								51598
							],
							[
								51670,
								51685
							],
							[
								53747,
								53768
							],
							[
								54290,
								54300
							],
							[
								54676,
								54686
							],
							[
								55023,
								55037
							],
							[
								56542,
								56557
							],
							[
								57293,
								57330
							],
							[
								58067,
								58096
							],
							[
								58818,
								58839
							],
							[
								66457,
								66473
							],
							[
								69777,
								69789
							],
							[
								71502,
								71516
							],
							[
								71578,
								71592
							],
							[
								73485,
								73501
							],
							[
								75229,
								75239
							],
							[
								79785,
								79799
							],
							[
								79956,
								79971
							],
							[
								83299,
								83315
							],
							[
								88018,
								88039
							],
							[
								88576,
								88599
							],
							[
								92047,
								92064
							],
							[
								92319,
								92345
							],
							[
								93491,
								93505
							],
							[
								94319,
								94333
							],
							[
								94502,
								94526
							],
							[
								94968,
								94987
							],
							[
								96448,
								96464
							],
							[
								96796,
								96807
							],
							[
								96994,
								97009
							],
							[
								97734,
								97752
							],
							[
								117571,
								117601
							],
							[
								117818,
								117832
							],
							[
								121557,
								121566
							],
							[
								124342,
								124352
							],
							[
								124544,
								124556
							],
							[
								126677,
								126693
							],
							[
								127176,
								127194
							],
							[
								127550,
								127573
							],
							[
								127866,
								127882
							],
							[
								129239,
								129254
							],
							[
								129439,
								129455
							],
							[
								129640,
								129657
							],
							[
								134264,
								134281
							],
							[
								134360,
								134368
							],
							[
								136760,
								136772
							],
							[
								137760,
								137775
							],
							[
								138174,
								138185
							],
							[
								139541,
								139553
							],
							[
								140751,
								140774
							],
							[
								142794,
								142810
							],
							[
								143766,
								143782
							],
							[
								146096,
								146113
							]
						],
						"symlist":
						[
							"ThisClient",
							"Print_GE_INT2",
							"Print_GE_INT3",
							"Print_GE_UINT3",
							"Print_GE_SHORT3",
							"PrintFloat2",
							"PrintFloat3",
							"PrintFloat4",
							"BITBANK_GET_SUBNUMBER_UINT",
							"BITBANK_SET_SUBNUMBER_UINT",
							"MapDataGetTile",
							"MapDataSetTile",
							"MapTileGetRotation",
							"MapGetDataPointerFromCoord",
							"MapGetTileFromCoord",
							"MapRidgeType",
							"MapDataHas2LowAdjacentCorners",
							"MapHas2LowAdjacentCorners",
							"MapTileDataHasLowCorner",
							"MapTileData_TileSolid",
							"MapTileData_PeepCount",
							"MapTileData_SetPeepCount",
							"MapHasLowCorner",
							"MapDataLowCornerCount",
							"MapLowCornerCount",
							"MapDataXLevel",
							"MapTileXLevel",
							"MapTileCoordStandInValid",
							"MapTileCoordEnterable",
							"Machine_InitDescriptions",
							"Machine_CreateMachine",
							"AStarNodeInstantiate",
							"AStarInitPathNode",
							"AStarSearch_BFS_Instantiate",
							"AStarSearch_BFS_InstantiateParrallel",
							"MapTileCoordValid",
							"AStarNodeValid",
							"AStarNode2NodeTraversible",
							"MakeCardinalDirectionOffsets",
							"AStarOpenHeapKey",
							"AStarOpenHeapTrickleDown",
							"AStarOpenHeapRemove",
							"AStarRemoveFromOpen",
							"AStarAddToClosed",
							"AStarNodeInClosed",
							"AStarNodeInOpen",
							"AStarOpenHeapTrickleUp",
							"AStarOpenHeapInsert",
							"AStarAddToOpen",
							"AStarPathStepsNextFreePathNode",
							"AStarRemoveFromClosed",
							"AStarNodeDistanceHuristic",
							"AStarNodeDistanceHuristic_IDA",
							"AStarPrintNodeStats",
							"AStarPrintPathNodeStats",
							"AStarPrintSearchPathTo",
							"AStarPrintSearchPathFrom",
							"AStarPrintPath",
							"GE_INT3_ENTRY_COUNT",
							"GE_INT3_SINGLE_ENTRY",
							"GE_INT3_WHACHAMACOLIT1_ENTRY",
							"AStarFormPathSteps",
							"AStarFormPathSteps_IDA",
							"AStarSearch_BFS_Continue",
							"AStarSearch_BFS_Routine",
							"AStarSearch_IDA_Node_In_Path",
							"AStarSearch_IDA_Loc_In_Path",
							"AStarSearch_IDA_InitNode",
							"AStarSearch_IDA_NodeGrabNextBestSuccessor",
							"AStarSearch_IDA_Search",
							"AStarSearch_IDA_Continue",
							"AStarSearch_IDA_Routine",
							"AStarPathNode_GetMapData",
							"AStarPathNode_LastPathNode",
							"BaryCentric_In_Triangle_Q16",
							"SOME_INTERNAL_CORDIST",
							"Triangle3D_ToBaryCentric",
							"Triangle3DHeavy_ClosestPoint",
							"Triangle3DMakeHeavy",
							"Triangle3D_Make2Face",
							"MapTileConvexHull_From_TileData",
							"PeepPrint",
							"PeepPeepPhysics",
							"PeepToPeepInteraction",
							"WorldToMap",
							"MapToWorld",
							"PeepGetMapTile",
							"RegionCollision",
							"MapTileConvexHull_ClosestPointToPoint",
							"MapTileConvexHull_PointInside",
							"PeepMapTileCollisions",
							"PeepDrivePhysics",
							"WalkAndFight",
							"PeepPreUpdate1",
							"PeepPreUpdate2",
							"PeepMapVisiblity",
							"PeepUpdate",
							"ParticleUpdate",
							"MapUpdateShadow",
							"MapBuildTileView",
							"MapBuildTileView3Area",
							"PrintSelectionPeepStats",
							"MapTileCoordClamp",
							"GetMapTileCoordFromWorld2D",
							"LINES_DrawLine",
							"LINES_ClearAll",
							"Matrix_Float4_Times_Vec4",
							"LINES_DrawLineWorld",
							"GUI_TO_WORLD_Q16",
							"MapTileToUV",
							"PrintMouseState",
							"game_apply_actions",
							"MapTileWholeToMapTileCenterQ16",
							"MapCreateSlope",
							"MapCreate",
							"MapCreate2",
							"StartupTests",
							"MapExplorerSpawn",
							"AStarPathStepsInit",
							"CLIENT_InitClientStates",
							"game_init_single",
							"game_init_multi",
							"game_init_multi2",
							"game_init_single2",
							"UpdateMapExplorer",
							"PeepDraw",
							"ParticleDraw",
							"game_updatepre1",
							"game_update",
							"game_update2",
							"game_post_update_single",
							"game_preupdate_1",
							"game_preupdate_2",
							"size_tests_kernel"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADABAAAQVN0YXJKb2JTY2hlZHVsZXIKQVN0YXJKb2JTY2hlZHVsZXIKQVN0YXJOb2RlCkFTdGFyTm9kZQpBU3Rhck5vZGVfSURBCkFTdGFyTm9kZV9JREEKQVN0YXJQYXRoRmluZGluZ1Byb2dyZXNzCkFTdGFyUGF0aEZpbmRpbmdQcm9ncmVzcwpBU3RhclBhdGhKb2IKQVN0YXJQYXRoSm9iCkFTdGFyUGF0aE5vZGUKQVN0YXJQYXRoTm9kZQpBU3RhclBhdGhTdGVwcwpBU3RhclBhdGhTdGVwcwpBU3RhclNlYXJjaF9CRlMKQVN0YXJTZWFyY2hfQkZTCkFTdGFyU2VhcmNoX0lEQQpBU3RhclNlYXJjaF9JREEKQklUQ0xFQVIKQklUR0VUCkJJVEdFVF9NRgpCSVRTRVQKQmFzZVBoeXNpY3MKQmFzZVBoeXNpY3MKQ0hFQ0tFRF9PRkZTRVRfVE9fUFRSXzNECkNMX0NIRUNLRURfQVJSQVlfR0VUX1BUUgpDTF9DSEVDS0VEX0FSUkFZX1NFVApDTF9DSEVDS19OVUxMCkNMX1RIUk9XX0FTU0VSVApDb252ZXhIdWxsCkNvbnZleEh1bGwKRHJpdmVQaHlzaWNzCkRyaXZlUGh5c2ljcwpFZGl0b3JUb29scwpFZGl0b3JUb29scwpHYW1lU3RhdGUKR2FtZVN0YXRlCkludmVudG9yeQpJbnZlbnRvcnkKSXRlbVR5cGVzCkl0ZW1UeXBlcwpMaW5lYXJDb25zdHJhaW50CkxpbmVhckNvbnN0cmFpbnQKTWFjaGluZQpNYWNoaW5lCk1hY2hpbmVEZXNjCk1hY2hpbmVEZXNjCk1hY2hpbmVUeXBlcwpNYWNoaW5lVHlwZXMKTWFwCk1hcApNYXBFeHBsb3JlckFnZW50Ck1hcEV4cGxvcmVyQWdlbnQKTWFwTGV2ZWwKTWFwTGV2ZWwKTWFwU2VjdG9yCk1hcFNlY3RvcgpNYXBUaWxlCk1hcFRpbGUKTWFwVGlsZUZsYWdzCk1hcFRpbGVGbGFncwpPRkZTRVRfVE9fUFRSCk9GRlNFVF9UT19QVFJfMkQKT0ZGU0VUX1RPX1BUUl8zRApPcmRlcgpPcmRlcgpPcmRlckFjdGlvbnMKT3JkZXJBY3Rpb25zClBhcnRpY2xlClBhcnRpY2xlClBlZXAKUGVlcApQZWVwQ29tbXVuaWNhdGlvbgpQZWVwQ29tbXVuaWNhdGlvbgpQZWVwUGh5c2ljcwpQZWVwUGh5c2ljcwpQZWVwUmVuZGVyU3VwcG9ydApQZWVwUmVuZGVyU3VwcG9ydApQZWVwU3RhdGVfQmFzaWMKUGVlcFN0YXRlX0Jhc2ljClBlZXBTdGF0ZV9CaXRGbGFncwpQaHlzaWNzQ2lyY2xlU2hhcGUKUGh5c2ljc0NpcmNsZVNoYXBlClN0YXRpY0RhdGEKU3RhdGljRGF0YQpTeW5jaHJvbml6ZWRDbGllbnRTdGF0ZQpTeW5jaHJvbml6ZWRDbGllbnRTdGF0ZQpUcmlhbmdsZTNEClRyaWFuZ2xlM0QKVHJpYW5nbGUzREhlYXZ5ClRyaWFuZ2xlM0RIZWF2eQAAAAAAAAAAjgoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPEBAAAAAAAA8QEAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\clGame.c",
						"symkeys":
						[
							[
								251,
								261
							],
							[
								357,
								370
							],
							[
								426,
								439
							],
							[
								503,
								517
							],
							[
								582,
								597
							],
							[
								663,
								674
							],
							[
								729,
								740
							],
							[
								803,
								814
							],
							[
								898,
								924
							],
							[
								1146,
								1172
							],
							[
								1604,
								1618
							],
							[
								1717,
								1731
							],
							[
								1902,
								1920
							],
							[
								2023,
								2049
							],
							[
								2182,
								2201
							],
							[
								2348,
								2360
							],
							[
								3661,
								3690
							],
							[
								4259,
								4284
							],
							[
								4514,
								4537
							],
							[
								4652,
								4673
							],
							[
								4854,
								4875
							],
							[
								4980,
								5004
							],
							[
								5183,
								5198
							],
							[
								5451,
								5472
							],
							[
								5751,
								5768
							],
							[
								6020,
								6033
							],
							[
								6306,
								6319
							],
							[
								6532,
								6556
							],
							[
								6903,
								6924
							],
							[
								8456,
								8480
							],
							[
								9310,
								9331
							],
							[
								9942,
								9962
							],
							[
								10228,
								10245
							],
							[
								10413,
								10440
							],
							[
								11220,
								11256
							],
							[
								11829,
								11846
							],
							[
								12110,
								12124
							],
							[
								12239,
								12264
							],
							[
								13427,
								13455
							],
							[
								14563,
								14579
							],
							[
								14720,
								14744
							],
							[
								16051,
								16070
							],
							[
								16361,
								16380
							],
							[
								16684,
								16700
							],
							[
								16875,
								16892
							],
							[
								17071,
								17086
							],
							[
								17261,
								17283
							],
							[
								18035,
								18054
							],
							[
								18396,
								18410
							],
							[
								18701,
								18731
							],
							[
								19187,
								19208
							],
							[
								19383,
								19408
							],
							[
								19691,
								19720
							],
							[
								19895,
								19914
							],
							[
								20110,
								20133
							],
							[
								20255,
								20277
							],
							[
								20591,
								20615
							],
							[
								20934,
								20948
							],
							[
								21284,
								21303
							],
							[
								21452,
								21472
							],
							[
								21764,
								21792
							],
							[
								22196,
								22214
							],
							[
								25595,
								25617
							],
							[
								27588,
								27612
							],
							[
								33173,
								33196
							],
							[
								34795,
								34823
							],
							[
								35069,
								35096
							],
							[
								35326,
								35350
							],
							[
								35575,
								35616
							],
							[
								36967,
								36989
							],
							[
								39578,
								39602
							],
							[
								40147,
								40170
							],
							[
								41439,
								41463
							],
							[
								41837,
								41863
							],
							[
								42281,
								42308
							],
							[
								42619,
								42640
							],
							[
								42784,
								42808
							],
							[
								43553,
								43581
							],
							[
								47508,
								47527
							],
							[
								48086,
								48106
							],
							[
								48579,
								48610
							],
							[
								51589,
								51598
							],
							[
								51670,
								51685
							],
							[
								53747,
								53768
							],
							[
								54290,
								54300
							],
							[
								54676,
								54686
							],
							[
								55023,
								55037
							],
							[
								56542,
								56557
							],
							[
								57293,
								57330
							],
							[
								58067,
								58096
							],
							[
								58818,
								58839
							],
							[
								66457,
								66473
							],
							[
								69777,
								69789
							],
							[
								71502,
								71516
							],
							[
								71578,
								71592
							],
							[
								73485,
								73501
							],
							[
								75229,
								75239
							],
							[
								79785,
								79799
							],
							[
								79956,
								79971
							],
							[
								83299,
								83315
							],
							[
								88018,
								88039
							],
							[
								88576,
								88599
							],
							[
								92047,
								92064
							],
							[
								92319,
								92345
							],
							[
								93491,
								93505
							],
							[
								94319,
								94333
							],
							[
								94502,
								94526
							],
							[
								94968,
								94987
							],
							[
								96448,
								96464
							],
							[
								96796,
								96807
							],
							[
								96994,
								97009
							],
							[
								97734,
								97752
							],
							[
								117573,
								117603
							],
							[
								117820,
								117834
							],
							[
								121559,
								121568
							],
							[
								124344,
								124354
							],
							[
								124546,
								124558
							],
							[
								126679,
								126695
							],
							[
								127178,
								127196
							],
							[
								127552,
								127575
							],
							[
								127868,
								127884
							],
							[
								129241,
								129256
							],
							[
								129441,
								129457
							],
							[
								129642,
								129659
							],
							[
								134266,
								134283
							],
							[
								134362,
								134370
							],
							[
								136762,
								136774
							],
							[
								137762,
								137777
							],
							[
								138176,
								138187
							],
							[
								139543,
								139555
							],
							[
								140753,
								140776
							],
							[
								142796,
								142812
							],
							[
								143768,
								143784
							],
							[
								146098,
								146115
							]
						],
						"symlist":
						[
							"ThisClient",
							"Print_GE_INT2",
							"Print_GE_INT3",
							"Print_GE_UINT3",
							"Print_GE_SHORT3",
							"PrintFloat2",
							"PrintFloat3",
							"PrintFloat4",
							"BITBANK_GET_SUBNUMBER_UINT",
							"BITBANK_SET_SUBNUMBER_UINT",
							"MapDataGetTile",
							"MapDataSetTile",
							"MapTileGetRotation",
							"MapGetDataPointerFromCoord",
							"MapGetTileFromCoord",
							"MapRidgeType",
							"MapDataHas2LowAdjacentCorners",
							"MapHas2LowAdjacentCorners",
							"MapTileDataHasLowCorner",
							"MapTileData_TileSolid",
							"MapTileData_PeepCount",
							"MapTileData_SetPeepCount",
							"MapHasLowCorner",
							"MapDataLowCornerCount",
							"MapLowCornerCount",
							"MapDataXLevel",
							"MapTileXLevel",
							"MapTileCoordStandInValid",
							"MapTileCoordEnterable",
							"Machine_InitDescriptions",
							"Machine_CreateMachine",
							"AStarNodeInstantiate",
							"AStarInitPathNode",
							"AStarSearch_BFS_Instantiate",
							"AStarSearch_BFS_InstantiateParrallel",
							"MapTileCoordValid",
							"AStarNodeValid",
							"AStarNode2NodeTraversible",
							"MakeCardinalDirectionOffsets",
							"AStarOpenHeapKey",
							"AStarOpenHeapTrickleDown",
							"AStarOpenHeapRemove",
							"AStarRemoveFromOpen",
							"AStarAddToClosed",
							"AStarNodeInClosed",
							"AStarNodeInOpen",
							"AStarOpenHeapTrickleUp",
							"AStarOpenHeapInsert",
							"AStarAddToOpen",
							"AStarPathStepsNextFreePathNode",
							"AStarRemoveFromClosed",
							"AStarNodeDistanceHuristic",
							"AStarNodeDistanceHuristic_IDA",
							"AStarPrintNodeStats",
							"AStarPrintPathNodeStats",
							"AStarPrintSearchPathTo",
							"AStarPrintSearchPathFrom",
							"AStarPrintPath",
							"GE_INT3_ENTRY_COUNT",
							"GE_INT3_SINGLE_ENTRY",
							"GE_INT3_WHACHAMACOLIT1_ENTRY",
							"AStarFormPathSteps",
							"AStarFormPathSteps_IDA",
							"AStarSearch_BFS_Continue",
							"AStarSearch_BFS_Routine",
							"AStarSearch_IDA_Node_In_Path",
							"AStarSearch_IDA_Loc_In_Path",
							"AStarSearch_IDA_InitNode",
							"AStarSearch_IDA_NodeGrabNextBestSuccessor",
							"AStarSearch_IDA_Search",
							"AStarSearch_IDA_Continue",
							"AStarSearch_IDA_Routine",
							"AStarPathNode_GetMapData",
							"AStarPathNode_LastPathNode",
							"BaryCentric_In_Triangle_Q16",
							"SOME_INTERNAL_CORDIST",
							"Triangle3D_ToBaryCentric",
							"Triangle3DHeavy_ClosestPoint",
							"Triangle3DMakeHeavy",
							"Triangle3D_Make2Face",
							"MapTileConvexHull_From_TileData",
							"PeepPrint",
							"PeepPeepPhysics",
							"PeepToPeepInteraction",
							"WorldToMap",
							"MapToWorld",
							"PeepGetMapTile",
							"RegionCollision",
							"MapTileConvexHull_ClosestPointToPoint",
							"MapTileConvexHull_PointInside",
							"PeepMapTileCollisions",
							"PeepDrivePhysics",
							"WalkAndFight",
							"PeepPreUpdate1",
							"PeepPreUpdate2",
							"PeepMapVisiblity",
							"PeepUpdate",
							"ParticleUpdate",
							"MapUpdateShadow",
							"MapBuildTileView",
							"MapBuildTileView3Area",
							"PrintSelectionPeepStats",
							"MapTileCoordClamp",
							"GetMapTileCoordFromWorld2D",
							"LINES_DrawLine",
							"LINES_ClearAll",
							"Matrix_Float4_Times_Vec4",
							"LINES_DrawLineWorld",
							"GUI_TO_WORLD_Q16",
							"MapTileToUV",
							"PrintMouseState",
							"game_apply_actions",
							"MapTileWholeToMapTileCenterQ16",
							"MapCreateSlope",
							"MapCreate",
							"MapCreate2",
							"StartupTests",
							"MapExplorerSpawn",
							"AStarPathStepsInit",
							"CLIENT_InitClientStates",
							"game_init_single",
							"game_init_multi",
							"game_init_multi2",
							"game_init_single2",
							"UpdateMapExplorer",
							"PeepDraw",
							"ParticleDraw",
							"game_updatepre1",
							"game_update",
							"game_update2",
							"game_post_update_single",
							"game_preupdate_1",
							"game_preupdate_2",
							"size_tests_kernel"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACOCgAAQVN0YXJBZGRUb0Nsb3NlZApBU3RhckFkZFRvT3BlbgpBU3RhckZvcm1QYXRoU3RlcHMKQVN0YXJGb3JtUGF0aFN0ZXBzX0lEQQpBU3RhckluaXRQYXRoTm9kZQpBU3Rhck5vZGUyTm9kZVRyYXZlcnNpYmxlCkFTdGFyTm9kZURpc3RhbmNlSHVyaXN0aWMKQVN0YXJOb2RlRGlzdGFuY2VIdXJpc3RpY19JREEKQVN0YXJOb2RlSW5DbG9zZWQKQVN0YXJOb2RlSW5PcGVuCkFTdGFyTm9kZUluc3RhbnRpYXRlCkFTdGFyTm9kZVZhbGlkCkFTdGFyT3BlbkhlYXBJbnNlcnQKQVN0YXJPcGVuSGVhcEtleQpBU3Rhck9wZW5IZWFwUmVtb3ZlCkFTdGFyT3BlbkhlYXBUcmlja2xlRG93bgpBU3Rhck9wZW5IZWFwVHJpY2tsZVVwCkFTdGFyUGF0aE5vZGVfR2V0TWFwRGF0YQpBU3RhclBhdGhOb2RlX0xhc3RQYXRoTm9kZQpBU3RhclBhdGhTdGVwc0luaXQKQVN0YXJQYXRoU3RlcHNOZXh0RnJlZVBhdGhOb2RlCkFTdGFyUHJpbnROb2RlU3RhdHMKQVN0YXJQcmludFBhdGgKQVN0YXJQcmludFBhdGhOb2RlU3RhdHMKQVN0YXJQcmludFNlYXJjaFBhdGhGcm9tCkFTdGFyUHJpbnRTZWFyY2hQYXRoVG8KQVN0YXJSZW1vdmVGcm9tQ2xvc2VkCkFTdGFyUmVtb3ZlRnJvbU9wZW4KQVN0YXJTZWFyY2hfQkZTX0NvbnRpbnVlCkFTdGFyU2VhcmNoX0JGU19JbnN0YW50aWF0ZQpBU3RhclNlYXJjaF9CRlNfSW5zdGFudGlhdGVQYXJyYWxsZWwKQVN0YXJTZWFyY2hfQkZTX1JvdXRpbmUKQVN0YXJTZWFyY2hfSURBX0NvbnRpbnVlCkFTdGFyU2VhcmNoX0lEQV9Jbml0Tm9kZQpBU3RhclNlYXJjaF9JREFfTG9jX0luX1BhdGgKQVN0YXJTZWFyY2hfSURBX05vZGVHcmFiTmV4dEJlc3RTdWNjZXNzb3IKQVN0YXJTZWFyY2hfSURBX05vZGVfSW5fUGF0aApBU3RhclNlYXJjaF9JREFfUm91dGluZQpBU3RhclNlYXJjaF9JREFfU2VhcmNoCkJJVEJBTktfR0VUX1NVQk5VTUJFUl9VSU5UCkJJVEJBTktfU0VUX1NVQk5VTUJFUl9VSU5UCkJhcnlDZW50cmljX0luX1RyaWFuZ2xlX1ExNgpDTElFTlRfSW5pdENsaWVudFN0YXRlcwpHRV9JTlQzX0VOVFJZX0NPVU5UCkdFX0lOVDNfU0lOR0xFX0VOVFJZCkdFX0lOVDNfV0hBQ0hBTUFDT0xJVDFfRU5UUlkKR1VJX1RPX1dPUkxEX1ExNgpHZXRNYXBUaWxlQ29vcmRGcm9tV29ybGQyRApMSU5FU19DbGVhckFsbApMSU5FU19EcmF3TGluZQpMSU5FU19EcmF3TGluZVdvcmxkCk1hY2hpbmVfQ3JlYXRlTWFjaGluZQpNYWNoaW5lX0luaXREZXNjcmlwdGlvbnMKTWFrZUNhcmRpbmFsRGlyZWN0aW9uT2Zmc2V0cwpNYXBCdWlsZFRpbGVWaWV3Ck1hcEJ1aWxkVGlsZVZpZXczQXJlYQpNYXBDcmVhdGUKTWFwQ3JlYXRlMgpNYXBDcmVhdGVTbG9wZQpNYXBEYXRhR2V0VGlsZQpNYXBEYXRhSGFzMkxvd0FkamFjZW50Q29ybmVycwpNYXBEYXRhTG93Q29ybmVyQ291bnQKTWFwRGF0YVNldFRpbGUKTWFwRGF0YVhMZXZlbApNYXBFeHBsb3JlclNwYXduCk1hcEdldERhdGFQb2ludGVyRnJvbUNvb3JkCk1hcEdldFRpbGVGcm9tQ29vcmQKTWFwSGFzMkxvd0FkamFjZW50Q29ybmVycwpNYXBIYXNMb3dDb3JuZXIKTWFwTG93Q29ybmVyQ291bnQKTWFwUmlkZ2VUeXBlCk1hcFRpbGVDb252ZXhIdWxsX0Nsb3Nlc3RQb2ludFRvUG9pbnQKTWFwVGlsZUNvbnZleEh1bGxfRnJvbV9UaWxlRGF0YQpNYXBUaWxlQ29udmV4SHVsbF9Qb2ludEluc2lkZQpNYXBUaWxlQ29vcmRDbGFtcApNYXBUaWxlQ29vcmRFbnRlcmFibGUKTWFwVGlsZUNvb3JkU3RhbmRJblZhbGlkCk1hcFRpbGVDb29yZFZhbGlkCk1hcFRpbGVEYXRhSGFzTG93Q29ybmVyCk1hcFRpbGVEYXRhX1BlZXBDb3VudApNYXBUaWxlRGF0YV9TZXRQZWVwQ291bnQKTWFwVGlsZURhdGFfVGlsZVNvbGlkCk1hcFRpbGVHZXRSb3RhdGlvbgpNYXBUaWxlVG9VVgpNYXBUaWxlV2hvbGVUb01hcFRpbGVDZW50ZXJRMTYKTWFwVGlsZVhMZXZlbApNYXBUb1dvcmxkCk1hcFVwZGF0ZVNoYWRvdwpNYXRyaXhfRmxvYXQ0X1RpbWVzX1ZlYzQKUGFydGljbGVEcmF3ClBhcnRpY2xlVXBkYXRlClBlZXBEcmF3ClBlZXBEcml2ZVBoeXNpY3MKUGVlcEdldE1hcFRpbGUKUGVlcE1hcFRpbGVDb2xsaXNpb25zClBlZXBNYXBWaXNpYmxpdHkKUGVlcFBlZXBQaHlzaWNzClBlZXBQcmVVcGRhdGUxClBlZXBQcmVVcGRhdGUyClBlZXBQcmludApQZWVwVG9QZWVwSW50ZXJhY3Rpb24KUGVlcFVwZGF0ZQpQcmludEZsb2F0MgpQcmludEZsb2F0MwpQcmludEZsb2F0NApQcmludE1vdXNlU3RhdGUKUHJpbnRTZWxlY3Rpb25QZWVwU3RhdHMKUHJpbnRfR0VfSU5UMgpQcmludF9HRV9JTlQzClByaW50X0dFX1NIT1JUMwpQcmludF9HRV9VSU5UMwpSZWdpb25Db2xsaXNpb24KU09NRV9JTlRFUk5BTF9DT1JESVNUClN0YXJ0dXBUZXN0cwpUaGlzQ2xpZW50ClRyaWFuZ2xlM0RIZWF2eV9DbG9zZXN0UG9pbnQKVHJpYW5nbGUzRE1ha2VIZWF2eQpUcmlhbmdsZTNEX01ha2UyRmFjZQpUcmlhbmdsZTNEX1RvQmFyeUNlbnRyaWMKVXBkYXRlTWFwRXhwbG9yZXIKV2Fsa0FuZEZpZ2h0CldvcmxkVG9NYXAKZ2FtZV9hcHBseV9hY3Rpb25zCmdhbWVfaW5pdF9tdWx0aQpnYW1lX2luaXRfbXVsdGkyCmdhbWVfaW5pdF9zaW5nbGUKZ2FtZV9pbml0X3NpbmdsZTIKZ2FtZV9wb3N0X3VwZGF0ZV9zaW5nbGUKZ2FtZV9wcmV1cGRhdGVfMQpnYW1lX3ByZXVwZGF0ZV8yCmdhbWVfdXBkYXRlCmdhbWVfdXBkYXRlMgpnYW1lX3VwZGF0ZXByZTEKc2l6ZV90ZXN0c19rZXJuZWwAAAAAAAAAAI4KAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					16,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\clGame.c",
						"symkeys":
						[
							[
								251,
								261
							],
							[
								357,
								370
							],
							[
								426,
								439
							],
							[
								503,
								517
							],
							[
								582,
								597
							],
							[
								663,
								674
							],
							[
								729,
								740
							],
							[
								803,
								814
							],
							[
								898,
								924
							],
							[
								1146,
								1172
							],
							[
								1604,
								1618
							],
							[
								1717,
								1731
							],
							[
								1902,
								1920
							],
							[
								2023,
								2049
							],
							[
								2182,
								2201
							],
							[
								2348,
								2360
							],
							[
								3661,
								3690
							],
							[
								4259,
								4284
							],
							[
								4514,
								4537
							],
							[
								4652,
								4673
							],
							[
								4854,
								4875
							],
							[
								4980,
								5004
							],
							[
								5183,
								5198
							],
							[
								5451,
								5472
							],
							[
								5751,
								5768
							],
							[
								6020,
								6033
							],
							[
								6306,
								6319
							],
							[
								6532,
								6556
							],
							[
								6903,
								6924
							],
							[
								8456,
								8480
							],
							[
								9310,
								9331
							],
							[
								9942,
								9962
							],
							[
								10228,
								10245
							],
							[
								10413,
								10440
							],
							[
								11220,
								11256
							],
							[
								11829,
								11846
							],
							[
								12110,
								12124
							],
							[
								12239,
								12264
							],
							[
								13427,
								13455
							],
							[
								14563,
								14579
							],
							[
								14720,
								14744
							],
							[
								16051,
								16070
							],
							[
								16361,
								16380
							],
							[
								16684,
								16700
							],
							[
								16875,
								16892
							],
							[
								17071,
								17086
							],
							[
								17261,
								17283
							],
							[
								18035,
								18054
							],
							[
								18396,
								18410
							],
							[
								18701,
								18731
							],
							[
								19187,
								19208
							],
							[
								19383,
								19408
							],
							[
								19691,
								19720
							],
							[
								19895,
								19914
							],
							[
								20110,
								20133
							],
							[
								20255,
								20277
							],
							[
								20591,
								20615
							],
							[
								20934,
								20948
							],
							[
								21284,
								21303
							],
							[
								21452,
								21472
							],
							[
								21764,
								21792
							],
							[
								22196,
								22214
							],
							[
								25595,
								25617
							],
							[
								27588,
								27612
							],
							[
								33173,
								33196
							],
							[
								34795,
								34823
							],
							[
								35069,
								35096
							],
							[
								35326,
								35350
							],
							[
								35575,
								35616
							],
							[
								36967,
								36989
							],
							[
								39578,
								39602
							],
							[
								40147,
								40170
							],
							[
								41439,
								41463
							],
							[
								41837,
								41863
							],
							[
								42281,
								42308
							],
							[
								42619,
								42640
							],
							[
								42784,
								42808
							],
							[
								43553,
								43581
							],
							[
								47508,
								47527
							],
							[
								48086,
								48106
							],
							[
								48579,
								48610
							],
							[
								51589,
								51598
							],
							[
								51670,
								51685
							],
							[
								53747,
								53768
							],
							[
								54290,
								54300
							],
							[
								54676,
								54686
							],
							[
								55023,
								55037
							],
							[
								56542,
								56557
							],
							[
								57293,
								57330
							],
							[
								58067,
								58096
							],
							[
								58818,
								58839
							],
							[
								66457,
								66473
							],
							[
								69777,
								69789
							],
							[
								71502,
								71516
							],
							[
								71578,
								71592
							],
							[
								73485,
								73501
							],
							[
								75229,
								75239
							],
							[
								79785,
								79799
							],
							[
								79956,
								79971
							],
							[
								83299,
								83315
							],
							[
								88018,
								88039
							],
							[
								88576,
								88599
							],
							[
								92047,
								92064
							],
							[
								92319,
								92345
							],
							[
								93491,
								93505
							],
							[
								94319,
								94333
							],
							[
								94502,
								94526
							],
							[
								94968,
								94987
							],
							[
								96448,
								96464
							],
							[
								96796,
								96807
							],
							[
								96994,
								97009
							],
							[
								97734,
								97752
							],
							[
								117573,
								117603
							],
							[
								117820,
								117834
							],
							[
								121559,
								121568
							],
							[
								124344,
								124354
							],
							[
								124546,
								124558
							],
							[
								126679,
								126695
							],
							[
								127178,
								127196
							],
							[
								127552,
								127575
							],
							[
								127868,
								127884
							],
							[
								129241,
								129256
							],
							[
								129441,
								129457
							],
							[
								129642,
								129659
							],
							[
								134266,
								134283
							],
							[
								134362,
								134370
							],
							[
								136762,
								136774
							],
							[
								137762,
								137777
							],
							[
								138176,
								138187
							],
							[
								139543,
								139555
							],
							[
								140753,
								140776
							],
							[
								142796,
								142812
							],
							[
								143768,
								143784
							],
							[
								146098,
								146115
							]
						],
						"symlist":
						[
							"ThisClient",
							"Print_GE_INT2",
							"Print_GE_INT3",
							"Print_GE_UINT3",
							"Print_GE_SHORT3",
							"PrintFloat2",
							"PrintFloat3",
							"PrintFloat4",
							"BITBANK_GET_SUBNUMBER_UINT",
							"BITBANK_SET_SUBNUMBER_UINT",
							"MapDataGetTile",
							"MapDataSetTile",
							"MapTileGetRotation",
							"MapGetDataPointerFromCoord",
							"MapGetTileFromCoord",
							"MapRidgeType",
							"MapDataHas2LowAdjacentCorners",
							"MapHas2LowAdjacentCorners",
							"MapTileDataHasLowCorner",
							"MapTileData_TileSolid",
							"MapTileData_PeepCount",
							"MapTileData_SetPeepCount",
							"MapHasLowCorner",
							"MapDataLowCornerCount",
							"MapLowCornerCount",
							"MapDataXLevel",
							"MapTileXLevel",
							"MapTileCoordStandInValid",
							"MapTileCoordEnterable",
							"Machine_InitDescriptions",
							"Machine_CreateMachine",
							"AStarNodeInstantiate",
							"AStarInitPathNode",
							"AStarSearch_BFS_Instantiate",
							"AStarSearch_BFS_InstantiateParrallel",
							"MapTileCoordValid",
							"AStarNodeValid",
							"AStarNode2NodeTraversible",
							"MakeCardinalDirectionOffsets",
							"AStarOpenHeapKey",
							"AStarOpenHeapTrickleDown",
							"AStarOpenHeapRemove",
							"AStarRemoveFromOpen",
							"AStarAddToClosed",
							"AStarNodeInClosed",
							"AStarNodeInOpen",
							"AStarOpenHeapTrickleUp",
							"AStarOpenHeapInsert",
							"AStarAddToOpen",
							"AStarPathStepsNextFreePathNode",
							"AStarRemoveFromClosed",
							"AStarNodeDistanceHuristic",
							"AStarNodeDistanceHuristic_IDA",
							"AStarPrintNodeStats",
							"AStarPrintPathNodeStats",
							"AStarPrintSearchPathTo",
							"AStarPrintSearchPathFrom",
							"AStarPrintPath",
							"GE_INT3_ENTRY_COUNT",
							"GE_INT3_SINGLE_ENTRY",
							"GE_INT3_WHACHAMACOLIT1_ENTRY",
							"AStarFormPathSteps",
							"AStarFormPathSteps_IDA",
							"AStarSearch_BFS_Continue",
							"AStarSearch_BFS_Routine",
							"AStarSearch_IDA_Node_In_Path",
							"AStarSearch_IDA_Loc_In_Path",
							"AStarSearch_IDA_InitNode",
							"AStarSearch_IDA_NodeGrabNextBestSuccessor",
							"AStarSearch_IDA_Search",
							"AStarSearch_IDA_Continue",
							"AStarSearch_IDA_Routine",
							"AStarPathNode_GetMapData",
							"AStarPathNode_LastPathNode",
							"BaryCentric_In_Triangle_Q16",
							"SOME_INTERNAL_CORDIST",
							"Triangle3D_ToBaryCentric",
							"Triangle3DHeavy_ClosestPoint",
							"Triangle3DMakeHeavy",
							"Triangle3D_Make2Face",
							"MapTileConvexHull_From_TileData",
							"PeepPrint",
							"PeepPeepPhysics",
							"PeepToPeepInteraction",
							"WorldToMap",
							"MapToWorld",
							"PeepGetMapTile",
							"RegionCollision",
							"MapTileConvexHull_ClosestPointToPoint",
							"MapTileConvexHull_PointInside",
							"PeepMapTileCollisions",
							"PeepDrivePhysics",
							"WalkAndFight",
							"PeepPreUpdate1",
							"PeepPreUpdate2",
							"PeepMapVisiblity",
							"PeepUpdate",
							"ParticleUpdate",
							"MapUpdateShadow",
							"MapBuildTileView",
							"MapBuildTileView3Area",
							"PrintSelectionPeepStats",
							"MapTileCoordClamp",
							"GetMapTileCoordFromWorld2D",
							"LINES_DrawLine",
							"LINES_ClearAll",
							"Matrix_Float4_Times_Vec4",
							"LINES_DrawLineWorld",
							"GUI_TO_WORLD_Q16",
							"MapTileToUV",
							"PrintMouseState",
							"game_apply_actions",
							"MapTileWholeToMapTileCenterQ16",
							"MapCreateSlope",
							"MapCreate",
							"MapCreate2",
							"StartupTests",
							"MapExplorerSpawn",
							"AStarPathStepsInit",
							"CLIENT_InitClientStates",
							"game_init_single",
							"game_init_multi",
							"game_init_multi2",
							"game_init_single2",
							"UpdateMapExplorer",
							"PeepDraw",
							"ParticleDraw",
							"game_updatepre1",
							"game_update",
							"game_update2",
							"game_post_update_single",
							"game_preupdate_1",
							"game_preupdate_2",
							"size_tests_kernel"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACOCgAAQVN0YXJBZGRUb0Nsb3NlZApBU3RhckFkZFRvT3BlbgpBU3RhckZvcm1QYXRoU3RlcHMKQVN0YXJGb3JtUGF0aFN0ZXBzX0lEQQpBU3RhckluaXRQYXRoTm9kZQpBU3Rhck5vZGUyTm9kZVRyYXZlcnNpYmxlCkFTdGFyTm9kZURpc3RhbmNlSHVyaXN0aWMKQVN0YXJOb2RlRGlzdGFuY2VIdXJpc3RpY19JREEKQVN0YXJOb2RlSW5DbG9zZWQKQVN0YXJOb2RlSW5PcGVuCkFTdGFyTm9kZUluc3RhbnRpYXRlCkFTdGFyTm9kZVZhbGlkCkFTdGFyT3BlbkhlYXBJbnNlcnQKQVN0YXJPcGVuSGVhcEtleQpBU3Rhck9wZW5IZWFwUmVtb3ZlCkFTdGFyT3BlbkhlYXBUcmlja2xlRG93bgpBU3Rhck9wZW5IZWFwVHJpY2tsZVVwCkFTdGFyUGF0aE5vZGVfR2V0TWFwRGF0YQpBU3RhclBhdGhOb2RlX0xhc3RQYXRoTm9kZQpBU3RhclBhdGhTdGVwc0luaXQKQVN0YXJQYXRoU3RlcHNOZXh0RnJlZVBhdGhOb2RlCkFTdGFyUHJpbnROb2RlU3RhdHMKQVN0YXJQcmludFBhdGgKQVN0YXJQcmludFBhdGhOb2RlU3RhdHMKQVN0YXJQcmludFNlYXJjaFBhdGhGcm9tCkFTdGFyUHJpbnRTZWFyY2hQYXRoVG8KQVN0YXJSZW1vdmVGcm9tQ2xvc2VkCkFTdGFyUmVtb3ZlRnJvbU9wZW4KQVN0YXJTZWFyY2hfQkZTX0NvbnRpbnVlCkFTdGFyU2VhcmNoX0JGU19JbnN0YW50aWF0ZQpBU3RhclNlYXJjaF9CRlNfSW5zdGFudGlhdGVQYXJyYWxsZWwKQVN0YXJTZWFyY2hfQkZTX1JvdXRpbmUKQVN0YXJTZWFyY2hfSURBX0NvbnRpbnVlCkFTdGFyU2VhcmNoX0lEQV9Jbml0Tm9kZQpBU3RhclNlYXJjaF9JREFfTG9jX0luX1BhdGgKQVN0YXJTZWFyY2hfSURBX05vZGVHcmFiTmV4dEJlc3RTdWNjZXNzb3IKQVN0YXJTZWFyY2hfSURBX05vZGVfSW5fUGF0aApBU3RhclNlYXJjaF9JREFfUm91dGluZQpBU3RhclNlYXJjaF9JREFfU2VhcmNoCkJJVEJBTktfR0VUX1NVQk5VTUJFUl9VSU5UCkJJVEJBTktfU0VUX1NVQk5VTUJFUl9VSU5UCkJhcnlDZW50cmljX0luX1RyaWFuZ2xlX1ExNgpDTElFTlRfSW5pdENsaWVudFN0YXRlcwpHRV9JTlQzX0VOVFJZX0NPVU5UCkdFX0lOVDNfU0lOR0xFX0VOVFJZCkdFX0lOVDNfV0hBQ0hBTUFDT0xJVDFfRU5UUlkKR1VJX1RPX1dPUkxEX1ExNgpHZXRNYXBUaWxlQ29vcmRGcm9tV29ybGQyRApMSU5FU19DbGVhckFsbApMSU5FU19EcmF3TGluZQpMSU5FU19EcmF3TGluZVdvcmxkCk1hY2hpbmVfQ3JlYXRlTWFjaGluZQpNYWNoaW5lX0luaXREZXNjcmlwdGlvbnMKTWFrZUNhcmRpbmFsRGlyZWN0aW9uT2Zmc2V0cwpNYXBCdWlsZFRpbGVWaWV3Ck1hcEJ1aWxkVGlsZVZpZXczQXJlYQpNYXBDcmVhdGUKTWFwQ3JlYXRlMgpNYXBDcmVhdGVTbG9wZQpNYXBEYXRhR2V0VGlsZQpNYXBEYXRhSGFzMkxvd0FkamFjZW50Q29ybmVycwpNYXBEYXRhTG93Q29ybmVyQ291bnQKTWFwRGF0YVNldFRpbGUKTWFwRGF0YVhMZXZlbApNYXBFeHBsb3JlclNwYXduCk1hcEdldERhdGFQb2ludGVyRnJvbUNvb3JkCk1hcEdldFRpbGVGcm9tQ29vcmQKTWFwSGFzMkxvd0FkamFjZW50Q29ybmVycwpNYXBIYXNMb3dDb3JuZXIKTWFwTG93Q29ybmVyQ291bnQKTWFwUmlkZ2VUeXBlCk1hcFRpbGVDb252ZXhIdWxsX0Nsb3Nlc3RQb2ludFRvUG9pbnQKTWFwVGlsZUNvbnZleEh1bGxfRnJvbV9UaWxlRGF0YQpNYXBUaWxlQ29udmV4SHVsbF9Qb2ludEluc2lkZQpNYXBUaWxlQ29vcmRDbGFtcApNYXBUaWxlQ29vcmRFbnRlcmFibGUKTWFwVGlsZUNvb3JkU3RhbmRJblZhbGlkCk1hcFRpbGVDb29yZFZhbGlkCk1hcFRpbGVEYXRhSGFzTG93Q29ybmVyCk1hcFRpbGVEYXRhX1BlZXBDb3VudApNYXBUaWxlRGF0YV9TZXRQZWVwQ291bnQKTWFwVGlsZURhdGFfVGlsZVNvbGlkCk1hcFRpbGVHZXRSb3RhdGlvbgpNYXBUaWxlVG9VVgpNYXBUaWxlV2hvbGVUb01hcFRpbGVDZW50ZXJRMTYKTWFwVGlsZVhMZXZlbApNYXBUb1dvcmxkCk1hcFVwZGF0ZVNoYWRvdwpNYXRyaXhfRmxvYXQ0X1RpbWVzX1ZlYzQKUGFydGljbGVEcmF3ClBhcnRpY2xlVXBkYXRlClBlZXBEcmF3ClBlZXBEcml2ZVBoeXNpY3MKUGVlcEdldE1hcFRpbGUKUGVlcE1hcFRpbGVDb2xsaXNpb25zClBlZXBNYXBWaXNpYmxpdHkKUGVlcFBlZXBQaHlzaWNzClBlZXBQcmVVcGRhdGUxClBlZXBQcmVVcGRhdGUyClBlZXBQcmludApQZWVwVG9QZWVwSW50ZXJhY3Rpb24KUGVlcFVwZGF0ZQpQcmludEZsb2F0MgpQcmludEZsb2F0MwpQcmludEZsb2F0NApQcmludE1vdXNlU3RhdGUKUHJpbnRTZWxlY3Rpb25QZWVwU3RhdHMKUHJpbnRfR0VfSU5UMgpQcmludF9HRV9JTlQzClByaW50X0dFX1NIT1JUMwpQcmludF9HRV9VSU5UMwpSZWdpb25Db2xsaXNpb24KU09NRV9JTlRFUk5BTF9DT1JESVNUClN0YXJ0dXBUZXN0cwpUaGlzQ2xpZW50ClRyaWFuZ2xlM0RIZWF2eV9DbG9zZXN0UG9pbnQKVHJpYW5nbGUzRE1ha2VIZWF2eQpUcmlhbmdsZTNEX01ha2UyRmFjZQpUcmlhbmdsZTNEX1RvQmFyeUNlbnRyaWMKVXBkYXRlTWFwRXhwbG9yZXIKV2Fsa0FuZEZpZ2h0CldvcmxkVG9NYXAKZ2FtZV9hcHBseV9hY3Rpb25zCmdhbWVfaW5pdF9tdWx0aQpnYW1lX2luaXRfbXVsdGkyCmdhbWVfaW5pdF9zaW5nbGUKZ2FtZV9pbml0X3NpbmdsZTIKZ2FtZV9wb3N0X3VwZGF0ZV9zaW5nbGUKZ2FtZV9wcmV1cGRhdGVfMQpnYW1lX3ByZXVwZGF0ZV8yCmdhbWVfdXBkYXRlCmdhbWVfdXBkYXRlMgpnYW1lX3VwZGF0ZXByZTEKc2l6ZV90ZXN0c19rZXJuZWwAAAAAAAAAAI4KAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPwIAAAAAAAACwkAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\clGame.c",
						"symkeys":
						[
							[
								251,
								261
							],
							[
								357,
								370
							],
							[
								426,
								439
							],
							[
								503,
								517
							],
							[
								582,
								597
							],
							[
								663,
								674
							],
							[
								729,
								740
							],
							[
								803,
								814
							],
							[
								898,
								924
							],
							[
								1146,
								1172
							],
							[
								1604,
								1618
							],
							[
								1717,
								1731
							],
							[
								1902,
								1920
							],
							[
								2023,
								2049
							],
							[
								2182,
								2201
							],
							[
								2348,
								2360
							],
							[
								3661,
								3690
							],
							[
								4259,
								4284
							],
							[
								4514,
								4537
							],
							[
								4652,
								4673
							],
							[
								4854,
								4875
							],
							[
								4980,
								5004
							],
							[
								5183,
								5198
							],
							[
								5451,
								5472
							],
							[
								5751,
								5768
							],
							[
								6020,
								6033
							],
							[
								6306,
								6319
							],
							[
								6532,
								6556
							],
							[
								6903,
								6924
							],
							[
								8456,
								8480
							],
							[
								9310,
								9331
							],
							[
								9942,
								9962
							],
							[
								10228,
								10245
							],
							[
								10413,
								10440
							],
							[
								11220,
								11256
							],
							[
								11829,
								11846
							],
							[
								12110,
								12124
							],
							[
								12239,
								12264
							],
							[
								13427,
								13455
							],
							[
								14563,
								14579
							],
							[
								14720,
								14744
							],
							[
								16051,
								16070
							],
							[
								16361,
								16380
							],
							[
								16684,
								16700
							],
							[
								16875,
								16892
							],
							[
								17071,
								17086
							],
							[
								17261,
								17283
							],
							[
								18035,
								18054
							],
							[
								18396,
								18410
							],
							[
								18701,
								18731
							],
							[
								19187,
								19208
							],
							[
								19383,
								19408
							],
							[
								19691,
								19720
							],
							[
								19895,
								19914
							],
							[
								20110,
								20133
							],
							[
								20255,
								20277
							],
							[
								20591,
								20615
							],
							[
								20934,
								20948
							],
							[
								21284,
								21303
							],
							[
								21452,
								21472
							],
							[
								21764,
								21792
							],
							[
								22196,
								22214
							],
							[
								25595,
								25617
							],
							[
								27588,
								27612
							],
							[
								33173,
								33196
							],
							[
								34795,
								34823
							],
							[
								35069,
								35096
							],
							[
								35326,
								35350
							],
							[
								35575,
								35616
							],
							[
								36967,
								36989
							],
							[
								39578,
								39602
							],
							[
								40147,
								40170
							],
							[
								41439,
								41463
							],
							[
								41837,
								41863
							],
							[
								42281,
								42308
							],
							[
								42619,
								42640
							],
							[
								42784,
								42808
							],
							[
								43553,
								43581
							],
							[
								47508,
								47527
							],
							[
								48086,
								48106
							],
							[
								48579,
								48610
							],
							[
								51589,
								51598
							],
							[
								51670,
								51685
							],
							[
								53747,
								53768
							],
							[
								54290,
								54300
							],
							[
								54676,
								54686
							],
							[
								55023,
								55037
							],
							[
								56542,
								56557
							],
							[
								57293,
								57330
							],
							[
								58067,
								58096
							],
							[
								58818,
								58839
							],
							[
								66457,
								66473
							],
							[
								69777,
								69789
							],
							[
								71502,
								71516
							],
							[
								71578,
								71592
							],
							[
								73485,
								73501
							],
							[
								75229,
								75239
							],
							[
								79785,
								79799
							],
							[
								79956,
								79971
							],
							[
								83299,
								83315
							],
							[
								88018,
								88039
							],
							[
								88576,
								88599
							],
							[
								92047,
								92064
							],
							[
								92319,
								92345
							],
							[
								93491,
								93505
							],
							[
								94319,
								94333
							],
							[
								94502,
								94526
							],
							[
								94968,
								94987
							],
							[
								96448,
								96464
							],
							[
								96796,
								96807
							],
							[
								96994,
								97009
							],
							[
								97734,
								97752
							],
							[
								117576,
								117606
							],
							[
								117823,
								117837
							],
							[
								121562,
								121571
							],
							[
								124347,
								124357
							],
							[
								124549,
								124561
							],
							[
								126682,
								126698
							],
							[
								127181,
								127199
							],
							[
								127555,
								127578
							],
							[
								127871,
								127887
							],
							[
								129244,
								129259
							],
							[
								129444,
								129460
							],
							[
								129645,
								129662
							],
							[
								134269,
								134286
							],
							[
								134365,
								134373
							],
							[
								136765,
								136777
							],
							[
								137765,
								137780
							],
							[
								138179,
								138190
							],
							[
								139546,
								139558
							],
							[
								140756,
								140779
							],
							[
								142799,
								142815
							],
							[
								143771,
								143787
							],
							[
								146101,
								146118
							]
						],
						"symlist":
						[
							"ThisClient",
							"Print_GE_INT2",
							"Print_GE_INT3",
							"Print_GE_UINT3",
							"Print_GE_SHORT3",
							"PrintFloat2",
							"PrintFloat3",
							"PrintFloat4",
							"BITBANK_GET_SUBNUMBER_UINT",
							"BITBANK_SET_SUBNUMBER_UINT",
							"MapDataGetTile",
							"MapDataSetTile",
							"MapTileGetRotation",
							"MapGetDataPointerFromCoord",
							"MapGetTileFromCoord",
							"MapRidgeType",
							"MapDataHas2LowAdjacentCorners",
							"MapHas2LowAdjacentCorners",
							"MapTileDataHasLowCorner",
							"MapTileData_TileSolid",
							"MapTileData_PeepCount",
							"MapTileData_SetPeepCount",
							"MapHasLowCorner",
							"MapDataLowCornerCount",
							"MapLowCornerCount",
							"MapDataXLevel",
							"MapTileXLevel",
							"MapTileCoordStandInValid",
							"MapTileCoordEnterable",
							"Machine_InitDescriptions",
							"Machine_CreateMachine",
							"AStarNodeInstantiate",
							"AStarInitPathNode",
							"AStarSearch_BFS_Instantiate",
							"AStarSearch_BFS_InstantiateParrallel",
							"MapTileCoordValid",
							"AStarNodeValid",
							"AStarNode2NodeTraversible",
							"MakeCardinalDirectionOffsets",
							"AStarOpenHeapKey",
							"AStarOpenHeapTrickleDown",
							"AStarOpenHeapRemove",
							"AStarRemoveFromOpen",
							"AStarAddToClosed",
							"AStarNodeInClosed",
							"AStarNodeInOpen",
							"AStarOpenHeapTrickleUp",
							"AStarOpenHeapInsert",
							"AStarAddToOpen",
							"AStarPathStepsNextFreePathNode",
							"AStarRemoveFromClosed",
							"AStarNodeDistanceHuristic",
							"AStarNodeDistanceHuristic_IDA",
							"AStarPrintNodeStats",
							"AStarPrintPathNodeStats",
							"AStarPrintSearchPathTo",
							"AStarPrintSearchPathFrom",
							"AStarPrintPath",
							"GE_INT3_ENTRY_COUNT",
							"GE_INT3_SINGLE_ENTRY",
							"GE_INT3_WHACHAMACOLIT1_ENTRY",
							"AStarFormPathSteps",
							"AStarFormPathSteps_IDA",
							"AStarSearch_BFS_Continue",
							"AStarSearch_BFS_Routine",
							"AStarSearch_IDA_Node_In_Path",
							"AStarSearch_IDA_Loc_In_Path",
							"AStarSearch_IDA_InitNode",
							"AStarSearch_IDA_NodeGrabNextBestSuccessor",
							"AStarSearch_IDA_Search",
							"AStarSearch_IDA_Continue",
							"AStarSearch_IDA_Routine",
							"AStarPathNode_GetMapData",
							"AStarPathNode_LastPathNode",
							"BaryCentric_In_Triangle_Q16",
							"SOME_INTERNAL_CORDIST",
							"Triangle3D_ToBaryCentric",
							"Triangle3DHeavy_ClosestPoint",
							"Triangle3DMakeHeavy",
							"Triangle3D_Make2Face",
							"MapTileConvexHull_From_TileData",
							"PeepPrint",
							"PeepPeepPhysics",
							"PeepToPeepInteraction",
							"WorldToMap",
							"MapToWorld",
							"PeepGetMapTile",
							"RegionCollision",
							"MapTileConvexHull_ClosestPointToPoint",
							"MapTileConvexHull_PointInside",
							"PeepMapTileCollisions",
							"PeepDrivePhysics",
							"WalkAndFight",
							"PeepPreUpdate1",
							"PeepPreUpdate2",
							"PeepMapVisiblity",
							"PeepUpdate",
							"ParticleUpdate",
							"MapUpdateShadow",
							"MapBuildTileView",
							"MapBuildTileView3Area",
							"PrintSelectionPeepStats",
							"MapTileCoordClamp",
							"GetMapTileCoordFromWorld2D",
							"LINES_DrawLine",
							"LINES_ClearAll",
							"Matrix_Float4_Times_Vec4",
							"LINES_DrawLineWorld",
							"GUI_TO_WORLD_Q16",
							"MapTileToUV",
							"PrintMouseState",
							"game_apply_actions",
							"MapTileWholeToMapTileCenterQ16",
							"MapCreateSlope",
							"MapCreate",
							"MapCreate2",
							"StartupTests",
							"MapExplorerSpawn",
							"AStarPathStepsInit",
							"CLIENT_InitClientStates",
							"game_init_single",
							"game_init_multi",
							"game_init_multi2",
							"game_init_single2",
							"UpdateMapExplorer",
							"PeepDraw",
							"ParticleDraw",
							"game_updatepre1",
							"game_update",
							"game_update2",
							"game_post_update_single",
							"game_preupdate_1",
							"game_preupdate_2",
							"size_tests_kernel"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACOCgAAQVN0YXJBZGRUb0Nsb3NlZApBU3RhckFkZFRvT3BlbgpBU3RhckZvcm1QYXRoU3RlcHMKQVN0YXJGb3JtUGF0aFN0ZXBzX0lEQQpBU3RhckluaXRQYXRoTm9kZQpBU3Rhck5vZGUyTm9kZVRyYXZlcnNpYmxlCkFTdGFyTm9kZURpc3RhbmNlSHVyaXN0aWMKQVN0YXJOb2RlRGlzdGFuY2VIdXJpc3RpY19JREEKQVN0YXJOb2RlSW5DbG9zZWQKQVN0YXJOb2RlSW5PcGVuCkFTdGFyTm9kZUluc3RhbnRpYXRlCkFTdGFyTm9kZVZhbGlkCkFTdGFyT3BlbkhlYXBJbnNlcnQKQVN0YXJPcGVuSGVhcEtleQpBU3Rhck9wZW5IZWFwUmVtb3ZlCkFTdGFyT3BlbkhlYXBUcmlja2xlRG93bgpBU3Rhck9wZW5IZWFwVHJpY2tsZVVwCkFTdGFyUGF0aE5vZGVfR2V0TWFwRGF0YQpBU3RhclBhdGhOb2RlX0xhc3RQYXRoTm9kZQpBU3RhclBhdGhTdGVwc0luaXQKQVN0YXJQYXRoU3RlcHNOZXh0RnJlZVBhdGhOb2RlCkFTdGFyUHJpbnROb2RlU3RhdHMKQVN0YXJQcmludFBhdGgKQVN0YXJQcmludFBhdGhOb2RlU3RhdHMKQVN0YXJQcmludFNlYXJjaFBhdGhGcm9tCkFTdGFyUHJpbnRTZWFyY2hQYXRoVG8KQVN0YXJSZW1vdmVGcm9tQ2xvc2VkCkFTdGFyUmVtb3ZlRnJvbU9wZW4KQVN0YXJTZWFyY2hfQkZTX0NvbnRpbnVlCkFTdGFyU2VhcmNoX0JGU19JbnN0YW50aWF0ZQpBU3RhclNlYXJjaF9CRlNfSW5zdGFudGlhdGVQYXJyYWxsZWwKQVN0YXJTZWFyY2hfQkZTX1JvdXRpbmUKQVN0YXJTZWFyY2hfSURBX0NvbnRpbnVlCkFTdGFyU2VhcmNoX0lEQV9Jbml0Tm9kZQpBU3RhclNlYXJjaF9JREFfTG9jX0luX1BhdGgKQVN0YXJTZWFyY2hfSURBX05vZGVHcmFiTmV4dEJlc3RTdWNjZXNzb3IKQVN0YXJTZWFyY2hfSURBX05vZGVfSW5fUGF0aApBU3RhclNlYXJjaF9JREFfUm91dGluZQpBU3RhclNlYXJjaF9JREFfU2VhcmNoCkJJVEJBTktfR0VUX1NVQk5VTUJFUl9VSU5UCkJJVEJBTktfU0VUX1NVQk5VTUJFUl9VSU5UCkJhcnlDZW50cmljX0luX1RyaWFuZ2xlX1ExNgpDTElFTlRfSW5pdENsaWVudFN0YXRlcwpHRV9JTlQzX0VOVFJZX0NPVU5UCkdFX0lOVDNfU0lOR0xFX0VOVFJZCkdFX0lOVDNfV0hBQ0hBTUFDT0xJVDFfRU5UUlkKR1VJX1RPX1dPUkxEX1ExNgpHZXRNYXBUaWxlQ29vcmRGcm9tV29ybGQyRApMSU5FU19DbGVhckFsbApMSU5FU19EcmF3TGluZQpMSU5FU19EcmF3TGluZVdvcmxkCk1hY2hpbmVfQ3JlYXRlTWFjaGluZQpNYWNoaW5lX0luaXREZXNjcmlwdGlvbnMKTWFrZUNhcmRpbmFsRGlyZWN0aW9uT2Zmc2V0cwpNYXBCdWlsZFRpbGVWaWV3Ck1hcEJ1aWxkVGlsZVZpZXczQXJlYQpNYXBDcmVhdGUKTWFwQ3JlYXRlMgpNYXBDcmVhdGVTbG9wZQpNYXBEYXRhR2V0VGlsZQpNYXBEYXRhSGFzMkxvd0FkamFjZW50Q29ybmVycwpNYXBEYXRhTG93Q29ybmVyQ291bnQKTWFwRGF0YVNldFRpbGUKTWFwRGF0YVhMZXZlbApNYXBFeHBsb3JlclNwYXduCk1hcEdldERhdGFQb2ludGVyRnJvbUNvb3JkCk1hcEdldFRpbGVGcm9tQ29vcmQKTWFwSGFzMkxvd0FkamFjZW50Q29ybmVycwpNYXBIYXNMb3dDb3JuZXIKTWFwTG93Q29ybmVyQ291bnQKTWFwUmlkZ2VUeXBlCk1hcFRpbGVDb252ZXhIdWxsX0Nsb3Nlc3RQb2ludFRvUG9pbnQKTWFwVGlsZUNvbnZleEh1bGxfRnJvbV9UaWxlRGF0YQpNYXBUaWxlQ29udmV4SHVsbF9Qb2ludEluc2lkZQpNYXBUaWxlQ29vcmRDbGFtcApNYXBUaWxlQ29vcmRFbnRlcmFibGUKTWFwVGlsZUNvb3JkU3RhbmRJblZhbGlkCk1hcFRpbGVDb29yZFZhbGlkCk1hcFRpbGVEYXRhSGFzTG93Q29ybmVyCk1hcFRpbGVEYXRhX1BlZXBDb3VudApNYXBUaWxlRGF0YV9TZXRQZWVwQ291bnQKTWFwVGlsZURhdGFfVGlsZVNvbGlkCk1hcFRpbGVHZXRSb3RhdGlvbgpNYXBUaWxlVG9VVgpNYXBUaWxlV2hvbGVUb01hcFRpbGVDZW50ZXJRMTYKTWFwVGlsZVhMZXZlbApNYXBUb1dvcmxkCk1hcFVwZGF0ZVNoYWRvdwpNYXRyaXhfRmxvYXQ0X1RpbWVzX1ZlYzQKUGFydGljbGVEcmF3ClBhcnRpY2xlVXBkYXRlClBlZXBEcmF3ClBlZXBEcml2ZVBoeXNpY3MKUGVlcEdldE1hcFRpbGUKUGVlcE1hcFRpbGVDb2xsaXNpb25zClBlZXBNYXBWaXNpYmxpdHkKUGVlcFBlZXBQaHlzaWNzClBlZXBQcmVVcGRhdGUxClBlZXBQcmVVcGRhdGUyClBlZXBQcmludApQZWVwVG9QZWVwSW50ZXJhY3Rpb24KUGVlcFVwZGF0ZQpQcmludEZsb2F0MgpQcmludEZsb2F0MwpQcmludEZsb2F0NApQcmludE1vdXNlU3RhdGUKUHJpbnRTZWxlY3Rpb25QZWVwU3RhdHMKUHJpbnRfR0VfSU5UMgpQcmludF9HRV9JTlQzClByaW50X0dFX1NIT1JUMwpQcmludF9HRV9VSU5UMwpSZWdpb25Db2xsaXNpb24KU09NRV9JTlRFUk5BTF9DT1JESVNUClN0YXJ0dXBUZXN0cwpUaGlzQ2xpZW50ClRyaWFuZ2xlM0RIZWF2eV9DbG9zZXN0UG9pbnQKVHJpYW5nbGUzRE1ha2VIZWF2eQpUcmlhbmdsZTNEX01ha2UyRmFjZQpUcmlhbmdsZTNEX1RvQmFyeUNlbnRyaWMKVXBkYXRlTWFwRXhwbG9yZXIKV2Fsa0FuZEZpZ2h0CldvcmxkVG9NYXAKZ2FtZV9hcHBseV9hY3Rpb25zCmdhbWVfaW5pdF9tdWx0aQpnYW1lX2luaXRfbXVsdGkyCmdhbWVfaW5pdF9zaW5nbGUKZ2FtZV9pbml0X3NpbmdsZTIKZ2FtZV9wb3N0X3VwZGF0ZV9zaW5nbGUKZ2FtZV9wcmV1cGRhdGVfMQpnYW1lX3ByZXVwZGF0ZV8yCmdhbWVfdXBkYXRlCmdhbWVfdXBkYXRlMgpnYW1lX3VwZGF0ZXByZTEKc2l6ZV90ZXN0c19rZXJuZWwAAAAAAAAAAI4KAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPwIAAAAAAAACwkAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\peep.h",
						"symkeys":
						[
							[
								512,
								532
							],
							[
								714,
								738
							],
							[
								945,
								958
							],
							[
								1065,
								1080
							],
							[
								1140,
								1153
							],
							[
								1268,
								1284
							],
							[
								1459,
								1475
							],
							[
								1694,
								1718
							],
							[
								2139,
								2145
							],
							[
								2203,
								2211
							],
							[
								2270,
								2276
							],
							[
								2332,
								2341
							],
							[
								2442,
								2460
							],
							[
								2566,
								2581
							],
							[
								2733,
								2748
							],
							[
								2761,
								2772
							],
							[
								2888,
								2899
							],
							[
								2995,
								3011
							],
							[
								3057,
								3073
							],
							[
								3084,
								3102
							],
							[
								3131,
								3149
							],
							[
								3164,
								3177
							],
							[
								3254,
								3267
							],
							[
								3277,
								3289
							],
							[
								3474,
								3486
							],
							[
								3498,
								3509
							],
							[
								3698,
								3709
							],
							[
								3720,
								3737
							],
							[
								3834,
								3851
							],
							[
								3863,
								3867
							],
							[
								4322,
								4326
							],
							[
								4338,
								4346
							],
							[
								4387,
								4395
							],
							[
								4406,
								4416
							],
							[
								4452,
								4462
							],
							[
								4472,
								4487
							],
							[
								4589,
								4604
							],
							[
								4615,
								4625
							],
							[
								4669,
								4679
							],
							[
								4691,
								4707
							],
							[
								4740,
								4756
							],
							[
								4765,
								4777
							],
							[
								5155,
								5167
							],
							[
								5178,
								5185
							],
							[
								5822,
								5829
							],
							[
								5840,
								5848
							],
							[
								6081,
								6089
							],
							[
								6099,
								6102
							],
							[
								6182,
								6185
							],
							[
								6229,
								6238
							],
							[
								6378,
								6387
							],
							[
								6398,
								6407
							],
							[
								6510,
								6519
							],
							[
								6527,
								6551
							],
							[
								6705,
								6729
							],
							[
								6792,
								6807
							],
							[
								7136,
								7151
							],
							[
								7161,
								7174
							],
							[
								7250,
								7263
							],
							[
								7322,
								7337
							],
							[
								7535,
								7550
							],
							[
								7562,
								7574
							],
							[
								7627,
								7639
							],
							[
								7690,
								7707
							],
							[
								7788,
								7805
							],
							[
								7904,
								7918
							],
							[
								8059,
								8073
							],
							[
								8083,
								8100
							],
							[
								8145,
								8162
							],
							[
								8185,
								8194
							],
							[
								8311,
								8320
							],
							[
								8329,
								8341
							],
							[
								8426,
								8438
							],
							[
								8448,
								8457
							],
							[
								8503,
								8512
							],
							[
								8522,
								8533
							],
							[
								8730,
								8741
							],
							[
								8781,
								8788
							],
							[
								8943,
								8950
							],
							[
								8958,
								8970
							],
							[
								9083,
								9095
							],
							[
								9105,
								9110
							],
							[
								9167,
								9172
							],
							[
								9195,
								9206
							],
							[
								9300,
								9311
							],
							[
								9323,
								9346
							],
							[
								9705,
								9728
							],
							[
								9742,
								9751
							],
							[
								10273,
								10282
							],
							[
								10293,
								10303
							],
							[
								10349,
								10359
							]
						],
						"symlist":
						[
							"CL_CHECKED_ARRAY_SET",
							"CL_CHECKED_ARRAY_GET_PTR",
							"CL_CHECK_NULL",
							"CL_THROW_ASSERT",
							"OFFSET_TO_PTR",
							"OFFSET_TO_PTR_2D",
							"OFFSET_TO_PTR_3D",
							"CHECKED_OFFSET_TO_PTR_3D",
							"BITSET",
							"BITCLEAR",
							"BITGET",
							"BITGET_MF",
							"PeepState_BitFlags",
							"PeepState_Basic",
							"PeepState_Basic",
							"BasePhysics",
							"BasePhysics",
							"LinearConstraint",
							"LinearConstraint",
							"PhysicsCircleShape",
							"PhysicsCircleShape",
							"AStarPathNode",
							"AStarPathNode",
							"DrivePhysics",
							"DrivePhysics",
							"PeepPhysics",
							"PeepPhysics",
							"PeepCommunication",
							"PeepCommunication",
							"Peep",
							"Peep",
							"Particle",
							"Particle",
							"Triangle3D",
							"Triangle3D",
							"Triangle3DHeavy",
							"Triangle3DHeavy",
							"ConvexHull",
							"ConvexHull",
							"MapExplorerAgent",
							"MapExplorerAgent",
							"MapTileFlags",
							"MapTileFlags",
							"MapTile",
							"MapTile",
							"MapLevel",
							"MapLevel",
							"Map",
							"Map",
							"MapSector",
							"MapSector",
							"AStarNode",
							"AStarNode",
							"AStarPathFindingProgress",
							"AStarPathFindingProgress",
							"AStarSearch_BFS",
							"AStarSearch_BFS",
							"AStarNode_IDA",
							"AStarNode_IDA",
							"AStarSearch_IDA",
							"AStarSearch_IDA",
							"AStarPathJob",
							"AStarPathJob",
							"AStarJobScheduler",
							"AStarJobScheduler",
							"AStarPathSteps",
							"AStarPathSteps",
							"PeepRenderSupport",
							"PeepRenderSupport",
							"ItemTypes",
							"ItemTypes",
							"MachineTypes",
							"MachineTypes",
							"Inventory",
							"Inventory",
							"MachineDesc",
							"MachineDesc",
							"Machine",
							"Machine",
							"OrderActions",
							"OrderActions",
							"Order",
							"Order",
							"EditorTools",
							"EditorTools",
							"SynchronizedClientState",
							"SynchronizedClientState",
							"GameState",
							"GameState",
							"StaticData",
							"StaticData"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACOCgAAQVN0YXJBZGRUb0Nsb3NlZApBU3RhckFkZFRvT3BlbgpBU3RhckZvcm1QYXRoU3RlcHMKQVN0YXJGb3JtUGF0aFN0ZXBzX0lEQQpBU3RhckluaXRQYXRoTm9kZQpBU3Rhck5vZGUyTm9kZVRyYXZlcnNpYmxlCkFTdGFyTm9kZURpc3RhbmNlSHVyaXN0aWMKQVN0YXJOb2RlRGlzdGFuY2VIdXJpc3RpY19JREEKQVN0YXJOb2RlSW5DbG9zZWQKQVN0YXJOb2RlSW5PcGVuCkFTdGFyTm9kZUluc3RhbnRpYXRlCkFTdGFyTm9kZVZhbGlkCkFTdGFyT3BlbkhlYXBJbnNlcnQKQVN0YXJPcGVuSGVhcEtleQpBU3Rhck9wZW5IZWFwUmVtb3ZlCkFTdGFyT3BlbkhlYXBUcmlja2xlRG93bgpBU3Rhck9wZW5IZWFwVHJpY2tsZVVwCkFTdGFyUGF0aE5vZGVfR2V0TWFwRGF0YQpBU3RhclBhdGhOb2RlX0xhc3RQYXRoTm9kZQpBU3RhclBhdGhTdGVwc0luaXQKQVN0YXJQYXRoU3RlcHNOZXh0RnJlZVBhdGhOb2RlCkFTdGFyUHJpbnROb2RlU3RhdHMKQVN0YXJQcmludFBhdGgKQVN0YXJQcmludFBhdGhOb2RlU3RhdHMKQVN0YXJQcmludFNlYXJjaFBhdGhGcm9tCkFTdGFyUHJpbnRTZWFyY2hQYXRoVG8KQVN0YXJSZW1vdmVGcm9tQ2xvc2VkCkFTdGFyUmVtb3ZlRnJvbU9wZW4KQVN0YXJTZWFyY2hfQkZTX0NvbnRpbnVlCkFTdGFyU2VhcmNoX0JGU19JbnN0YW50aWF0ZQpBU3RhclNlYXJjaF9CRlNfSW5zdGFudGlhdGVQYXJyYWxsZWwKQVN0YXJTZWFyY2hfQkZTX1JvdXRpbmUKQVN0YXJTZWFyY2hfSURBX0NvbnRpbnVlCkFTdGFyU2VhcmNoX0lEQV9Jbml0Tm9kZQpBU3RhclNlYXJjaF9JREFfTG9jX0luX1BhdGgKQVN0YXJTZWFyY2hfSURBX05vZGVHcmFiTmV4dEJlc3RTdWNjZXNzb3IKQVN0YXJTZWFyY2hfSURBX05vZGVfSW5fUGF0aApBU3RhclNlYXJjaF9JREFfUm91dGluZQpBU3RhclNlYXJjaF9JREFfU2VhcmNoCkJJVEJBTktfR0VUX1NVQk5VTUJFUl9VSU5UCkJJVEJBTktfU0VUX1NVQk5VTUJFUl9VSU5UCkJhcnlDZW50cmljX0luX1RyaWFuZ2xlX1ExNgpDTElFTlRfSW5pdENsaWVudFN0YXRlcwpHRV9JTlQzX0VOVFJZX0NPVU5UCkdFX0lOVDNfU0lOR0xFX0VOVFJZCkdFX0lOVDNfV0hBQ0hBTUFDT0xJVDFfRU5UUlkKR1VJX1RPX1dPUkxEX1ExNgpHZXRNYXBUaWxlQ29vcmRGcm9tV29ybGQyRApMSU5FU19DbGVhckFsbApMSU5FU19EcmF3TGluZQpMSU5FU19EcmF3TGluZVdvcmxkCk1hY2hpbmVfQ3JlYXRlTWFjaGluZQpNYWNoaW5lX0luaXREZXNjcmlwdGlvbnMKTWFrZUNhcmRpbmFsRGlyZWN0aW9uT2Zmc2V0cwpNYXBCdWlsZFRpbGVWaWV3Ck1hcEJ1aWxkVGlsZVZpZXczQXJlYQpNYXBDcmVhdGUKTWFwQ3JlYXRlMgpNYXBDcmVhdGVTbG9wZQpNYXBEYXRhR2V0VGlsZQpNYXBEYXRhSGFzMkxvd0FkamFjZW50Q29ybmVycwpNYXBEYXRhTG93Q29ybmVyQ291bnQKTWFwRGF0YVNldFRpbGUKTWFwRGF0YVhMZXZlbApNYXBFeHBsb3JlclNwYXduCk1hcEdldERhdGFQb2ludGVyRnJvbUNvb3JkCk1hcEdldFRpbGVGcm9tQ29vcmQKTWFwSGFzMkxvd0FkamFjZW50Q29ybmVycwpNYXBIYXNMb3dDb3JuZXIKTWFwTG93Q29ybmVyQ291bnQKTWFwUmlkZ2VUeXBlCk1hcFRpbGVDb252ZXhIdWxsX0Nsb3Nlc3RQb2ludFRvUG9pbnQKTWFwVGlsZUNvbnZleEh1bGxfRnJvbV9UaWxlRGF0YQpNYXBUaWxlQ29udmV4SHVsbF9Qb2ludEluc2lkZQpNYXBUaWxlQ29vcmRDbGFtcApNYXBUaWxlQ29vcmRFbnRlcmFibGUKTWFwVGlsZUNvb3JkU3RhbmRJblZhbGlkCk1hcFRpbGVDb29yZFZhbGlkCk1hcFRpbGVEYXRhSGFzTG93Q29ybmVyCk1hcFRpbGVEYXRhX1BlZXBDb3VudApNYXBUaWxlRGF0YV9TZXRQZWVwQ291bnQKTWFwVGlsZURhdGFfVGlsZVNvbGlkCk1hcFRpbGVHZXRSb3RhdGlvbgpNYXBUaWxlVG9VVgpNYXBUaWxlV2hvbGVUb01hcFRpbGVDZW50ZXJRMTYKTWFwVGlsZVhMZXZlbApNYXBUb1dvcmxkCk1hcFVwZGF0ZVNoYWRvdwpNYXRyaXhfRmxvYXQ0X1RpbWVzX1ZlYzQKUGFydGljbGVEcmF3ClBhcnRpY2xlVXBkYXRlClBlZXBEcmF3ClBlZXBEcml2ZVBoeXNpY3MKUGVlcEdldE1hcFRpbGUKUGVlcE1hcFRpbGVDb2xsaXNpb25zClBlZXBNYXBWaXNpYmxpdHkKUGVlcFBlZXBQaHlzaWNzClBlZXBQcmVVcGRhdGUxClBlZXBQcmVVcGRhdGUyClBlZXBQcmludApQZWVwVG9QZWVwSW50ZXJhY3Rpb24KUGVlcFVwZGF0ZQpQcmludEZsb2F0MgpQcmludEZsb2F0MwpQcmludEZsb2F0NApQcmludE1vdXNlU3RhdGUKUHJpbnRTZWxlY3Rpb25QZWVwU3RhdHMKUHJpbnRfR0VfSU5UMgpQcmludF9HRV9JTlQzClByaW50X0dFX1NIT1JUMwpQcmludF9HRV9VSU5UMwpSZWdpb25Db2xsaXNpb24KU09NRV9JTlRFUk5BTF9DT1JESVNUClN0YXJ0dXBUZXN0cwpUaGlzQ2xpZW50ClRyaWFuZ2xlM0RIZWF2eV9DbG9zZXN0UG9pbnQKVHJpYW5nbGUzRE1ha2VIZWF2eQpUcmlhbmdsZTNEX01ha2UyRmFjZQpUcmlhbmdsZTNEX1RvQmFyeUNlbnRyaWMKVXBkYXRlTWFwRXhwbG9yZXIKV2Fsa0FuZEZpZ2h0CldvcmxkVG9NYXAKZ2FtZV9hcHBseV9hY3Rpb25zCmdhbWVfaW5pdF9tdWx0aQpnYW1lX2luaXRfbXVsdGkyCmdhbWVfaW5pdF9zaW5nbGUKZ2FtZV9pbml0X3NpbmdsZTIKZ2FtZV9wb3N0X3VwZGF0ZV9zaW5nbGUKZ2FtZV9wcmV1cGRhdGVfMQpnYW1lX3ByZXVwZGF0ZV8yCmdhbWVfdXBkYXRlCmdhbWVfdXBkYXRlMgpnYW1lX3VwZGF0ZXByZTEKc2l6ZV90ZXN0c19rZXJuZWwAAAAAAAAAAMAEAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPwIAAAAAAAACwkAAAAAAAAAAAAAAADwvw"
				],
				[
					19,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\peep.h",
						"symkeys":
						[
							[
								512,
								532
							],
							[
								714,
								738
							],
							[
								945,
								958
							],
							[
								1065,
								1080
							],
							[
								1140,
								1153
							],
							[
								1268,
								1284
							],
							[
								1459,
								1475
							],
							[
								1694,
								1718
							],
							[
								2139,
								2145
							],
							[
								2203,
								2211
							],
							[
								2270,
								2276
							],
							[
								2332,
								2341
							],
							[
								2442,
								2460
							],
							[
								2566,
								2581
							],
							[
								2733,
								2748
							],
							[
								2761,
								2772
							],
							[
								2888,
								2899
							],
							[
								2995,
								3011
							],
							[
								3057,
								3073
							],
							[
								3084,
								3102
							],
							[
								3131,
								3149
							],
							[
								3164,
								3177
							],
							[
								3254,
								3267
							],
							[
								3277,
								3289
							],
							[
								3474,
								3486
							],
							[
								3498,
								3509
							],
							[
								3698,
								3709
							],
							[
								3720,
								3737
							],
							[
								3834,
								3851
							],
							[
								3863,
								3867
							],
							[
								4322,
								4326
							],
							[
								4338,
								4346
							],
							[
								4387,
								4395
							],
							[
								4406,
								4416
							],
							[
								4452,
								4462
							],
							[
								4472,
								4487
							],
							[
								4589,
								4604
							],
							[
								4615,
								4625
							],
							[
								4669,
								4679
							],
							[
								4691,
								4707
							],
							[
								4740,
								4756
							],
							[
								4765,
								4777
							],
							[
								5155,
								5167
							],
							[
								5178,
								5185
							],
							[
								5822,
								5829
							],
							[
								5840,
								5848
							],
							[
								6081,
								6089
							],
							[
								6099,
								6102
							],
							[
								6182,
								6185
							],
							[
								6229,
								6238
							],
							[
								6378,
								6387
							],
							[
								6398,
								6407
							],
							[
								6510,
								6519
							],
							[
								6527,
								6551
							],
							[
								6705,
								6729
							],
							[
								6792,
								6807
							],
							[
								7136,
								7151
							],
							[
								7161,
								7174
							],
							[
								7250,
								7263
							],
							[
								7322,
								7337
							],
							[
								7535,
								7550
							],
							[
								7562,
								7574
							],
							[
								7627,
								7639
							],
							[
								7690,
								7707
							],
							[
								7788,
								7805
							],
							[
								7904,
								7918
							],
							[
								8059,
								8073
							],
							[
								8083,
								8100
							],
							[
								8145,
								8162
							],
							[
								8185,
								8194
							],
							[
								8311,
								8320
							],
							[
								8329,
								8341
							],
							[
								8426,
								8438
							],
							[
								8448,
								8457
							],
							[
								8503,
								8512
							],
							[
								8522,
								8533
							],
							[
								8730,
								8741
							],
							[
								8781,
								8788
							],
							[
								8943,
								8950
							],
							[
								8958,
								8970
							],
							[
								9083,
								9095
							],
							[
								9105,
								9110
							],
							[
								9167,
								9172
							],
							[
								9195,
								9206
							],
							[
								9300,
								9311
							],
							[
								9323,
								9346
							],
							[
								9705,
								9728
							],
							[
								9742,
								9751
							],
							[
								10273,
								10282
							],
							[
								10293,
								10303
							],
							[
								10349,
								10359
							]
						],
						"symlist":
						[
							"CL_CHECKED_ARRAY_SET",
							"CL_CHECKED_ARRAY_GET_PTR",
							"CL_CHECK_NULL",
							"CL_THROW_ASSERT",
							"OFFSET_TO_PTR",
							"OFFSET_TO_PTR_2D",
							"OFFSET_TO_PTR_3D",
							"CHECKED_OFFSET_TO_PTR_3D",
							"BITSET",
							"BITCLEAR",
							"BITGET",
							"BITGET_MF",
							"PeepState_BitFlags",
							"PeepState_Basic",
							"PeepState_Basic",
							"BasePhysics",
							"BasePhysics",
							"LinearConstraint",
							"LinearConstraint",
							"PhysicsCircleShape",
							"PhysicsCircleShape",
							"AStarPathNode",
							"AStarPathNode",
							"DrivePhysics",
							"DrivePhysics",
							"PeepPhysics",
							"PeepPhysics",
							"PeepCommunication",
							"PeepCommunication",
							"Peep",
							"Peep",
							"Particle",
							"Particle",
							"Triangle3D",
							"Triangle3D",
							"Triangle3DHeavy",
							"Triangle3DHeavy",
							"ConvexHull",
							"ConvexHull",
							"MapExplorerAgent",
							"MapExplorerAgent",
							"MapTileFlags",
							"MapTileFlags",
							"MapTile",
							"MapTile",
							"MapLevel",
							"MapLevel",
							"Map",
							"Map",
							"MapSector",
							"MapSector",
							"AStarNode",
							"AStarNode",
							"AStarPathFindingProgress",
							"AStarPathFindingProgress",
							"AStarSearch_BFS",
							"AStarSearch_BFS",
							"AStarNode_IDA",
							"AStarNode_IDA",
							"AStarSearch_IDA",
							"AStarSearch_IDA",
							"AStarPathJob",
							"AStarPathJob",
							"AStarJobScheduler",
							"AStarJobScheduler",
							"AStarPathSteps",
							"AStarPathSteps",
							"PeepRenderSupport",
							"PeepRenderSupport",
							"ItemTypes",
							"ItemTypes",
							"MachineTypes",
							"MachineTypes",
							"Inventory",
							"Inventory",
							"MachineDesc",
							"MachineDesc",
							"Machine",
							"Machine",
							"OrderActions",
							"OrderActions",
							"Order",
							"Order",
							"EditorTools",
							"EditorTools",
							"SynchronizedClientState",
							"SynchronizedClientState",
							"GameState",
							"GameState",
							"StaticData",
							"StaticData"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADABAAAQVN0YXJKb2JTY2hlZHVsZXIKQVN0YXJKb2JTY2hlZHVsZXIKQVN0YXJOb2RlCkFTdGFyTm9kZQpBU3Rhck5vZGVfSURBCkFTdGFyTm9kZV9JREEKQVN0YXJQYXRoRmluZGluZ1Byb2dyZXNzCkFTdGFyUGF0aEZpbmRpbmdQcm9ncmVzcwpBU3RhclBhdGhKb2IKQVN0YXJQYXRoSm9iCkFTdGFyUGF0aE5vZGUKQVN0YXJQYXRoTm9kZQpBU3RhclBhdGhTdGVwcwpBU3RhclBhdGhTdGVwcwpBU3RhclNlYXJjaF9CRlMKQVN0YXJTZWFyY2hfQkZTCkFTdGFyU2VhcmNoX0lEQQpBU3RhclNlYXJjaF9JREEKQklUQ0xFQVIKQklUR0VUCkJJVEdFVF9NRgpCSVRTRVQKQmFzZVBoeXNpY3MKQmFzZVBoeXNpY3MKQ0hFQ0tFRF9PRkZTRVRfVE9fUFRSXzNECkNMX0NIRUNLRURfQVJSQVlfR0VUX1BUUgpDTF9DSEVDS0VEX0FSUkFZX1NFVApDTF9DSEVDS19OVUxMCkNMX1RIUk9XX0FTU0VSVApDb252ZXhIdWxsCkNvbnZleEh1bGwKRHJpdmVQaHlzaWNzCkRyaXZlUGh5c2ljcwpFZGl0b3JUb29scwpFZGl0b3JUb29scwpHYW1lU3RhdGUKR2FtZVN0YXRlCkludmVudG9yeQpJbnZlbnRvcnkKSXRlbVR5cGVzCkl0ZW1UeXBlcwpMaW5lYXJDb25zdHJhaW50CkxpbmVhckNvbnN0cmFpbnQKTWFjaGluZQpNYWNoaW5lCk1hY2hpbmVEZXNjCk1hY2hpbmVEZXNjCk1hY2hpbmVUeXBlcwpNYWNoaW5lVHlwZXMKTWFwCk1hcApNYXBFeHBsb3JlckFnZW50Ck1hcEV4cGxvcmVyQWdlbnQKTWFwTGV2ZWwKTWFwTGV2ZWwKTWFwU2VjdG9yCk1hcFNlY3RvcgpNYXBUaWxlCk1hcFRpbGUKTWFwVGlsZUZsYWdzCk1hcFRpbGVGbGFncwpPRkZTRVRfVE9fUFRSCk9GRlNFVF9UT19QVFJfMkQKT0ZGU0VUX1RPX1BUUl8zRApPcmRlcgpPcmRlcgpPcmRlckFjdGlvbnMKT3JkZXJBY3Rpb25zClBhcnRpY2xlClBhcnRpY2xlClBlZXAKUGVlcApQZWVwQ29tbXVuaWNhdGlvbgpQZWVwQ29tbXVuaWNhdGlvbgpQZWVwUGh5c2ljcwpQZWVwUGh5c2ljcwpQZWVwUmVuZGVyU3VwcG9ydApQZWVwUmVuZGVyU3VwcG9ydApQZWVwU3RhdGVfQmFzaWMKUGVlcFN0YXRlX0Jhc2ljClBlZXBTdGF0ZV9CaXRGbGFncwpQaHlzaWNzQ2lyY2xlU2hhcGUKUGh5c2ljc0NpcmNsZVNoYXBlClN0YXRpY0RhdGEKU3RhdGljRGF0YQpTeW5jaHJvbml6ZWRDbGllbnRTdGF0ZQpTeW5jaHJvbml6ZWRDbGllbnRTdGF0ZQpUcmlhbmdsZTNEClRyaWFuZ2xlM0QKVHJpYW5nbGUzREhlYXZ5ClRyaWFuZ2xlM0RIZWF2eQAAAAAAAAAAwAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					20,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\clGame.c",
						"symkeys":
						[
							[
								251,
								261
							],
							[
								357,
								370
							],
							[
								426,
								439
							],
							[
								503,
								517
							],
							[
								582,
								597
							],
							[
								663,
								674
							],
							[
								729,
								740
							],
							[
								803,
								814
							],
							[
								898,
								924
							],
							[
								1146,
								1172
							],
							[
								1604,
								1618
							],
							[
								1717,
								1731
							],
							[
								1902,
								1920
							],
							[
								2023,
								2049
							],
							[
								2182,
								2201
							],
							[
								2348,
								2360
							],
							[
								3661,
								3690
							],
							[
								4259,
								4284
							],
							[
								4514,
								4537
							],
							[
								4652,
								4673
							],
							[
								4854,
								4875
							],
							[
								4980,
								5004
							],
							[
								5183,
								5198
							],
							[
								5451,
								5472
							],
							[
								5751,
								5768
							],
							[
								6020,
								6033
							],
							[
								6306,
								6319
							],
							[
								6532,
								6556
							],
							[
								6903,
								6924
							],
							[
								8456,
								8480
							],
							[
								9310,
								9331
							],
							[
								9942,
								9962
							],
							[
								10228,
								10245
							],
							[
								10413,
								10440
							],
							[
								11220,
								11256
							],
							[
								11829,
								11846
							],
							[
								12110,
								12124
							],
							[
								12239,
								12264
							],
							[
								13427,
								13455
							],
							[
								14563,
								14579
							],
							[
								14720,
								14744
							],
							[
								16051,
								16070
							],
							[
								16361,
								16380
							],
							[
								16684,
								16700
							],
							[
								16875,
								16892
							],
							[
								17071,
								17086
							],
							[
								17261,
								17283
							],
							[
								18035,
								18054
							],
							[
								18396,
								18410
							],
							[
								18701,
								18731
							],
							[
								19187,
								19208
							],
							[
								19383,
								19408
							],
							[
								19691,
								19720
							],
							[
								19895,
								19914
							],
							[
								20110,
								20133
							],
							[
								20255,
								20277
							],
							[
								20591,
								20615
							],
							[
								20934,
								20948
							],
							[
								21284,
								21303
							],
							[
								21452,
								21472
							],
							[
								21764,
								21792
							],
							[
								22196,
								22214
							],
							[
								25595,
								25617
							],
							[
								27588,
								27612
							],
							[
								33173,
								33196
							],
							[
								34795,
								34823
							],
							[
								35069,
								35096
							],
							[
								35326,
								35350
							],
							[
								35575,
								35616
							],
							[
								36967,
								36989
							],
							[
								39578,
								39602
							],
							[
								40147,
								40170
							],
							[
								41439,
								41463
							],
							[
								41837,
								41863
							],
							[
								42281,
								42308
							],
							[
								42619,
								42640
							],
							[
								42784,
								42808
							],
							[
								43553,
								43581
							],
							[
								47508,
								47527
							],
							[
								48086,
								48106
							],
							[
								48579,
								48610
							],
							[
								51589,
								51598
							],
							[
								51670,
								51685
							],
							[
								53747,
								53768
							],
							[
								54290,
								54300
							],
							[
								54676,
								54686
							],
							[
								55023,
								55037
							],
							[
								56542,
								56557
							],
							[
								57293,
								57330
							],
							[
								58067,
								58096
							],
							[
								58818,
								58839
							],
							[
								66457,
								66473
							],
							[
								69777,
								69789
							],
							[
								71502,
								71516
							],
							[
								71578,
								71592
							],
							[
								73485,
								73501
							],
							[
								75229,
								75239
							],
							[
								79785,
								79799
							],
							[
								79956,
								79971
							],
							[
								83299,
								83315
							],
							[
								88018,
								88039
							],
							[
								88576,
								88599
							],
							[
								92047,
								92064
							],
							[
								92319,
								92345
							],
							[
								93491,
								93505
							],
							[
								94319,
								94333
							],
							[
								94502,
								94526
							],
							[
								94968,
								94987
							],
							[
								96448,
								96464
							],
							[
								96796,
								96807
							],
							[
								96994,
								97009
							],
							[
								97734,
								97752
							],
							[
								117576,
								117606
							],
							[
								117823,
								117837
							],
							[
								121562,
								121571
							],
							[
								124347,
								124357
							],
							[
								124549,
								124561
							],
							[
								126682,
								126698
							],
							[
								127181,
								127199
							],
							[
								127555,
								127578
							],
							[
								127871,
								127887
							],
							[
								129244,
								129259
							],
							[
								129444,
								129460
							],
							[
								129645,
								129662
							],
							[
								134269,
								134286
							],
							[
								134365,
								134373
							],
							[
								136765,
								136777
							],
							[
								137765,
								137780
							],
							[
								138179,
								138190
							],
							[
								139546,
								139558
							],
							[
								140756,
								140779
							],
							[
								142799,
								142815
							],
							[
								143771,
								143787
							],
							[
								146101,
								146118
							]
						],
						"symlist":
						[
							"ThisClient",
							"Print_GE_INT2",
							"Print_GE_INT3",
							"Print_GE_UINT3",
							"Print_GE_SHORT3",
							"PrintFloat2",
							"PrintFloat3",
							"PrintFloat4",
							"BITBANK_GET_SUBNUMBER_UINT",
							"BITBANK_SET_SUBNUMBER_UINT",
							"MapDataGetTile",
							"MapDataSetTile",
							"MapTileGetRotation",
							"MapGetDataPointerFromCoord",
							"MapGetTileFromCoord",
							"MapRidgeType",
							"MapDataHas2LowAdjacentCorners",
							"MapHas2LowAdjacentCorners",
							"MapTileDataHasLowCorner",
							"MapTileData_TileSolid",
							"MapTileData_PeepCount",
							"MapTileData_SetPeepCount",
							"MapHasLowCorner",
							"MapDataLowCornerCount",
							"MapLowCornerCount",
							"MapDataXLevel",
							"MapTileXLevel",
							"MapTileCoordStandInValid",
							"MapTileCoordEnterable",
							"Machine_InitDescriptions",
							"Machine_CreateMachine",
							"AStarNodeInstantiate",
							"AStarInitPathNode",
							"AStarSearch_BFS_Instantiate",
							"AStarSearch_BFS_InstantiateParrallel",
							"MapTileCoordValid",
							"AStarNodeValid",
							"AStarNode2NodeTraversible",
							"MakeCardinalDirectionOffsets",
							"AStarOpenHeapKey",
							"AStarOpenHeapTrickleDown",
							"AStarOpenHeapRemove",
							"AStarRemoveFromOpen",
							"AStarAddToClosed",
							"AStarNodeInClosed",
							"AStarNodeInOpen",
							"AStarOpenHeapTrickleUp",
							"AStarOpenHeapInsert",
							"AStarAddToOpen",
							"AStarPathStepsNextFreePathNode",
							"AStarRemoveFromClosed",
							"AStarNodeDistanceHuristic",
							"AStarNodeDistanceHuristic_IDA",
							"AStarPrintNodeStats",
							"AStarPrintPathNodeStats",
							"AStarPrintSearchPathTo",
							"AStarPrintSearchPathFrom",
							"AStarPrintPath",
							"GE_INT3_ENTRY_COUNT",
							"GE_INT3_SINGLE_ENTRY",
							"GE_INT3_WHACHAMACOLIT1_ENTRY",
							"AStarFormPathSteps",
							"AStarFormPathSteps_IDA",
							"AStarSearch_BFS_Continue",
							"AStarSearch_BFS_Routine",
							"AStarSearch_IDA_Node_In_Path",
							"AStarSearch_IDA_Loc_In_Path",
							"AStarSearch_IDA_InitNode",
							"AStarSearch_IDA_NodeGrabNextBestSuccessor",
							"AStarSearch_IDA_Search",
							"AStarSearch_IDA_Continue",
							"AStarSearch_IDA_Routine",
							"AStarPathNode_GetMapData",
							"AStarPathNode_LastPathNode",
							"BaryCentric_In_Triangle_Q16",
							"SOME_INTERNAL_CORDIST",
							"Triangle3D_ToBaryCentric",
							"Triangle3DHeavy_ClosestPoint",
							"Triangle3DMakeHeavy",
							"Triangle3D_Make2Face",
							"MapTileConvexHull_From_TileData",
							"PeepPrint",
							"PeepPeepPhysics",
							"PeepToPeepInteraction",
							"WorldToMap",
							"MapToWorld",
							"PeepGetMapTile",
							"RegionCollision",
							"MapTileConvexHull_ClosestPointToPoint",
							"MapTileConvexHull_PointInside",
							"PeepMapTileCollisions",
							"PeepDrivePhysics",
							"WalkAndFight",
							"PeepPreUpdate1",
							"PeepPreUpdate2",
							"PeepMapVisiblity",
							"PeepUpdate",
							"ParticleUpdate",
							"MapUpdateShadow",
							"MapBuildTileView",
							"MapBuildTileView3Area",
							"PrintSelectionPeepStats",
							"MapTileCoordClamp",
							"GetMapTileCoordFromWorld2D",
							"LINES_DrawLine",
							"LINES_ClearAll",
							"Matrix_Float4_Times_Vec4",
							"LINES_DrawLineWorld",
							"GUI_TO_WORLD_Q16",
							"MapTileToUV",
							"PrintMouseState",
							"game_apply_actions",
							"MapTileWholeToMapTileCenterQ16",
							"MapCreateSlope",
							"MapCreate",
							"MapCreate2",
							"StartupTests",
							"MapExplorerSpawn",
							"AStarPathStepsInit",
							"CLIENT_InitClientStates",
							"game_init_single",
							"game_init_multi",
							"game_init_multi2",
							"game_init_single2",
							"UpdateMapExplorer",
							"PeepDraw",
							"ParticleDraw",
							"game_updatepre1",
							"game_update",
							"game_update2",
							"game_post_update_single",
							"game_preupdate_1",
							"game_preupdate_2",
							"size_tests_kernel"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADABAAAQVN0YXJKb2JTY2hlZHVsZXIKQVN0YXJKb2JTY2hlZHVsZXIKQVN0YXJOb2RlCkFTdGFyTm9kZQpBU3Rhck5vZGVfSURBCkFTdGFyTm9kZV9JREEKQVN0YXJQYXRoRmluZGluZ1Byb2dyZXNzCkFTdGFyUGF0aEZpbmRpbmdQcm9ncmVzcwpBU3RhclBhdGhKb2IKQVN0YXJQYXRoSm9iCkFTdGFyUGF0aE5vZGUKQVN0YXJQYXRoTm9kZQpBU3RhclBhdGhTdGVwcwpBU3RhclBhdGhTdGVwcwpBU3RhclNlYXJjaF9CRlMKQVN0YXJTZWFyY2hfQkZTCkFTdGFyU2VhcmNoX0lEQQpBU3RhclNlYXJjaF9JREEKQklUQ0xFQVIKQklUR0VUCkJJVEdFVF9NRgpCSVRTRVQKQmFzZVBoeXNpY3MKQmFzZVBoeXNpY3MKQ0hFQ0tFRF9PRkZTRVRfVE9fUFRSXzNECkNMX0NIRUNLRURfQVJSQVlfR0VUX1BUUgpDTF9DSEVDS0VEX0FSUkFZX1NFVApDTF9DSEVDS19OVUxMCkNMX1RIUk9XX0FTU0VSVApDb252ZXhIdWxsCkNvbnZleEh1bGwKRHJpdmVQaHlzaWNzCkRyaXZlUGh5c2ljcwpFZGl0b3JUb29scwpFZGl0b3JUb29scwpHYW1lU3RhdGUKR2FtZVN0YXRlCkludmVudG9yeQpJbnZlbnRvcnkKSXRlbVR5cGVzCkl0ZW1UeXBlcwpMaW5lYXJDb25zdHJhaW50CkxpbmVhckNvbnN0cmFpbnQKTWFjaGluZQpNYWNoaW5lCk1hY2hpbmVEZXNjCk1hY2hpbmVEZXNjCk1hY2hpbmVUeXBlcwpNYWNoaW5lVHlwZXMKTWFwCk1hcApNYXBFeHBsb3JlckFnZW50Ck1hcEV4cGxvcmVyQWdlbnQKTWFwTGV2ZWwKTWFwTGV2ZWwKTWFwU2VjdG9yCk1hcFNlY3RvcgpNYXBUaWxlCk1hcFRpbGUKTWFwVGlsZUZsYWdzCk1hcFRpbGVGbGFncwpPRkZTRVRfVE9fUFRSCk9GRlNFVF9UT19QVFJfMkQKT0ZGU0VUX1RPX1BUUl8zRApPcmRlcgpPcmRlcgpPcmRlckFjdGlvbnMKT3JkZXJBY3Rpb25zClBhcnRpY2xlClBhcnRpY2xlClBlZXAKUGVlcApQZWVwQ29tbXVuaWNhdGlvbgpQZWVwQ29tbXVuaWNhdGlvbgpQZWVwUGh5c2ljcwpQZWVwUGh5c2ljcwpQZWVwUmVuZGVyU3VwcG9ydApQZWVwUmVuZGVyU3VwcG9ydApQZWVwU3RhdGVfQmFzaWMKUGVlcFN0YXRlX0Jhc2ljClBlZXBTdGF0ZV9CaXRGbGFncwpQaHlzaWNzQ2lyY2xlU2hhcGUKUGh5c2ljc0NpcmNsZVNoYXBlClN0YXRpY0RhdGEKU3RhdGljRGF0YQpTeW5jaHJvbml6ZWRDbGllbnRTdGF0ZQpTeW5jaHJvbml6ZWRDbGllbnRTdGF0ZQpUcmlhbmdsZTNEClRyaWFuZ2xlM0QKVHJpYW5nbGUzREhlYXZ5ClRyaWFuZ2xlM0RIZWF2eQAAAAAAAAAAjgoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADIEAAAAAAAARAQAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACOCgAAQVN0YXJBZGRUb0Nsb3NlZApBU3RhckFkZFRvT3BlbgpBU3RhckZvcm1QYXRoU3RlcHMKQVN0YXJGb3JtUGF0aFN0ZXBzX0lEQQpBU3RhckluaXRQYXRoTm9kZQpBU3Rhck5vZGUyTm9kZVRyYXZlcnNpYmxlCkFTdGFyTm9kZURpc3RhbmNlSHVyaXN0aWMKQVN0YXJOb2RlRGlzdGFuY2VIdXJpc3RpY19JREEKQVN0YXJOb2RlSW5DbG9zZWQKQVN0YXJOb2RlSW5PcGVuCkFTdGFyTm9kZUluc3RhbnRpYXRlCkFTdGFyTm9kZVZhbGlkCkFTdGFyT3BlbkhlYXBJbnNlcnQKQVN0YXJPcGVuSGVhcEtleQpBU3Rhck9wZW5IZWFwUmVtb3ZlCkFTdGFyT3BlbkhlYXBUcmlja2xlRG93bgpBU3Rhck9wZW5IZWFwVHJpY2tsZVVwCkFTdGFyUGF0aE5vZGVfR2V0TWFwRGF0YQpBU3RhclBhdGhOb2RlX0xhc3RQYXRoTm9kZQpBU3RhclBhdGhTdGVwc0luaXQKQVN0YXJQYXRoU3RlcHNOZXh0RnJlZVBhdGhOb2RlCkFTdGFyUHJpbnROb2RlU3RhdHMKQVN0YXJQcmludFBhdGgKQVN0YXJQcmludFBhdGhOb2RlU3RhdHMKQVN0YXJQcmludFNlYXJjaFBhdGhGcm9tCkFTdGFyUHJpbnRTZWFyY2hQYXRoVG8KQVN0YXJSZW1vdmVGcm9tQ2xvc2VkCkFTdGFyUmVtb3ZlRnJvbU9wZW4KQVN0YXJTZWFyY2hfQkZTX0NvbnRpbnVlCkFTdGFyU2VhcmNoX0JGU19JbnN0YW50aWF0ZQpBU3RhclNlYXJjaF9CRlNfSW5zdGFudGlhdGVQYXJyYWxsZWwKQVN0YXJTZWFyY2hfQkZTX1JvdXRpbmUKQVN0YXJTZWFyY2hfSURBX0NvbnRpbnVlCkFTdGFyU2VhcmNoX0lEQV9Jbml0Tm9kZQpBU3RhclNlYXJjaF9JREFfTG9jX0luX1BhdGgKQVN0YXJTZWFyY2hfSURBX05vZGVHcmFiTmV4dEJlc3RTdWNjZXNzb3IKQVN0YXJTZWFyY2hfSURBX05vZGVfSW5fUGF0aApBU3RhclNlYXJjaF9JREFfUm91dGluZQpBU3RhclNlYXJjaF9JREFfU2VhcmNoCkJJVEJBTktfR0VUX1NVQk5VTUJFUl9VSU5UCkJJVEJBTktfU0VUX1NVQk5VTUJFUl9VSU5UCkJhcnlDZW50cmljX0luX1RyaWFuZ2xlX1ExNgpDTElFTlRfSW5pdENsaWVudFN0YXRlcwpHRV9JTlQzX0VOVFJZX0NPVU5UCkdFX0lOVDNfU0lOR0xFX0VOVFJZCkdFX0lOVDNfV0hBQ0hBTUFDT0xJVDFfRU5UUlkKR1VJX1RPX1dPUkxEX1ExNgpHZXRNYXBUaWxlQ29vcmRGcm9tV29ybGQyRApMSU5FU19DbGVhckFsbApMSU5FU19EcmF3TGluZQpMSU5FU19EcmF3TGluZVdvcmxkCk1hY2hpbmVfQ3JlYXRlTWFjaGluZQpNYWNoaW5lX0luaXREZXNjcmlwdGlvbnMKTWFrZUNhcmRpbmFsRGlyZWN0aW9uT2Zmc2V0cwpNYXBCdWlsZFRpbGVWaWV3Ck1hcEJ1aWxkVGlsZVZpZXczQXJlYQpNYXBDcmVhdGUKTWFwQ3JlYXRlMgpNYXBDcmVhdGVTbG9wZQpNYXBEYXRhR2V0VGlsZQpNYXBEYXRhSGFzMkxvd0FkamFjZW50Q29ybmVycwpNYXBEYXRhTG93Q29ybmVyQ291bnQKTWFwRGF0YVNldFRpbGUKTWFwRGF0YVhMZXZlbApNYXBFeHBsb3JlclNwYXduCk1hcEdldERhdGFQb2ludGVyRnJvbUNvb3JkCk1hcEdldFRpbGVGcm9tQ29vcmQKTWFwSGFzMkxvd0FkamFjZW50Q29ybmVycwpNYXBIYXNMb3dDb3JuZXIKTWFwTG93Q29ybmVyQ291bnQKTWFwUmlkZ2VUeXBlCk1hcFRpbGVDb252ZXhIdWxsX0Nsb3Nlc3RQb2ludFRvUG9pbnQKTWFwVGlsZUNvbnZleEh1bGxfRnJvbV9UaWxlRGF0YQpNYXBUaWxlQ29udmV4SHVsbF9Qb2ludEluc2lkZQpNYXBUaWxlQ29vcmRDbGFtcApNYXBUaWxlQ29vcmRFbnRlcmFibGUKTWFwVGlsZUNvb3JkU3RhbmRJblZhbGlkCk1hcFRpbGVDb29yZFZhbGlkCk1hcFRpbGVEYXRhSGFzTG93Q29ybmVyCk1hcFRpbGVEYXRhX1BlZXBDb3VudApNYXBUaWxlRGF0YV9TZXRQZWVwQ291bnQKTWFwVGlsZURhdGFfVGlsZVNvbGlkCk1hcFRpbGVHZXRSb3RhdGlvbgpNYXBUaWxlVG9VVgpNYXBUaWxlV2hvbGVUb01hcFRpbGVDZW50ZXJRMTYKTWFwVGlsZVhMZXZlbApNYXBUb1dvcmxkCk1hcFVwZGF0ZVNoYWRvdwpNYXRyaXhfRmxvYXQ0X1RpbWVzX1ZlYzQKUGFydGljbGVEcmF3ClBhcnRpY2xlVXBkYXRlClBlZXBEcmF3ClBlZXBEcml2ZVBoeXNpY3MKUGVlcEdldE1hcFRpbGUKUGVlcE1hcFRpbGVDb2xsaXNpb25zClBlZXBNYXBWaXNpYmxpdHkKUGVlcFBlZXBQaHlzaWNzClBlZXBQcmVVcGRhdGUxClBlZXBQcmVVcGRhdGUyClBlZXBQcmludApQZWVwVG9QZWVwSW50ZXJhY3Rpb24KUGVlcFVwZGF0ZQpQcmludEZsb2F0MgpQcmludEZsb2F0MwpQcmludEZsb2F0NApQcmludE1vdXNlU3RhdGUKUHJpbnRTZWxlY3Rpb25QZWVwU3RhdHMKUHJpbnRfR0VfSU5UMgpQcmludF9HRV9JTlQzClByaW50X0dFX1NIT1JUMwpQcmludF9HRV9VSU5UMwpSZWdpb25Db2xsaXNpb24KU09NRV9JTlRFUk5BTF9DT1JESVNUClN0YXJ0dXBUZXN0cwpUaGlzQ2xpZW50ClRyaWFuZ2xlM0RIZWF2eV9DbG9zZXN0UG9pbnQKVHJpYW5nbGUzRE1ha2VIZWF2eQpUcmlhbmdsZTNEX01ha2UyRmFjZQpUcmlhbmdsZTNEX1RvQmFyeUNlbnRyaWMKVXBkYXRlTWFwRXhwbG9yZXIKV2Fsa0FuZEZpZ2h0CldvcmxkVG9NYXAKZ2FtZV9hcHBseV9hY3Rpb25zCmdhbWVfaW5pdF9tdWx0aQpnYW1lX2luaXRfbXVsdGkyCmdhbWVfaW5pdF9zaW5nbGUKZ2FtZV9pbml0X3NpbmdsZTIKZ2FtZV9wb3N0X3VwZGF0ZV9zaW5nbGUKZ2FtZV9wcmV1cGRhdGVfMQpnYW1lX3ByZXVwZGF0ZV8yCmdhbWVfdXBkYXRlCmdhbWVfdXBkYXRlMgpnYW1lX3VwZGF0ZXByZTEKc2l6ZV90ZXN0c19rZXJuZWwAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					5,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					6,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\DotProduct.cl",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\DotProduct.o",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\DotProduct.bc",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\test.cl",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\test.cl",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\test.ll",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					2,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\test.cl",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					7,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\test.cl",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\matvec.cl",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\matvec.ll",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\matvec.ll",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					11,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\matvec.ll",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\Desktop\\notes_on_game.txt",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\dynamicDefines.h",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\build\\game\\Debug\\openCL\\clGame.bc",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					7,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					8,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					9,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					10,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					11,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					12,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					13,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					14,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					15,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					16,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					17,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					18,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					19,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					20,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					21,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					22,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					23,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					24,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					25,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					26,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					27,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					28,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					29,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					30,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					31,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					32,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					33,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					34,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					35,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					36,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					37,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					38,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					39,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					40,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					41,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\build\\game\\Debug\\openCL\\clGame.bc",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					42,
					1,
					"outline_refresh",
					{
						"path": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\dynamicDefines.h",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"contents": "\n\n#include \"clCommon.h\"\n\n\n//#define FLATMAP\n#define ALL_EXPLORED\n//#define NO_ZSHADING\n//#define PEEP_ALL_ALWAYS_VISIBLE\n//#define PEEP_DISABLE_TILECORRECTIONS\n#define PEEP_PATH_CROWD (4)\n\n//#define DEBUG_PATHS\n\n#include \"clGUI.h\"\n\n\n\nRETURN_POINTER SynchronizedClientState* ThisClient(ALL_CORE_PARAMS)\n{\n    return &gameState->clientStates[gameStateActions->clientId];\n}\n\n\n\n\nvoid Print_GE_INT2(ge_int2 v)\n{\n    printf(\"{%d,%d}\\n\", v.x, v.y);\n}\nvoid Print_GE_INT3(ge_int3 v)\n{\n    printf(\"{%d,%d,%d}\\n\", v.x, v.y, v.z);\n}\nvoid Print_GE_UINT3(ge_uint3 v)\n{\n    printf(\"{%u,%u,%u}\\n\", v.x, v.y, v.z);\n}\nvoid Print_GE_SHORT3(ge_short3 v)\n{\n    printf(\"{%d,%d,%d}\\n\", v.x, v.y, v.z);\n}\nvoid PrintFloat2(float2 v)\n{\n    printf(\"{%f,%f}\\n\", v.x, v.y);\n}\nvoid PrintFloat3(float3 v)\n{\n    printf(\"{%f,%f,%f}\\n\", v.x, v.y, v.z);\n}\nvoid PrintFloat4(float4 v)\n{\n    printf(\"{%f,%f,%f,%f}\\n\", v.x, v.y, v.z, v.w);\n}\n\n\n\ninline cl_uint BITBANK_GET_SUBNUMBER_UINT(cl_uint bank, cl_int lsbBitIdx, cl_int numBits)\n{\n    cl_uint mask = 0;\n    for (int i = 0; i < numBits; i++)\n    {\n        mask |= (1 << (i + lsbBitIdx));\n    }\n\n\n    return ((bank & mask) >> lsbBitIdx);\n}\n\n\ninline void BITBANK_SET_SUBNUMBER_UINT(cl_uint* bank, cl_int lsbBitIdx, cl_int numBits, cl_uint number)\n{\n    int i = 0;\n    \n\n    cl_uint mask = 0;\n    for (int i = 0; i < numBits; i++)\n    {\n        mask |= (1 << (i + lsbBitIdx));\n    }\n\n    *bank &= ~mask;//clear the region\n    *bank |= ((number << lsbBitIdx) & mask);\n}\n\n\n\n///----------------------------------------------------------------------------------------------------------------\n///\n/// \n\n\ninline MapTile MapDataGetTile(cl_uint tileData) {\n    return (MapTile)BITBANK_GET_SUBNUMBER_UINT(tileData, 0, 8);\n}\ninline void MapDataSetTile(PARAM_GLOBAL_POINTER cl_uint* tileData, MapTile tile) {\n    cl_uint tmp = *tileData;\n    BITBANK_SET_SUBNUMBER_UINT(&tmp, 0, 8, tile);\n    *tileData = tmp;\n}\n\ninline int MapTileGetRotation(cl_uint tileData) {\n    return BITBANK_GET_SUBNUMBER_UINT(tileData, 8, 2);\n}\n\nRETURN_POINTER cl_uint* MapGetDataPointerFromCoord(ALL_CORE_PARAMS, ge_int3 mapcoord)\n{\n    return &(gameState->map.levels[(mapcoord).z].data[(mapcoord).x][(mapcoord).y]);\n}\n\nMapTile MapGetTileFromCoord(ALL_CORE_PARAMS, ge_int3 mapcoord)\n{\n    return MapDataGetTile(gameState->map.levels[(mapcoord).z].data[(mapcoord).x][(mapcoord).y]);\n}\n\ncl_uchar MapRidgeType(ALL_CORE_PARAMS, ge_int3 mapCoords, ge_int3 enterDir)\n{\n    USE_POINTER cl_uint* data = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, mapCoords);\n\n    if (MapDataGetTile(*data) == MapTile_NONE)\n        return 0;\n\n\n    /*offsets[0] = (ge_int3){ 1, 0, 0 };\n    offsets[1] = (ge_int3){ -1, 0, 0 };\n    offsets[2] = (ge_int3){ 0, -1, 0 };\n    offsets[3] = (ge_int3){ 0, 1, 0 };\n    offsets[4] = (ge_int3){ 0, 0, 1 };\n    offsets[5] = (ge_int3){ 0, 0, -1 };*/\n\n    if (VECTOR3_EQUAL(enterDir, staticData->directionalOffsets[0]))\n    {\n        return 2 - (BITGET_MF(*data, MapTileFlags_LowCornerBTMLEFT) + BITGET_MF(*data, MapTileFlags_LowCornerTPLEFT));\n    }\n    else if (VECTOR3_EQUAL(enterDir, staticData->directionalOffsets[1]))\n    {\n        return 2 - (BITGET_MF(*data, MapTileFlags_LowCornerBTMRIGHT) + BITGET_MF(*data, MapTileFlags_LowCornerTPRIGHT));\n    }\n    else if (VECTOR3_EQUAL(enterDir, staticData->directionalOffsets[2]))\n    {\n        return 2 - (BITGET_MF(*data, MapTileFlags_LowCornerBTMRIGHT) + BITGET_MF(*data, MapTileFlags_LowCornerBTMLEFT));\n    }\n    else if (VECTOR3_EQUAL(enterDir, staticData->directionalOffsets[3]))\n    {\n        return 2 - (BITGET_MF(*data, MapTileFlags_LowCornerTPRIGHT) + BITGET_MF(*data, MapTileFlags_LowCornerTPLEFT));\n    }\n    return 2;\n}\n\ncl_uchar MapDataHas2LowAdjacentCorners( cl_uint* data)\n{\n    if (BITGET_MF(*data, MapTileFlags_LowCornerTPLEFT) + BITGET_MF(*data, MapTileFlags_LowCornerTPRIGHT) == 2)\n        return 1;\n\n    if (BITGET_MF(*data, MapTileFlags_LowCornerTPRIGHT) + BITGET_MF(*data, MapTileFlags_LowCornerBTMRIGHT) == 2)\n        return 2;\n\n    if (BITGET_MF(*data, MapTileFlags_LowCornerBTMRIGHT) + BITGET_MF(*data, MapTileFlags_LowCornerBTMLEFT) == 2)\n        return 3;\n\n    if (BITGET_MF(*data, MapTileFlags_LowCornerBTMLEFT) + BITGET_MF(*data, MapTileFlags_LowCornerTPLEFT) == 2)\n        return 4;\n\n    return 0;\n}\n\ncl_uchar MapHas2LowAdjacentCorners(ALL_CORE_PARAMS, ge_int3 mapCoords)\n{\n    USE_POINTER cl_uint* data = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, mapCoords);\n    cl_uint localCopy = *data;\n    return MapDataHas2LowAdjacentCorners(&localCopy);\n}\n\n\ncl_uchar MapTileDataHasLowCorner(cl_int tileData)\n{\n    return BITBANK_GET_SUBNUMBER_UINT(tileData, MapTileFlags_LowCornerTPLEFT, 4);\n}\n\n\ncl_uchar MapTileData_TileSolid(cl_int tileData)\n{\n    if(MapTileDataHasLowCorner(tileData) == 0 && MapDataGetTile(tileData) != MapTile_NONE)\n    {\n        return 1;\n    }\n    else \n        return 0;\n}\n\ncl_uchar MapTileData_PeepCount(cl_uint tileData)\n{\n    return BITBANK_GET_SUBNUMBER_UINT(tileData, MapTileFlags_PeepCount0, 3);\n}\nvoid MapTileData_SetPeepCount(cl_uint* tileData, cl_uchar peepCount)\n{\n    peepCount = clamp((int)peepCount,0, 7);\n    BITBANK_SET_SUBNUMBER_UINT(tileData, MapTileFlags_PeepCount0, 3, peepCount);\n}\n\ncl_uchar MapHasLowCorner(ALL_CORE_PARAMS, ge_int3 mapCoords)\n{\n    USE_POINTER cl_uint* data = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, mapCoords);\n\n    if (MapDataGetTile(*data) == MapTile_NONE)\n        return 0;\n\n    return MapTileDataHasLowCorner(*data);\n}\ncl_uchar MapDataLowCornerCount(cl_int tileData)\n{\n    return (BITGET_MF(tileData, MapTileFlags_LowCornerTPLEFT) +\n        BITGET_MF(tileData, MapTileFlags_LowCornerTPRIGHT) +\n        BITGET_MF(tileData, MapTileFlags_LowCornerBTMRIGHT) +\n        BITGET_MF(tileData, MapTileFlags_LowCornerBTMLEFT));\n}\ncl_uchar MapLowCornerCount(ALL_CORE_PARAMS, ge_int3 mapCoords)\n{\n    USE_POINTER cl_uint* data = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, mapCoords);\n\n    if (MapDataGetTile(*data) == MapTile_NONE)\n        return 0;\n\n    return MapDataLowCornerCount(*data);\n}\n\ncl_uchar MapDataXLevel( cl_uint* data)\n{\n    if(MapDataHas2LowAdjacentCorners(data) > 0 && MapDataLowCornerCount(*data) == 2)\n    {\n        return 1;//mid x\n    }\n    else if(MapDataLowCornerCount(*data) == 3)\n    {\n        return 0;//low x\n    }\n    else \n        return 2;//high x\n}\n\ncl_uchar MapTileXLevel(ALL_CORE_PARAMS, ge_int3 mapCoords)\n{\n    USE_POINTER cl_uint* data = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, mapCoords);\n    cl_uint localCopy = *data;\n    return MapDataXLevel(&localCopy);\n}\n\ncl_uchar MapTileCoordStandInValid(ALL_CORE_PARAMS, ge_int3 mapcoord)\n{\n    USE_POINTER cl_uint* data = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, mapcoord);\n    MapTile tile = MapDataGetTile(*data);\n    if (tile == MapTile_NONE)\n    {\n        return 1;\n    }\n    else\n    {\n        if(MapDataLowCornerCount(*data) > 0)\n            return 1;\n    }\n    return 0;\n}\n\n\ncl_uchar MapTileCoordEnterable(ALL_CORE_PARAMS, ge_int3 mapcoord, ge_int3 enterDirection)\n{\n    USE_POINTER cl_uint* data = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, mapcoord);\n    MapTile tile = MapDataGetTile(*data);\n    if (tile == MapTile_NONE)\n    {   \n        return 1;\n        //if(enterDirection.z < 0)\n        //    return 0;\n\n\n\n        ge_int3 downCoord = mapcoord;\n        downCoord.z--;\n        USE_POINTER cl_uint* downData = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, downCoord);\n        if( MapDataGetTile(*downData) != MapTile_NONE)\n            return 1;\n\n\n\n\n\n    }\n    else\n        return 0;\n\n    //  if(MapDataLowCornerCount(*data) == 0)//cant enter full blocks\n    // {\n    //     return 0;\n    // }\n    // else if(enterDirection.z == 0)//entering partial block from the side\n    // {\n    //     cl_uchar ridgeType = MapRidgeType(ALL_CORE_PARAMS_PASS, mapcoord, enterDirection);\n    //     if (ridgeType == 0)\n    //         return 1;\n    // }\n    // else if(enterDirection.z > 0)//entering partial block from below\n    // {\n    //     return 1;\n    //     ge_int3 dirNoZ = enterDirection;\n    //     dirNoZ.z = 0;\n    //     cl_uchar ridgeType = MapRidgeType(ALL_CORE_PARAMS_PASS, mapcoord, dirNoZ);\n    //     if (ridgeType == 0)//running up continued ramp case.\n    //         return 1;\n\n    // }\n    // else if(enterDirection.z < 0)//entering partial block from above\n    // {\n    //     return 1;\n    //     if(MapDataLowCornerCount(*data) > 0)//could be a ramp \n    //         return 1;\n    // }\n    // return 0;\n}\n\n\nvoid Machine_InitRecipes(ALL_CORE_PARAMS)\n{\n   USE_POINTER MachineRecipe* recip = &gameState->machineRecipes[MachineRecipe_IRON_ORE_CRUSHING];\n   recip->numInputs = 1;\n   recip->numOutputs = 2;\n   recip->inputTypes[0] = ItemType_IRON_ORE;\n   recip->outputTypes[0] = ItemType_IRON_DUST;\n   recip->outputTypes[1] = ItemType_ROCK_DUST;\n\n   recip->inputRatio[0] = 1;\n   recip->outputRatio[0] = 1;\n   recip->outputRatio[1] = 5;\n\n\n\n    recip = &gameState->machineRecipes[MachineRecipe_IRON_DUST_SMELTING];\n    recip->numInputs = 1;\n    recip->numOutputs = 1;\n    recip->inputTypes[0] = ItemType_IRON_DUST;\n    recip->outputTypes[0] = ItemType_IRON_BAR;\n\n    recip->inputRatio[0] = 5;\n    recip->outputRatio[0] = 1;\n\n\n    gameState->validMachineRecipes[MachineTypes_CRUSHER][0] = MachineRecipe_IRON_ORE_CRUSHING;\n    gameState->validMachineRecipes[MachineTypes_SMELTER][0] = MachineRecipe_IRON_DUST_SMELTING;\n\n\n\n}\n\nvoid Machine_InitDescriptions(ALL_CORE_PARAMS)\n{\n    USE_POINTER MachineDesc* m = &gameState->machineDescriptions[MachineTypes_CRUSHER];\n    m->type = MachineTypes_CRUSHER;\n    m->tile = MapTile_MACHINE_CRUSHER;\n    m->processingTime = 30;\n\n\n    m = &gameState->machineDescriptions[MachineTypes_SMELTER];\n    m->type = MachineTypes_SMELTER;\n    m->tile = MapTile_MACHINE_FURNACE;\n    m->processingTime = 100;\n\n}\n\nvoid InitItemTypeTiles(ALL_CORE_PARAMS)\n{\n    gameState->ItemTypeTiles[ItemType_IRON_ORE].itemTile = ItemTile_Ore;\n    gameState->ItemTypeTiles[ItemType_IRON_DUST].itemTile = ItemTile_Dust;\n    gameState->ItemTypeTiles[ItemType_IRON_BAR].itemTile = ItemTile_Bar;\n    gameState->ItemTypeTiles[ItemType_ROCK_DUST].itemTile = ItemTile_Dust;\n\n\n    gameState->ItemColors[ItemType_IRON_ORE] = COLOR_ORANGE;\n    gameState->ItemColors[ItemType_IRON_DUST] = COLOR_ORANGE;\n    gameState->ItemColors[ItemType_IRON_BAR] = COLOR_ORANGE;\n    gameState->ItemColors[ItemType_ROCK_DUST] = COLOR_WHITE;\n}\n\noffsetPtr Machine_CreateMachine(ALL_CORE_PARAMS)\n{\n    offsetPtr ptr = gameState->nextMachineIdx;\n\n    bool loopSense = false;\n    do\n    {\n        gameState->nextMachineIdx++;\n        if(gameState->nextMachineIdx >= MAX_MACHINES)\n        {\n            gameState->nextMachineIdx = 0;\n            if(loopSense == true)\n            {\n                printf(\"Machine_CreateMachine Out of Machine Space (MAX_MACHINES)!\\n\");\n                return OFFSET_NULL;\n            }\n            loopSense=true;\n        }\n    }while(gameState->machines[gameState->nextMachineIdx].valid == true);\n\n    return ptr;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninline void AStarNodeInstantiate(PARAM_GLOBAL_POINTER AStarNode* node)\n{\n    \n    node->g_Q16 = TO_Q16(0);\n    node->h_Q16 = TO_Q16(0);\n    node->nextOPtr = OFFSET_NULL_3D;  \n    node->prevOPtr = OFFSET_NULL_3D;\n    node->tileIdx.x = -1;\n    node->tileIdx.y = -1;\n    node->tileIdx.z = -1;\n\n}\nvoid AStarInitPathNode(PARAM_GLOBAL_POINTER AStarPathNode* node)\n{\n    node->mapCoord_Q16 = (ge_int3){ 0,0,0 };\n    node->nextOPtr = OFFSET_NULL;\n    node->prevOPtr = OFFSET_NULL;\n\n}\n\n\nvoid AStarSearch_BFS_Instantiate(PARAM_GLOBAL_POINTER AStarSearch_BFS* search)\n{\n    for (int x = 0; x < MAPDIM; x++)\n    {\n        for (int y = 0; y < MAPDIM; y++)\n        {\n            for (int z = 0; z < MAPDEPTH; z++)\n            {\n                USE_POINTER AStarNode* node = &search->details[x][y][z];\n                AStarNodeInstantiate(node);\n\n\n                node->tileIdx = (ge_short3){x,y,z};\n\n                search->closedMap[x][y][z] = 0;\n                search->openMap[x][y][z] = 0;\n            }\n        }  \n    }\n\n    for(int i = 0; i < ASTARHEAPSIZE; i++)\n    {\n        search->openHeap_OPtrs[i] = OFFSET_NULL_3D;\n    }\n    \n    search->startNodeOPtr = OFFSET_NULL_3D;\n    search->endNodeOPtr = OFFSET_NULL_3D;\n    \n    search->openHeapSize = 0;\n    search->pathOPtr = OFFSET_NULL;\n\n}\nvoid AStarSearch_BFS_InstantiateParrallel(PARAM_GLOBAL_POINTER AStarSearch_BFS* search, cl_ulong idx, int x, int y, int z)\n{\n\n    USE_POINTER AStarNode* node = &search->details[x][y][z];\n    AStarNodeInstantiate(node);\n    node->tileIdx = (ge_short3){x,y,z};\n\n    search->closedMap[x][y][z] = 0;\n    search->openMap[x][y][z] = 0;\n\n\n\n    if(idx < ASTARHEAPSIZE)\n    {\n        search->openHeap_OPtrs[idx] = OFFSET_NULL_3D;\n       \n    }\n    \n    \n    search->startNodeOPtr = OFFSET_NULL_3D;\n    search->endNodeOPtr = OFFSET_NULL_3D;\n    search->openHeapSize = 0;\n    search->pathOPtr = OFFSET_NULL;\n\n\n}\n\n\n\n\ncl_uchar MapTileCoordValid(ge_int3 mapcoord, int xybuffer)\n{\n    if ((mapcoord.x >= xybuffer) && (mapcoord.y >= xybuffer) && mapcoord.z >= 0 && (mapcoord.x < MAPDIM-xybuffer) && (mapcoord.y < MAPDIM-xybuffer) && mapcoord.z < MAPDEPTH)\n    {\n        return 1;\n    }\n    return 0;\n}\ncl_uchar AStarNodeValid(PARAM_GLOBAL_POINTER AStarNode* node)\n{\n    return MapTileCoordValid(SHORT3_TO_INT3(node->tileIdx),1);\n}\ncl_uchar AStarNode2NodeTraversible(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER AStarNode* node, PARAM_GLOBAL_POINTER AStarNode* prevNode)\n{  \n\n    USE_POINTER cl_uint* fromTileData = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, SHORT3_TO_INT3(prevNode->tileIdx));\n    USE_POINTER cl_uint* toTileData = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, SHORT3_TO_INT3(node->tileIdx));\n\n    ge_int3 delta = INT3_SUB(SHORT3_TO_INT3(node->tileIdx), SHORT3_TO_INT3( prevNode->tileIdx ));\n    if (MapTileCoordEnterable(ALL_CORE_PARAMS_PASS, SHORT3_TO_INT3(node->tileIdx), delta) == 0)\n        return 0;\n\n    //must be adjacent to \n    bool adjacent = false;\n    for(int i = 0; i < 26; i++)\n    {\n        ge_int3 worldCoord = staticData->directionalOffsets[i] + SHORT3_TO_INT3(node->tileIdx);\n        MapTile tile = MapGetTileFromCoord(ALL_CORE_PARAMS_PASS, worldCoord);\n        if(tile != MapTile_NONE)\n        {\n            adjacent = true;\n            break;\n        }\n    }\n    if(adjacent == false)\n        return 0;\n\n\n    if(delta.z > 0)\n    {\n\n\n      //  if(MapDataGetTile(*fromTileData) == MapTile_NONE)\n     //       return 0;\n        //else could be a ramp\n\n    \n    }\n\n\n    return 1;\n\n\n\n\n}\n\nvoid MakeCardinalDirectionOffsets(PARAM_GLOBAL_POINTER ge_int3* offsets)\n{\n    offsets[0] = (ge_int3){ 1, 0, 0 };\n    offsets[1] = (ge_int3){ -1, 0, 0 };\n    offsets[2] = (ge_int3){ 0, -1, 0 };\n    offsets[3] = (ge_int3){ 0, 1, 0 };\n    offsets[4] = (ge_int3){ 0, 0, 1 };\n    offsets[5] = (ge_int3){ 0, 0, -1 };\n\n    offsets[6] = (ge_int3){ 1, 0, -1 };\n    offsets[7] = (ge_int3){ 0, 1, -1 };\n    offsets[8] = (ge_int3){ 1, 1, -1 };\n    offsets[9] = (ge_int3){ -1, 0, -1 };\n    offsets[10] = (ge_int3){ 0, -1, -1 };\n    offsets[11] = (ge_int3){ -1, -1, -1 };\n    offsets[12] = (ge_int3){ 1, -1, -1 };\n    offsets[13] = (ge_int3){ -1, 1, -1 };\n\n    offsets[14] = (ge_int3){ 1, 0, 1 };\n    offsets[15] = (ge_int3){ 0, 1, 1 };\n    offsets[16] = (ge_int3){ 1, 1, 1 };\n    offsets[17] = (ge_int3){ -1, 0, 1 };\n    offsets[18] = (ge_int3){ 0, -1, 1 };\n    offsets[19] = (ge_int3){ -1, -1, 1 };\n    offsets[20] = (ge_int3){ 1, -1, 1 };\n    offsets[21] = (ge_int3){ -1, 1, 1 };\n\n    offsets[22] = (ge_int3){ 1, 1, 0 };\n    offsets[23] = (ge_int3){ -1, 1, 0 };\n    offsets[24] = (ge_int3){ 1, -1, 0 };\n    offsets[25] = (ge_int3){ -1, -1, 0 };\n}\nint AStarOpenHeapKey(PARAM_GLOBAL_POINTER AStarSearch_BFS* search, PARAM_GLOBAL_POINTER AStarNode* node)\n{\n    //f\n    return node->g_Q16 + node->h_Q16;\n}\n\nvoid AStarOpenHeapTrickleDown(PARAM_GLOBAL_POINTER AStarSearch_BFS* search, cl_int index)\n{\n    cl_int largerChild;\n    USE_POINTER AStarNode* top;\n    offsetPtr3 topOPtr = search->openHeap_OPtrs[index];\n    OFFSET_TO_PTR_3D(search->details, topOPtr, top);\n\n\n    while (index < search->openHeapSize / 2)\n    {\n        int leftChild = 2 * index + 1;\n        int rightChild = leftChild + 1;\n\n        USE_POINTER AStarNode* leftChildNode;\n        OFFSET_TO_PTR_3D(search->details, search->openHeap_OPtrs[leftChild], leftChildNode)\n        USE_POINTER AStarNode* rightChildNode;\n        OFFSET_TO_PTR_3D(search->details, search->openHeap_OPtrs[rightChild], rightChildNode)\n\n        if ((rightChild < search->openHeapSize) && (AStarOpenHeapKey(search, leftChildNode) > AStarOpenHeapKey(search, rightChildNode)))\n            largerChild = rightChild;\n        else\n            largerChild = leftChild;\n\n        USE_POINTER AStarNode* largerChildNode;\n\n        OFFSET_TO_PTR_3D(search->details, search->openHeap_OPtrs[largerChild], largerChildNode)\n\n        if (AStarOpenHeapKey(search, top) <= AStarOpenHeapKey(search, largerChildNode))\n            break;\n\n        search->openHeap_OPtrs[index] = search->openHeap_OPtrs[largerChild];\n        index = largerChild;\n\n        \n    }\n    \n    search->openHeap_OPtrs[index] = topOPtr;\n}\n\noffsetPtr3 AStarOpenHeapRemove(PARAM_GLOBAL_POINTER AStarSearch_BFS* search)\n{\n    offsetPtr3 rootOPtr = search->openHeap_OPtrs[0];\n\n    search->openHeap_OPtrs[0] = search->openHeap_OPtrs[search->openHeapSize-1];\n    search->openHeapSize--;\n\n \n    AStarOpenHeapTrickleDown(search, 0);\n\n    return rootOPtr;\n}\n\noffsetPtr3 AStarRemoveFromOpen(PARAM_GLOBAL_POINTER AStarSearch_BFS* search)\n{\n\n    offsetPtr3 nodeOPtr = AStarOpenHeapRemove(search);\n    \n\n    USE_POINTER AStarNode* node;\n    OFFSET_TO_PTR_3D(search->details, nodeOPtr, node);\n\n    search->openMap[node->tileIdx.x][node->tileIdx.y][node->tileIdx.z] = 0;\n    return nodeOPtr;\n}\nvoid AStarAddToClosed(PARAM_GLOBAL_POINTER AStarSearch_BFS* search,PARAM_GLOBAL_POINTER AStarNode* node)\n{\n    search->closedMap[node->tileIdx.x][node->tileIdx.y][node->tileIdx.z] = 1;\n}\ncl_uchar AStarNodeInClosed(PARAM_GLOBAL_POINTER AStarSearch_BFS* search,PARAM_GLOBAL_POINTER AStarNode* node)\n{\n    return search->closedMap[node->tileIdx.x][node->tileIdx.y][node->tileIdx.z];\n}\n\ncl_uchar AStarNodeInOpen(PARAM_GLOBAL_POINTER AStarSearch_BFS* search, PARAM_GLOBAL_POINTER AStarNode* node)\n{\n    return search->openMap[node->tileIdx.x][node->tileIdx.y][node->tileIdx.z];\n}\n\n\nvoid AStarOpenHeapTrickleUp(PARAM_GLOBAL_POINTER AStarSearch_BFS* search, cl_int index)\n{\n    cl_int prev = (index - 1) / 2;\n    offsetPtr3 bottomOPtr = search->openHeap_OPtrs[index];\n\n    USE_POINTER AStarNode* bottomNode;\n    OFFSET_TO_PTR_3D(search->details, bottomOPtr, bottomNode);\n\n    USE_POINTER AStarNode* prevNode;\n    OFFSET_TO_PTR_3D(search->details, search->openHeap_OPtrs[prev], prevNode);\n\n    while (index > 0 && AStarOpenHeapKey(search, prevNode) > AStarOpenHeapKey(search, bottomNode))\n    {\n        search->openHeap_OPtrs[index] = search->openHeap_OPtrs[prev];\n        index = prev;\n        prev = (prev - 1) / 2;\n        OFFSET_TO_PTR_3D(search->details, search->openHeap_OPtrs[prev], prevNode);\n    }\n    search->openHeap_OPtrs[index] = bottomOPtr;\n}\n\n\nvoid AStarOpenHeapInsert(PARAM_GLOBAL_POINTER AStarSearch_BFS* search, offsetPtr3 nodeOPtr)\n{\n    search->openHeap_OPtrs[search->openHeapSize] = nodeOPtr;\n    AStarOpenHeapTrickleUp(search, search->openHeapSize);\n    search->openHeapSize++;\n    if (search->openHeapSize > ASTARHEAPSIZE)\n        printf(\"ERROR: AStarHeap Size Greater than ASTARHEAPSIZE!\\n\");\n\n}\nvoid AStarAddToOpen(PARAM_GLOBAL_POINTER AStarSearch_BFS* search, offsetPtr3 nodeOPtr)\n{\n    AStarOpenHeapInsert(search, nodeOPtr);\n\n    USE_POINTER AStarNode* node;\n    OFFSET_TO_PTR_3D(search->details, nodeOPtr, node);\n    search->openMap[node->tileIdx.x][node->tileIdx.y][node->tileIdx.z] = 1;\n}\n\noffsetPtr AStarPathStepsNextFreePathNode(PARAM_GLOBAL_POINTER AStarPathSteps* list)\n{\n    offsetPtr ptr = list->nextListIdx;\n    while ((list->pathNodes[ptr].nextOPtr != OFFSET_NULL))\n    {\n        ptr++;\n        if (ptr >= ASTARPATHSTEPSSIZE)\n            ptr = 0;\n        \n        if(ptr == list->nextListIdx)//wrap around\n        {\n            printf(\"No More Path Nodes Available.\\n\");\n            return OFFSET_NULL;\n        }\n    }\n    list->nextListIdx = ptr+1;\n    return ptr;\n}\n\n\n\n\n\nvoid AStarRemoveFromClosed(PARAM_GLOBAL_POINTER AStarSearch_BFS* search, PARAM_GLOBAL_POINTER AStarNode* node)\n{\n    search->closedMap[node->tileIdx.x][node->tileIdx.y][node->tileIdx.z] = 0;\n}\n\ncl_int AStarNodeDistanceHuristic(PARAM_GLOBAL_POINTER AStarSearch_BFS* search, PARAM_GLOBAL_POINTER AStarNode* nodeA, PARAM_GLOBAL_POINTER AStarNode* nodeB)\n{\n    return TO_Q16(abs(nodeA->tileIdx.x - nodeB->tileIdx.x) + abs(nodeA->tileIdx.y - nodeB->tileIdx.y) + abs(nodeA->tileIdx.z - nodeB->tileIdx.z));\n}\ncl_int AStarNodeDistanceHuristic_IDA(PARAM_GLOBAL_POINTER AStarSearch_IDA* search, ge_short3 locA, ge_short3 locB)\n{\n    return TO_Q16(abs(locA.x - locB.x) + abs(locA.y - locB.y) + abs(locA.z - locB.z));\n}\nvoid AStarPrintNodeStats(PARAM_GLOBAL_POINTER AStarNode* node)\n{\n    printf(\"Node: Loc: \");\n    Print_GE_SHORT3(node->tileIdx);\n    printf(\" H: %f, G: %f\\n\", FIXED2FLTQ16(node->h_Q16), FIXED2FLTQ16(node->g_Q16));\n}\nvoid AStarPrintPathNodeStats(PARAM_GLOBAL_POINTER AStarPathNode* node)\n{\n    printf(\"Node: Loc: \");\n    Print_GE_INT3_Q16(node->mapCoord_Q16);\n}\nvoid AStarPrintSearchPathTo(PARAM_GLOBAL_POINTER AStarSearch_BFS* search, ge_int3 destTile)\n{\n    USE_POINTER AStarNode* curNode = &search->details[destTile.x][destTile.y][destTile.z];\n    while (curNode != NULL)\n    {\n        AStarPrintNodeStats(curNode);\n        OFFSET_TO_PTR_3D(search->details, curNode->prevOPtr, curNode);\n    }\n}\nvoid AStarPrintSearchPathFrom(PARAM_GLOBAL_POINTER AStarSearch_BFS* search, ge_int3 startTile)\n{\n    USE_POINTER AStarNode* curNode = &search->details[startTile.x][startTile.y][startTile.z];\n    while (curNode != NULL)\n    {\n        AStarPrintNodeStats(curNode);\n        OFFSET_TO_PTR_3D(search->details, curNode->nextOPtr, curNode);\n    }\n}\n\nvoid AStarPrintPath(PARAM_GLOBAL_POINTER AStarPathSteps* paths, offsetPtr startNodeOPtr)\n{\n    USE_POINTER AStarPathNode* curNode;\n    OFFSET_TO_PTR(paths->pathNodes, startNodeOPtr, curNode);\n    while (curNode != NULL)\n    {\n        AStarPrintPathNodeStats(curNode);\n        OFFSET_TO_PTR(paths->pathNodes, curNode->nextOPtr, curNode);\n    }\n}\n\ncl_uchar GE_INT3_ENTRY_COUNT(ge_int3 a)\n{\n    int s = 0;\n    if (a.x != 0)\n        s++;\n    if (a.y != 0)\n        s++;\n    if (a.z != 0)\n        s++;\n\n    return s;\n}\n\ncl_uchar GE_INT3_SINGLE_ENTRY(ge_int3 a)\n{\n    int s = 0;\n    if (a.x != 0)\n        s++;\n    if (a.y != 0)\n        s++;\n    if (a.z != 0)\n        s++;\n\n    if (s == 1)\n        return 1;\n    else\n        return 0;\n}\n\n\n// Ret 1: [2,0,2],[-1,-1,0],[4,4,4],[3,0,0] etc\n// Ret 0: [2,0,1],[1,-1,1],[2,3,4],[0,0,0] etc\ncl_uchar GE_INT3_WHACHAMACOLIT1_ENTRY(ge_int3 a)\n{\n    if (INT3_ZERO(a))\n        return 0;\n\n    int n = a.x + a.y + a.z;\n    int s =0;\n    if (a.x != 0)\n        s++;\n    if (a.y != 0)\n        s++;\n    if (a.z != 0)\n        s++;\n\n    int f = 0;\n    if (a.x != 0)\n        f = a.x;\n    else if (a.y != 0)\n        f = a.y;\n    else if (a.z != 0)\n        f = a.z;\n\n\n    if ((n / s) == f)\n    {\n        return 1;\n    }\n    return 0;\n}\n\n\noffsetPtr AStarFormPathSteps(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER AStarSearch_BFS* search, PARAM_GLOBAL_POINTER AStarPathSteps* steps)\n{\n    //grab a unused Node from pathNodes, and start building the list .\n    offsetPtr3 curNodeOPtr =  search->startNodeOPtr;\n    USE_POINTER AStarNode* curNode;\n    OFFSET_TO_PTR_3D(search->details, curNodeOPtr, curNode);\n    CL_CHECK_NULL(curNode);\n\n    offsetPtr startNodeOPtr = OFFSET_NULL;\n    USE_POINTER AStarPathNode* pNP = NULL;\n    int i = 0;\n    while (curNode != NULL)\n    { \n\n        int index = AStarPathStepsNextFreePathNode(&gameState->paths);\n\n        USE_POINTER AStarPathNode* pN = &gameState->paths.pathNodes[index];\n\n        if (i == 0)\n            startNodeOPtr = index;\n\n\n        ge_int3 holdTileCoord = SHORT3_TO_INT3(  curNode->tileIdx  );\n\n        //put location at center of tile\n        ge_int3 tileCenter = GE_INT3_TO_Q16(holdTileCoord);\n        tileCenter.x += TO_Q16(1) >> 1;\n        tileCenter.y += TO_Q16(1) >> 1;\n        tileCenter.z += TO_Q16(1) >> 1;\n\n\n        pN->mapCoord_Q16 = tileCenter;\n\n        if (pNP != NULL)\n        {\n            pNP->nextOPtr = index;\n        }\n        pNP = pN;\n\n        if (!VECTOR3_EQUAL(curNode->nextOPtr, OFFSET_NULL_3D)) \n        {\n\n            OFFSET_TO_PTR_3D(search->details, curNode->nextOPtr, curNode);\n\n            if(0)\n            {\n                //iterate until joint in path.\n                ge_int3 delta;\n                USE_POINTER AStarNode* n2 = curNode;\n                do\n                {\n                    OFFSET_TO_PTR_3D(search->details, n2->nextOPtr, n2);\n\n                    if (n2 != NULL) {\n                        delta = INT3_ADD(SHORT3_TO_INT3(n2->tileIdx), INT3_NEG(holdTileCoord));\n                    }\n                    else\n                        delta = (ge_int3){ 0,0,0 };\n\n                } while ((n2 != NULL) && (GE_INT3_WHACHAMACOLIT1_ENTRY(delta) == 1));\n\n                if (n2 != NULL) \n                {\n                    USE_POINTER AStarNode* n2Prev;\n                    OFFSET_TO_PTR_3D(search->details, n2->prevOPtr, n2Prev);\n\n                    if (curNode != n2Prev)\n                        curNode = n2Prev;\n                    else\n                        curNode = n2;\n                }\n                else\n                {\n                    OFFSET_TO_PTR_3D(search->details, search->endNodeOPtr, curNode);\n                }\n            }\n        }\n        else\n            curNode = NULL;\n\n\n        i++;\n\n    }\n    pNP->nextOPtr = OFFSET_NULL;\n\n\n\n    //form prev links\n    USE_POINTER AStarPathNode* curNode2;\n    offsetPtr curNode2OPtr = startNodeOPtr;\n    OFFSET_TO_PTR(steps->pathNodes, startNodeOPtr, curNode2);\n\n    while (curNode2 != NULL)\n    {\n\n        USE_POINTER AStarPathNode* p;\n        OFFSET_TO_PTR(steps->pathNodes, curNode2->nextOPtr, p);\n\n\n        if (p != NULL)\n            p->prevOPtr = curNode2OPtr;\n\n\n        curNode2 = p;\n        if(curNode2 != NULL)\n            curNode2OPtr = curNode2->nextOPtr;\n        \n    }\n\n    steps->pathStarts[steps->nextPathStartIdx] = startNodeOPtr;\n    steps->nextPathStartIdx++;\n\n    if(steps->nextPathStartIdx >= ASTAR_MAX_PATHS)\n    {\n        steps->nextPathStartIdx = ASTAR_MAX_PATHS-1;\n        printf(\"Max Paths Reached!\\n\");\n    }\n\n  //  OFFSET_TO_PTR(steps->pathNodes, startNodeOPtr, curNode2);\n   // curNode2->prevOPtr = OFFSET_NULL;\n\n    return startNodeOPtr;\n}\n\n\n\noffsetPtr AStarFormPathSteps_IDA(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER AStarSearch_IDA* search, PARAM_GLOBAL_POINTER AStarPathSteps* steps)\n{\n    //grab a unused Node from pathNodes, and start building the list .\n\n    USE_POINTER AStarNode_IDA* curNode;\n    OFFSET_TO_PTR(search->path, 0, curNode);\n\n    offsetPtr startNodeOPtr = OFFSET_NULL;\n    USE_POINTER AStarPathNode* pNP = NULL;\n    int i = 0;\n    while (curNode != NULL && i <= search->pathEndIdx)\n    { \n        int index = AStarPathStepsNextFreePathNode(&gameState->paths);\n\n        USE_POINTER AStarPathNode* pN = &gameState->paths.pathNodes[index];\n\n        if (i == 0)\n            startNodeOPtr = index;\n\n        ge_int3 holdTileCoord = SHORT3_TO_INT3(  curNode->tileLoc  );\n\n        //put location at center of tile\n        ge_int3 tileCenter = GE_INT3_TO_Q16(holdTileCoord);\n        tileCenter.x += TO_Q16(1) >> 1;\n        tileCenter.y += TO_Q16(1) >> 1;\n        tileCenter.z += TO_Q16(1) >> 1;\n\n\n        pN->mapCoord_Q16 = tileCenter;\n\n        if (pNP != NULL)\n        {\n            pNP->nextOPtr = index;\n        }\n        pNP = pN;\n\n\n        i++;\n        OFFSET_TO_PTR(search->path, i, curNode);\n    }\n    pNP->nextOPtr = OFFSET_NULL;\n\n\n\n    //form prev links\n    USE_POINTER AStarPathNode* curNode2;\n    offsetPtr curNode2OPtr = startNodeOPtr;\n    OFFSET_TO_PTR(steps->pathNodes, startNodeOPtr, curNode2);\n\n    while (curNode2 != NULL)\n    {\n\n        USE_POINTER AStarPathNode* p;\n        OFFSET_TO_PTR(steps->pathNodes, curNode2->nextOPtr, p);\n\n\n        if (p != NULL)\n            p->prevOPtr = curNode2OPtr;\n\n\n        curNode2 = p;\n        if(curNode2 != NULL)\n            curNode2OPtr = curNode2->nextOPtr;\n        \n    }\n\n    steps->pathStarts[steps->nextPathStartIdx] = startNodeOPtr;\n    steps->nextPathStartIdx++;\n\n    if(steps->nextPathStartIdx >= ASTAR_MAX_PATHS)\n    {\n        steps->nextPathStartIdx = ASTAR_MAX_PATHS-1;\n        printf(\"Max Paths Reached!\\n\");\n    }\n\n    return startNodeOPtr;\n}\n\n\nAStarPathFindingProgress AStarSearch_BFS_Continue(ALL_CORE_PARAMS,PARAM_GLOBAL_POINTER AStarSearch_BFS* search, int iterations)\n{\n    USE_POINTER AStarNode* startNode;\n    USE_POINTER AStarNode* targetNode;\n    OFFSET_TO_PTR_3D(search->details, search->startNodeOPtr,startNode);\n    OFFSET_TO_PTR_3D(search->details, search->endNodeOPtr,targetNode);\n\n\n    //printf(\"AStarSearch_BFS_Continue..openHeapSize: %d\\n\", search->openHeapSize);\n    while (search->openHeapSize > 0 && iterations > 0)\n    {\n        //printf(\"AStarSearch_BFS_Continue iterating..%d\\n\", iterations);\n        //find node in open with lowest f cost\n        offsetPtr3 currentOPtr = AStarRemoveFromOpen(search);\n\n\n        USE_POINTER AStarNode* current;\n        OFFSET_TO_PTR_3D(search->details, currentOPtr, current);\n\n        //printf(\"G: \"); PrintQ16(current->g_Q16); printf(\" H: \"); PrintQ16(current->h_Q16);\n\n        AStarAddToClosed(search, current);//visited\n        if (VECTOR3_EQUAL(SHORT3_TO_INT3( current->tileIdx ), search->endNodeOPtr) )\n        {\n            printf(\"AStarSearch_BFS_Continue AStarPathFindingProgress_Finished\\n\");\n            search->state = AStarPathFindingProgress_Finished;\n            \n            USE_POINTER AStarNode* endNode;\n            OFFSET_TO_PTR_3D(search->details, search->endNodeOPtr, endNode);\n            CL_CHECK_NULL(endNode);\n\n            endNode->nextOPtr = OFFSET_NULL_3D;\n            startNode->prevOPtr = OFFSET_NULL_3D;\n\n            //form next links\n            USE_POINTER AStarNode* curNode = targetNode;\n            offsetPtr3 curNodeOPtr = search->endNodeOPtr;\n\n            while (curNode != NULL)\n            {\n                USE_POINTER AStarNode* p;\n                OFFSET_TO_PTR_3D(search->details, curNode->prevOPtr, p);\n\n                if(p != NULL)\n                    p->nextOPtr = curNodeOPtr;\n\n                curNodeOPtr = curNode->prevOPtr;\n                curNode = p;\n            }\n\n            //form a simplified path\n            search->pathOPtr = AStarFormPathSteps(ALL_CORE_PARAMS_PASS , search, &gameState->paths);\n\n\n            return search->state;//found dest\n        }\n        \n        \n\n\n\n        //5 neighbors\n        for (int i = 0; i <= 5; i++)\n        { \n            ge_int3 prospectiveTileCoord;\n            ge_int3 dir = staticData->directionalOffsets[i];\n            prospectiveTileCoord.x = current->tileIdx.x + dir.x;\n            prospectiveTileCoord.y = current->tileIdx.y + dir.y;\n            prospectiveTileCoord.z = current->tileIdx.z + dir.z;\n \n            if (MapTileCoordValid(prospectiveTileCoord, 1)==0)\n            {\n                continue;\n            }\n\n\n            \n            //if lateral dyagonol, check adjacents a for traversability as well. if all traverible - diagonoal is traversible.\n            // if(GE_INT3_ENTRY_COUNT(dir) == 2 && dir.z == 0)\n            // {\n            //     ge_int3 dirNoX = dir;\n            //     dirNoX.x=0;\n            //     ge_int3 dirNoY = dir;\n            //     dirNoX.y=0;\n\n            //     ge_int3 XCheckCoord;\n            //     ge_int3 YCheckCoord;\n\n\n            //     offsetPtr3 XCheckNodeOPtr = (offsetPtr3){XCheckCoord.x,XCheckCoord.y,XCheckCoord.z};\n            //     AStarNode* XCheckNode;\n            //     OFFSET_TO_PTR_3D(search->details, XCheckNodeOPtr, XCheckNode);\n            //     if ((AStarNode2NodeTraversible(ALL_CORE_PARAMS_PASS,  XCheckNode, current) == 0))\n            //     {\n            //         continue;\n            //     }\n\n            //     offsetPtr3 YCheckNodeOPtr = (offsetPtr3){YCheckCoord.x,YCheckCoord.y,YCheckCoord.z};\n            //     AStarNode* YCheckNode;\n            //     OFFSET_TO_PTR_3D(search->details, YCheckNodeOPtr, YCheckNode);\n            //     if ((AStarNode2NodeTraversible(ALL_CORE_PARAMS_PASS,  YCheckNode, current) == 0))\n            //     {\n            //         continue;\n            //     }\n            // }\n\n            offsetPtr3 prospectiveNodeOPtr = (offsetPtr3){prospectiveTileCoord.x,prospectiveTileCoord.y,prospectiveTileCoord.z};\n            USE_POINTER AStarNode* prospectiveNode;\n            OFFSET_TO_PTR_3D(search->details, prospectiveNodeOPtr, prospectiveNode);\n\n            if ((AStarNode2NodeTraversible(ALL_CORE_PARAMS_PASS,  prospectiveNode, current) == 0) || (AStarNodeInClosed(search, prospectiveNode)))\n            {\n                continue;\n            }\n\n\n\n\n            int totalMoveCost = current->g_Q16 + AStarNodeDistanceHuristic(search, current, prospectiveNode);\n           // PrintQ16(totalMoveCost); PrintQ16(current->g_Q16); PrintQ16(prospectiveNode->g_Q16);\n            if (((totalMoveCost < prospectiveNode->g_Q16) || AStarNodeInOpen(search, prospectiveNode) == 0) )\n            {\n                \n\n                prospectiveNode->g_Q16 = totalMoveCost;\n                prospectiveNode->h_Q16 = AStarNodeDistanceHuristic(search, prospectiveNode, targetNode);\n                \n                prospectiveNode->prevOPtr = currentOPtr;\n\n                //printf(\"G: \"); PrintQ16(prospectiveNode->g_Q16); printf(\"H: \");  PrintQ16(prospectiveNode->h_Q16);\n                AStarAddToOpen(search, prospectiveNodeOPtr);\n            }\n        }\n\n        iterations--;\n    }\n\n    \n    if(search->openHeapSize > 0)\n    {\n        printf(\"AStarPathFindingProgress_Searching, openHeap Size: %d\\n\", search->openHeapSize);\n        search->state = AStarPathFindingProgress_Searching;\n        return search->state;\n\n    }\n    else\n    {\n        printf(\"AStarPathFindingProgress_Failed\");\n        search->state = AStarPathFindingProgress_Failed;\n        return search->state;\n    }\n\n}\n\ncl_uchar AStarSearch_BFS_Routine(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER AStarSearch_BFS* search, ge_int3 startTile, ge_int3 destTile, int startIterations)\n{\n    if (MapTileCoordValid(startTile,1) == 0)\n    {\n        printf(\"AStarSearch_BFS_Routine: Start MapCoord Not Valid.\\n\");\n        return AStarPathFindingProgress_Failed;\n    }\n    if (MapTileCoordValid(destTile,1) == 0)\n    {\n        printf(\"AStarSearch_BFS_Routine: Dest MapCoord Not Valid.\\n\");\n        return AStarPathFindingProgress_Failed;\n    }\n    if (MapTileCoordStandInValid(ALL_CORE_PARAMS_PASS, startTile) == 0)\n    {\n        printf(\"AStarSearch_BFS_Routine: Start Stand In Invalid.\\n\");\n        return AStarPathFindingProgress_Failed;\n    }\n    if (MapTileCoordStandInValid(ALL_CORE_PARAMS_PASS, destTile)==0)\n    {\n        printf(\"AStarSearch_BFS_Routine: Dest Stand In Invalid.\\n\");\n        return AStarPathFindingProgress_Failed;\n    }\n\n    printf(\"starting search\\n\");\n    search->state = AStarPathFindingProgress_Searching;\n    search->startNodeOPtr = (offsetPtr3){startTile.x,startTile.y,startTile.z};\n    search->endNodeOPtr = (offsetPtr3){destTile.x,destTile.y,destTile.z};\n    \n    USE_POINTER AStarNode* startNode;\n    USE_POINTER AStarNode* targetNode;\n    OFFSET_TO_PTR_3D(search->details, search->startNodeOPtr,startNode);\n    OFFSET_TO_PTR_3D(search->details, search->endNodeOPtr,targetNode);\n\n    //add start to openList\n    startNode->h_Q16 = AStarNodeDistanceHuristic(search, startNode, targetNode);\n    AStarAddToOpen(search, search->startNodeOPtr );\n\n\n    return AStarSearch_BFS_Continue(ALL_CORE_PARAMS_PASS, search, startIterations);\n}\nbool AStarSearch_IDA_Node_In_Path(PARAM_GLOBAL_POINTER AStarSearch_IDA* search, AStarNode_IDA* node)\n{\n    for(int i = 0; i < search->pathEndIdx; i++)\n    {\n        if(VECTOR3_EQUAL(search->path[i].tileLoc, node->tileLoc))\n            return true;\n    }\n    return false;\n}\nbool AStarSearch_IDA_Loc_In_Path(PARAM_GLOBAL_POINTER AStarSearch_IDA* search, ge_short3 loc)\n{\n    for(int i = 0; i < search->pathEndIdx; i++)\n    {\n        if(VECTOR3_EQUAL(search->path[i].tileLoc, loc))\n            return true;\n    }\n    return false;\n}\nvoid AStarSearch_IDA_InitNode(PARAM_GLOBAL_POINTER AStarSearch_IDA* search, PARAM_GLOBAL_POINTER AStarNode_IDA* node)\n{\n    node->tileLoc = (ge_short3)(-1,-1,-1);\n    for(int i = 0; i <= 25; i++)\n        node->searchedSuccessors[i] = false;\n}\n\nge_short3 AStarSearch_IDA_NodeGrabNextBestSuccessor(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER AStarSearch_IDA* search, PARAM_GLOBAL_POINTER AStarNode_IDA* node,  int* hCost,  bool* failed)\n{\n\n    int minCost = INT_MAX;\n    int minCosti = 0;\n    int i;\n    *failed = true;\n    for (i = 0; i <= 3; i++)\n    { \n        if(node->searchedSuccessors[i])\n            continue;\n\n        ge_short3 prospectiveTileCoord;\n        ge_int3 dir = staticData->directionalOffsets[i];\n        prospectiveTileCoord.x = node->tileLoc.x + dir.x;\n        prospectiveTileCoord.y = node->tileLoc.y + dir.y;\n        prospectiveTileCoord.z = node->tileLoc.z + dir.z;\n\n        if (MapTileCoordValid(SHORT3_TO_INT3( prospectiveTileCoord),1)==0)\n        {\n            continue;\n        }\n\n        USE_POINTER cl_uint* data = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, SHORT3_TO_INT3( prospectiveTileCoord));\n        MapTile tile = MapDataGetTile(*data);\n        if (tile != MapTile_NONE)\n        {\n            continue;\n        }\n\n\n\n        int cost = AStarNodeDistanceHuristic_IDA(search, prospectiveTileCoord, search->endLoc);\n        if(cost < minCost)\n        {\n            minCost = cost;\n            minCosti = i;\n        }\n        *failed = false;\n    }\n\n\n\n    *hCost = minCost;\n    node->searchedSuccessors[minCosti] = true;\n    return  node->tileLoc + INT3_TO_SHORT3( staticData->directionalOffsets[minCosti] );\n}\n\nint AStarSearch_IDA_Search(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER AStarSearch_IDA* search)\n{\n    int pathRootsStack[ASTARSEARCH_IDA_PATHMAXSIZE];\n    int rootStackIdx=0;\n\n    cl_long iterations = 0;\n    while(true)\n    {\n        USE_POINTER AStarNode_IDA* node = &search->path[search->pathEndIdx];\n        int h = AStarNodeDistanceHuristic_IDA(search, node->tileLoc, search->endLoc);\n        int f = node->gCost + h;\n        \n        printf(\"\\nsearching..\");Print_GE_SHORT3(node->tileLoc);\n        iterations++;\n        if(f > search->bound)\n        {\n            //cost is too much - pop.\n            search->pathEndIdx--; \n            printf(\"pop\\n\");\n            if(search->pathEndIdx <=0) \n            {\n                printf(\"The cost is too much.\\n\");\n                search->pathEndIdx = 0;\n                search->state = AStarPathFindingProgress_Failed;\n                return 0;\n            }\n                \n            \n\n            continue;\n        }\n            \n\n        if(VECTOR3_EQUAL(node->tileLoc, search->endLoc))\n        {\n            printf(\"AStarSearch_IDA_Search Found Goal\\n\");\n            printf(\"Iterations: %d\\n\", iterations);\n            search->state = AStarPathFindingProgress_Finished;\n            search->pathOPtr = AStarFormPathSteps_IDA(ALL_CORE_PARAMS_PASS , search, &gameState->paths);\n            return 0;//found\n        }\n            \n\n        int min = INT_MAX;\n\n\n        //choose successor\n        int hcost;\n        bool failed;\n        ge_short3 sLoc = AStarSearch_IDA_NodeGrabNextBestSuccessor(ALL_CORE_PARAMS_PASS, search,  node, &hcost, &failed);\n        if(failed)\n        {\n            //pop.\n            search->pathEndIdx--; \n            printf(\"pop\\n\");\n            if(search->pathEndIdx <=0) \n            {\n                printf(\"The cost is too much.\\n\");\n                printf(\"Iterations: %d\\n\", iterations);\n                search->pathEndIdx = 0;\n                search->state = AStarPathFindingProgress_Failed;\n                return 0;\n            }\n            continue;\n        }\n\n\n        int costDiff = h - hcost;//cost of transition\n        \n\n        if(!AStarSearch_IDA_Loc_In_Path(search, sLoc))\n        {\n            //Push\n            search->pathEndIdx++;\n            //AStarSearch_IDA_InitNode(search, &search->path[search->pathEndIdx]);\n            search->path[search->pathEndIdx].tileLoc = (sLoc);\n            search->path[search->pathEndIdx].gCost = node->gCost + costDiff;\n            printf(\"push\\n\");\n        }\n        //endloop\n    }\n\n    search->state = AStarPathFindingProgress_Failed;\n    return 0;\n}\n\n\nAStarPathFindingProgress AStarSearch_IDA_Continue(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER AStarSearch_IDA* search, int iterations)\n{\n    search->t = AStarSearch_IDA_Search(ALL_CORE_PARAMS_PASS, search);\n    if(search->t == 0)\n    {\n        //path found\n        search->state = AStarPathFindingProgress_Finished;\n        printf(\"AStarSearch_IDA_Continue Path Found\\n\");\n    }\n    if(search->t == 10000)\n    {\n        //not found\n        search->state = AStarPathFindingProgress_Failed;\n        printf(\"AStarSearch_IDA_Continue Path Failed\\n\");\n    }\n    search->bound = search->t ;\n}\n\n\n\n\ncl_uchar AStarSearch_IDA_Routine(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER AStarSearch_IDA* search, ge_short3 startTile, ge_short3 destTile, int startIterations)\n{\n    if (MapTileCoordValid(SHORT3_TO_INT3( startTile ),1) == 0)\n    {\n        printf(\"AStarSearch_IDA_Routine: Start MapCoord Not Valid.\\n\");\n        return 0;\n    }\n    if (MapTileCoordValid(SHORT3_TO_INT3(destTile),1) == 0)\n    {\n        printf(\"AStarSearch_IDA_Routine: Dest MapCoord Not Valid.\\n\");\n        return 0;\n    }\n    if (MapTileCoordStandInValid(ALL_CORE_PARAMS_PASS, SHORT3_TO_INT3(startTile)) == 0)\n    {\n        printf(\"AStarSearch_IDA_Routine: Start Stand In Invalid.\\n\");\n        return 0;\n    }\n    if (MapTileCoordStandInValid(ALL_CORE_PARAMS_PASS, SHORT3_TO_INT3(destTile))==0)\n    {\n        printf(\"AStarSearch_IDA_Routine: Dest Stand In Invalid.\\n\");\n        return 0;\n    }\n\n    printf(\"AStarSearch_IDA_Routine: starting search\\n\");\n    search->state = AStarPathFindingProgress_Searching;\n\n\n    search->bound = AStarNodeDistanceHuristic_IDA(search, startTile, destTile);\n    search->path[0].tileLoc = startTile;\n    search->pathEndIdx=0;\n    search->startLoc = startTile;\n    search->endLoc = destTile;\n\n    return AStarSearch_IDA_Continue(ALL_CORE_PARAMS_PASS, search, startIterations);\n}\n\n\n\nRETURN_POINTER cl_uint* AStarPathNode_GetMapData(ALL_CORE_PARAMS, AStarPathNode* node)\n{\n    ge_int3 coord;\n    coord = GE_INT3_WHOLE_Q16(node->mapCoord_Q16);\n    #ifdef DEBUG\n    if(MapTileCoordValid(coord,1) == 0)\n    {   \n        CL_THROW_ASSERT();\n        return NULL;\n    }\n    #endif\n\n    return MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, coord);\n}\n\n\n\n\n//get the last path node from a node in a path\noffsetPtr AStarPathNode_LastPathNode(PARAM_GLOBAL_POINTER AStarPathSteps* steps, offsetPtr pathNodeOPtr)\n{\n    offsetPtr curNodeOPtr = pathNodeOPtr;\n    USE_POINTER AStarPathNode* curNode;\n    OFFSET_TO_PTR(steps->pathNodes, curNodeOPtr, curNode);\n\n\n    while(curNode->nextOPtr != OFFSET_NULL)\n    {\n        OFFSET_TO_PTR(steps->pathNodes, curNode->nextOPtr, curNode);\n        curNodeOPtr = curNode->nextOPtr;\n    }\n    return curNodeOPtr;\n}\n\n\n\ncl_uchar BaryCentric_In_Triangle_Q16(ge_int3 baryCoords)\n{\n    if (baryCoords.x >= 0 && baryCoords.x <= TO_Q16(1))\n    {\n        if (baryCoords.y >= 0 && baryCoords.y <= TO_Q16(1))\n        {\n            if (baryCoords.z >= 0 && baryCoords.z <= TO_Q16(1))\n            {\n                return 1;\n            }\n        }\n    }\n    return 0;\n}\n\n\nint SOME_INTERNAL_CORDIST(int x, int y)\n{\n    if (y <= 0.0)\n    {\n        return -y;\n    }\n    else if (x <= 0)\n        return  x;\n    else\n        return 0;\n}\n\nge_int3 Triangle3D_ToBaryCentric( Triangle3DHeavy* triangle, ge_int3 point)\n{\n    ge_int3 U = triangle->u_Q16;\n    ge_int3 V = triangle->v_Q16;\n    ge_int3 W = INT3_SUB(point, triangle->base.verts_Q16[0]);\n\n\n    long d00 = GE_INT3_DOT_PRODUCT_Q16(U , U );\n    long d01 = GE_INT3_DOT_PRODUCT_Q16(U , V);\n    long d11 = GE_INT3_DOT_PRODUCT_Q16(V , V);\n    long d20 = GE_INT3_DOT_PRODUCT_Q16(W , U);\n    long d21 = GE_INT3_DOT_PRODUCT_Q16(W , V);\n    long denom = MUL_PAD_Q16( d00 , d11 ) - MUL_PAD_Q16(d01 , d01);\n    long u, v, w;\n    v = DIV_PAD_Q16((MUL_PAD_Q16(d11 , d20) - MUL_PAD_Q16(d01 , d21)) , denom);\n    w = DIV_PAD_Q16((MUL_PAD_Q16(d00 , d21) - MUL_PAD_Q16(d01 , d20)) , denom);\n    u = (TO_Q16(1) - v ) - w;\n    return (ge_int3) {\n        u, v, w\n    };\n}\n\nge_int3 Triangle3DHeavy_ClosestPoint( Triangle3DHeavy* triangle, ge_int3 point_Q16, int* dist_Q16)\n{   \n    ge_int3 P1 = triangle->base.verts_Q16[0];\n    ge_int3 P2 = triangle->base.verts_Q16[1];\n    ge_int3 P3 = triangle->base.verts_Q16[2];\n\n    \n    //printf(\"P1: \");\n    //Print_GE_INT3_Q16(P1);\n    //printf(\"P2: \");\n    //Print_GE_INT3_Q16(P2);\n    //printf(\"P3: \");\n    //Print_GE_INT3_Q16(P3);\n\n\n    ge_int3 P_prime;\n    ge_int3 P_prime_bary;\n\n    int Nmag;\n    ge_int3 N_n = GE_INT3_NORMALIZE_Q16(triangle->normal_Q16, &Nmag);\n    //printf(\"N_n: \");\n    //Print_GE_INT3_Q16(N_n);\n\n\n    ge_int3 W = INT3_SUB(point_Q16, P1);\n\n    //printf(\"W: \");\n    //Print_GE_INT3_Q16(W);\n\n\n    int dot = GE_INT3_DOT_PRODUCT_Q16(W, N_n);\n    //printf(\"dot: \");\n    //PrintQ16(dot);\n    ge_int3 term2 = GE_INT3_SCALAR_MUL_Q16(dot, INT3_NEG(N_n));\n    P_prime = INT3_ADD(point_Q16, term2);\n\n\n    //Triangle2DHeavy_ProjectedPoint(triangle, point_Q16, &P_prime_bary, &P_prime);\n\n    //printf(\"P_prime: \");\n    //Print_GE_INT3_Q16(P_prime);\n\n    P_prime_bary = Triangle3D_ToBaryCentric(triangle, P_prime);\n    //printf(\"P_prime_bary: \");\n    //Print_GE_INT3_Q16(P_prime_bary);\n    cl_uchar onSurface = BaryCentric_In_Triangle_Q16(P_prime_bary);\n\n    if (onSurface == 1)\n    {\n        *dist_Q16 = ge_length_v3_Q16(INT3_SUB(point_Q16, P_prime));\n\n        return P_prime;\n    }\n\n    ge_int3 P1_P_prime = INT3_SUB(P_prime, P1);\n    ge_int3 P2_P_prime = INT3_SUB(P_prime, P2);\n    ge_int3 P3_P_prime = INT3_SUB(P_prime, P3);\n\n    ge_int3 R1 = INT3_SUB(P1, P2);\n    ge_int3 R2 = INT3_SUB(P2, P3);\n    ge_int3 R3 = INT3_SUB(P3, P1);\n\n    int R1_mag;\n    ge_int3 R1_N = GE_INT3_NORMALIZE_Q16(R1, &R1_mag);\n    int R2_mag;\n    ge_int3 R2_N = GE_INT3_NORMALIZE_Q16(R2, &R2_mag);\n    int R3_mag;\n    ge_int3 R3_N = GE_INT3_NORMALIZE_Q16(R3, &R3_mag);\n\n\n    ge_int3 R1_N_PERP = GE_VECTOR3_ROTATE_ABOUT_AXIS_POS90_Q16(R1_N, triangle->normal_Q16);\n    ge_int3 R2_N_PERP = GE_VECTOR3_ROTATE_ABOUT_AXIS_POS90_Q16(R2_N, triangle->normal_Q16);\n    ge_int3 R3_N_PERP = GE_VECTOR3_ROTATE_ABOUT_AXIS_POS90_Q16(R3_N, triangle->normal_Q16);\n\n\n    int DOT1 = GE_INT3_DOT_PRODUCT_Q16(P1_P_prime, R3_N_PERP);\n    int DOT2 = GE_INT3_DOT_PRODUCT_Q16(P2_P_prime, R1_N_PERP);\n    int DOT3 = GE_INT3_DOT_PRODUCT_Q16(P3_P_prime, R2_N_PERP);\n\n\n    ge_int3 D1R3 = GE_INT3_SCALAR_MUL_Q16(DOT1, R3_N_PERP);\n    ge_int3 D2R1 = GE_INT3_SCALAR_MUL_Q16(DOT2, R1_N_PERP);\n    ge_int3 D3R2 = GE_INT3_SCALAR_MUL_Q16(DOT3, R2_N_PERP);\n\n\n    //p_prime projected to 3 edges\n    ge_int3 P_prime_C1 = INT3_SUB(P_prime, D1R3);\n    ge_int3 P_prime_C2 = INT3_SUB(P_prime, D2R1);\n    ge_int3 P_prime_C3 = INT3_SUB(P_prime, D3R2);\n\n\n    //clamp C points to edge limits\n    int Z1i = GE_INT3_DOT_PRODUCT_Q16(P1_P_prime, R3_N);\n    int Z2i = GE_INT3_DOT_PRODUCT_Q16(P2_P_prime, R1_N);\n    int Z3i = GE_INT3_DOT_PRODUCT_Q16(P3_P_prime, R2_N);\n\n    int Z1 = R3_mag - Z1i;\n    int Z2 = R1_mag - Z2i;\n    int Z3 = R2_mag - Z3i;\n\n\n    int CD1 = SOME_INTERNAL_CORDIST(Z1, Z1i);\n    int CD2 = SOME_INTERNAL_CORDIST(Z2, Z2i);\n    int CD3 = SOME_INTERNAL_CORDIST(Z3, Z3i);\n\n\n    ge_int3 J1 = GE_INT3_SCALAR_MUL_Q16(CD1, R3_N);\n    ge_int3 J2 = GE_INT3_SCALAR_MUL_Q16(CD2, R1_N);\n    ge_int3 J3 = GE_INT3_SCALAR_MUL_Q16(CD3, R2_N);\n\n    ge_int3 L1 = INT3_ADD(J1, P_prime_C1);\n    ge_int3 L2 = INT3_ADD(J2, P_prime_C2);\n    ge_int3 L3 = INT3_ADD(J3, P_prime_C3);\n\n    //get closest L to P_prime\n    int L1D = ge_length_v3_Q16( INT3_SUB(L1, P_prime) );\n    int L2D = ge_length_v3_Q16( INT3_SUB(L2, P_prime) );\n    int L3D = ge_length_v3_Q16( INT3_SUB(L3, P_prime) );\n\n\n    if (L1D < L2D && L1D < L2D)\n    {\n        *dist_Q16 = ge_length_v3_Q16(INT3_SUB(point_Q16, L1));\n\n        return L1;\n    }\n    else if (L2D < L1D && L2D < L3D)\n    {\n        *dist_Q16 = ge_length_v3_Q16(INT3_SUB(point_Q16, L2));\n\n        return L2;\n    }\n    else\n    {\n        *dist_Q16 = ge_length_v3_Q16(INT3_SUB(point_Q16, L3));\n\n        return L3;\n    }\n\n}\n\n\n\nvoid Triangle3DMakeHeavy( Triangle3DHeavy* triangle)\n{\n    triangle->u_Q16 = INT3_SUB(triangle->base.verts_Q16[1], triangle->base.verts_Q16[0]);//P_2 - P_1\n    triangle->v_Q16 = INT3_SUB(triangle->base.verts_Q16[2], triangle->base.verts_Q16[0]);//P_3 - P_1\n\n\n    triangle->normal_Q16 =  GE_INT3_CROSS_PRODUCT_Q16(triangle->u_Q16, triangle->v_Q16);\n\n\n    if (GE_INT3_DOT_PRODUCT_Q16(triangle->normal_Q16, triangle->normal_Q16) < (TO_Q16(1) >> 5)){\n        //printf(\"Warning! Small triangle!\\n\");\n        triangle->valid = 0;\n    }\n    else{\n        triangle->valid = 1;\n    }\n\n}\nvoid Triangle3D_Make2Face( Triangle3DHeavy* triangle1,  Triangle3DHeavy* triangle2, ge_int3* fourCorners)\n{\n    triangle1->base.verts_Q16[0] = fourCorners[0];\n    triangle1->base.verts_Q16[1] = fourCorners[1];\n    triangle1->base.verts_Q16[2] = fourCorners[2];\n\n    triangle2->base.verts_Q16[0] = fourCorners[2];\n    triangle2->base.verts_Q16[1] = fourCorners[3];\n    triangle2->base.verts_Q16[2] = fourCorners[0];\n\n    Triangle3DMakeHeavy(triangle1);\n    Triangle3DMakeHeavy(triangle2);\n}\n\n\n\nvoid MapTileConvexHull_From_TileData( ConvexHull* hull,  cl_int* tileData)\n{\n    ge_int3 A = (ge_int3){ TO_Q16(-1) >> 1, TO_Q16(-1) >> 1, TO_Q16(-1) >> 1 };\n    ge_int3 B = (ge_int3){ TO_Q16(1) >> 1, TO_Q16(-1) >> 1, TO_Q16(-1) >> 1 };\n    ge_int3 C = (ge_int3){ TO_Q16(1) >> 1, TO_Q16(1) >> 1, TO_Q16(-1) >> 1 };\n    ge_int3 D = (ge_int3){ TO_Q16(-1) >> 1, TO_Q16(1) >> 1, TO_Q16(-1) >> 1 };\n\n    \n    ge_int3 E = (ge_int3){ TO_Q16(-1) >> 1, TO_Q16(-1) >> 1, TO_Q16(1) >> 1 };\n    ge_int3 F = (ge_int3){ TO_Q16(1) >> 1, TO_Q16(-1) >> 1, TO_Q16(1) >> 1 };\n    ge_int3 G = (ge_int3){ TO_Q16(1) >> 1, TO_Q16(1) >> 1, TO_Q16(1) >> 1 };\n    ge_int3 H = (ge_int3){ TO_Q16(-1) >> 1, TO_Q16(1) >> 1, TO_Q16(1) >> 1 };\n    ge_int3 X = (ge_int3){ 0, 0, TO_Q16(1) >> 1 };\n\n    cl_uchar lowCornerCount = MapDataLowCornerCount(*tileData);\n\n    if (lowCornerCount > 0) \n    {\n        if (BITGET_MF(*tileData, MapTileFlags_LowCornerBTMLEFT) != 0)\n            H.z = (TO_Q16(-1) >> 1);\n\n        if (BITGET_MF(*tileData, MapTileFlags_LowCornerBTMRIGHT) != 0)\n            G.z = (TO_Q16(-1) >> 1);\n\n        if (BITGET_MF(*tileData, MapTileFlags_LowCornerTPLEFT) != 0)\n            E.z = (TO_Q16(-1) >> 1);\n\n        if (BITGET_MF(*tileData, MapTileFlags_LowCornerTPRIGHT) != 0)\n            F.z = (TO_Q16(-1) >> 1);\n\n\n        //simple ramp cases\n        uint xlevel = MapDataXLevel(tileData);\n        if(xlevel == 0)\n        {\n            X.z = 0;\n        }\n        else if(xlevel == 1)\n        {\n            X.z = TO_Q16(-1) >> 1;\n        }\n\n\n\n    }\n\n\n    int i = 0;\n    //bottom (1)\n    ge_int3 bottomFace[4];\n    bottomFace[0] = A;\n    bottomFace[1] = B;\n    bottomFace[2] = C;\n    bottomFace[3] = D;\n    Triangle3D_Make2Face(&hull->triangles[i], &hull->triangles[i+1], &bottomFace[0]);\n    i+=2;\n\n\n    ge_int3 NegYFace[4];\n    NegYFace[0] = A;\n    NegYFace[1] = E;\n    NegYFace[2] = F;\n    NegYFace[3] = B;\n    Triangle3D_Make2Face(&hull->triangles[i], &hull->triangles[i+1], &NegYFace[0]);\n    i+=2;\n\n    ge_int3 POSYFace[4];\n    POSYFace[0] = C;\n    POSYFace[1] = G;\n    POSYFace[2] = H;\n    POSYFace[3] = D;\n    Triangle3D_Make2Face(&hull->triangles[i], &hull->triangles[i+1], &POSYFace[0]);\n    i+=2;\n\n    ge_int3 POSXFace[4];\n    POSXFace[0] = B;\n    POSXFace[1] = F;\n    POSXFace[2] = G;\n    POSXFace[3] = C;\n    Triangle3D_Make2Face(&hull->triangles[i], &hull->triangles[i+1], &POSXFace[0]);\n    i+=2;\n\n    ge_int3 NEGXFace[4];\n    NEGXFace[0] = D;\n    NEGXFace[1] = H;\n    NEGXFace[2] = E;\n    NEGXFace[3] = A;\n    Triangle3D_Make2Face(&hull->triangles[i], &hull->triangles[i+1], &NEGXFace[0]);\n    i+=2;\n\n    ge_int3 TOPFace1[4];\n    TOPFace1[0] = X;\n    TOPFace1[1] = G;\n    TOPFace1[2] = F;\n    TOPFace1[3] = E;\n    Triangle3D_Make2Face(&hull->triangles[i], &hull->triangles[i+1], &TOPFace1[0]);\n    i+=2;\n\n    ge_int3 TOPFace2[4];\n    TOPFace2[0] = X;\n    TOPFace2[1] = E;\n    TOPFace2[2] = H;\n    TOPFace2[3] = G;\n    Triangle3D_Make2Face(&hull->triangles[i], &hull->triangles[i+1], &TOPFace2[0]);\n    i+=2;\n\n}\n\n\n\n\nvoid PeepPrint(Peep* peep)\n{\n    PrintQ16(peep->physics.drive.target_x_Q16);\n}\n\n\nvoid PeepPeepPhysics(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER Peep* peep, PARAM_GLOBAL_POINTER Peep* otherPeep)\n{\n\n    //calculate force based on penetration distance with otherPeep.\n    ge_int3 d_Q16 = INT3_ADD(otherPeep->physics.base.pos_Q16, INT3_NEG(peep->physics.base.pos_Q16));\n    cl_int combined_r_Q16 = peep->physics.shape.radius_Q16 + otherPeep->physics.shape.radius_Q16;\n    cl_int len_Q16;\n\n\n    ge_int3 penV_Q16 = d_Q16;\n    ge_normalize_v3_Q16(&penV_Q16, &len_Q16);\n\n    if (len_Q16 > peep->physics.shape.radius_Q16 * 2)\n        return;\n\n    cl_int penetrationDist_Q16 = (len_Q16 - (combined_r_Q16));\n    ge_int3 penetrationForce_Q16;\n\n\n    //pos_post_Q16\n    peep->physics.base.pos_post_Q16.x += MUL_PAD_Q16(penV_Q16.x, penetrationDist_Q16 >> 2);\n    peep->physics.base.pos_post_Q16.y += MUL_PAD_Q16(penV_Q16.y, penetrationDist_Q16 >> 2);\n\n    //otherPeep->physics.base.pos_post_Q16.x -= MUL_PAD_Q16(penV_Q16.x, penetrationDist_Q16 >> 1);\n    //otherPeep->physics.base.pos_post_Q16.y -= MUL_PAD_Q16(penV_Q16.y, penetrationDist_Q16 >> 1);\n\n    //peep->physics.base.pos_post_Q16.z += MUL_PAD_Q16(penV_Q16.z, penetrationDist_Q16 >> 1);//dont encourage peeps standing on each other\n\n\n    //V' = V - penV*(V.penV)\n    //DeltaV = -penV*(V.penV)\n\n    cl_int dot;\n    ge_dot_product_3D_Q16(peep->physics.base.v_Q16, penV_Q16, &dot);\n    if (dot > 0) {\n        peep->physics.base.vel_add_Q16.x += -MUL_PAD_Q16(penV_Q16.x, dot);\n        peep->physics.base.vel_add_Q16.y += -MUL_PAD_Q16(penV_Q16.y, dot);\n        //peep->physics.base.vel_add_Q16.z += -MUL_PAD_Q16(penV_Q16.z, dot);//dont encourage peeps standing on each other\n\n        //otherPeep->physics.base.vel_add_Q16.x -= -MUL_PAD_Q16(penV_Q16.x, dot);\n        //otherPeep->physics.base.vel_add_Q16.y -= -MUL_PAD_Q16(penV_Q16.y, dot);\n    }\n\n    //spread messages\n    if (peep->comms.orders_channel == otherPeep->comms.orders_channel)\n    {\n        if (otherPeep->comms.message_TargetReached)\n        {\n            peep->comms.message_TargetReached_pending = otherPeep->comms.message_TargetReached;\n        }\n    }\n\n}\n\nvoid PeepToPeepInteraction(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER Peep* peep, PARAM_GLOBAL_POINTER Peep* otherPeep)\n{\n    if (peep->stateBasic.deathState != 0 || otherPeep->stateBasic.deathState != 0)\n        return;\n\n\n    cl_int dist_Q16 = ge_length_v3_Q16(INT3_ADD(peep->physics.base.pos_Q16, -otherPeep->physics.base.pos_Q16));\n\n    if (dist_Q16 < peep->minDistPeep_Q16)\n    {\n        peep->minDistPeep_Q16 = dist_Q16;\n        peep->minDistPeepPtr = otherPeep->ptr;\n    }\n    \n\n    PeepPeepPhysics(ALL_CORE_PARAMS_PASS, peep, otherPeep);\n}\n\nvoid WorldToMap(ge_int3 world_Q16, ge_int3* out_map_tilecoords_Q16)\n{\n\n    ge_int3 b = { TO_Q16(MAP_TILE_SIZE) ,TO_Q16(MAP_TILE_SIZE) ,TO_Q16(MAP_TILE_SIZE) };\n    ge_int3 map_coords_Q16 = DIV_v3_Q16(world_Q16, b);\n\n    map_coords_Q16.x += (TO_Q16(MAPDIM) >> 1);//MAPDIM*0.5f\n    map_coords_Q16.y += (TO_Q16(MAPDIM) >> 1);//MAPDIM*0.5f.\n    *out_map_tilecoords_Q16 = map_coords_Q16;\n}\n\nvoid MapToWorld(ge_int3 map_tilecoords_Q16, ge_int3* world_Q16)\n{\n    ge_int3 b = { TO_Q16(MAP_TILE_SIZE) ,TO_Q16(MAP_TILE_SIZE) ,TO_Q16(MAP_TILE_SIZE) };\n\n    map_tilecoords_Q16.x -= (TO_Q16(MAPDIM) >> 1);//MAPDIM*0.5f\n    map_tilecoords_Q16.y -= (TO_Q16(MAPDIM) >> 1);//MAPDIM*0.5f\n\n    *world_Q16 = GE_INT3_MUL_Q16(map_tilecoords_Q16, b);\n\n}\n\n\nvoid PeepGetMapTile(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER Peep* peep, ge_int3 offset, \n MapTile* out_map_tile, \n ge_int3* out_tile_world_pos_center_Q16,\n  ge_int3* out_map_tile_coord_whole, \n   cl_int* out_tile_data)\n{\n    (*out_map_tile_coord_whole).z = WHOLE_Q16(peep->posMap_Q16.z) + (offset.z);\n    (*out_map_tile_coord_whole).x = WHOLE_Q16(peep->posMap_Q16.x) + (offset.x);\n    (*out_map_tile_coord_whole).y = WHOLE_Q16(peep->posMap_Q16.y) + (offset.y);\n\n    ge_int3 tileCoords_Q16;\n    tileCoords_Q16.x = TO_Q16((* out_map_tile_coord_whole).x) + (TO_Q16(1) >> 1);//center of tile\n    tileCoords_Q16.y = TO_Q16((* out_map_tile_coord_whole).y) + (TO_Q16(1) >> 1);//center of tile\n    tileCoords_Q16.z = TO_Q16((* out_map_tile_coord_whole).z) + (TO_Q16(1) >> 1);//center of tile\n\n    MapToWorld(tileCoords_Q16, out_tile_world_pos_center_Q16);\n\n\n    if ((*out_map_tile_coord_whole).z < 0 || (*out_map_tile_coord_whole).z >= (MAPDEPTH))\n    {\n        *out_map_tile = MapTile_NONE;\n        return;\n    }\n    if ((*out_map_tile_coord_whole).x < 0 || (*out_map_tile_coord_whole).x >= (MAPDIM))\n    {\n        *out_map_tile = MapTile_NONE;\n        return;\n    }\n    if ((*out_map_tile_coord_whole).y < 0 || (*out_map_tile_coord_whole).y >= (MAPDIM))\n    {\n        *out_map_tile = MapTile_NONE;\n        return;\n    }\n    \n    *out_tile_data = gameState->map.levels[(*out_map_tile_coord_whole).z].data[(*out_map_tile_coord_whole).x][(*out_map_tile_coord_whole).y];\n    *out_map_tile = MapDataGetTile(*out_tile_data);\n    \n}\n\nvoid RegionCollision(PARAM_GLOBAL_POINTER cl_int* out_pen_Q16, cl_int radius_Q16, cl_int W, cl_int lr)\n{\n    if (W > 0 && lr == -1)//left outside\n    {\n        *out_pen_Q16 = -(radius_Q16 - W);\n        *out_pen_Q16 = clamp(*out_pen_Q16, -(radius_Q16), 0);\n    }\n    else if (W < 0 && lr == 1)//right outside\n    {\n        *out_pen_Q16 = (radius_Q16 + W);\n        *out_pen_Q16 = clamp(*out_pen_Q16, 0, radius_Q16);\n    }\n    else if (W > 0 && lr == 1)//right inside\n    {\n        *out_pen_Q16 = (W + radius_Q16);\n        *out_pen_Q16 = clamp(*out_pen_Q16, 0, W + radius_Q16);\n    }\n    else if (W < 0 && lr == -1)//left inside\n    {\n        *out_pen_Q16 = (W - radius_Q16);\n        *out_pen_Q16 = clamp(*out_pen_Q16, W - radius_Q16, 0);\n    }\n}\n\n\n\n\nge_int3 MapTileConvexHull_ClosestPointToPoint( ConvexHull* hull, ge_int3 point_Q16)\n{\n    int smallestDist_Q16 = TO_Q16(1000);\n    ge_int3 closestPoint;\n    for (int i = 0; i < 14; i++)\n    {\n        Triangle3DHeavy* tri = &hull->triangles[i];\n        if(tri->valid == 0)\n            continue;\n\n        int dist_Q16;\n        ge_int3 closest = Triangle3DHeavy_ClosestPoint(tri, point_Q16, &dist_Q16);\n        //printf(\"Dist(%d): \", i);\n        //PrintQ16(dist_Q16);\n        if (dist_Q16 < smallestDist_Q16)\n        {\n            smallestDist_Q16 = dist_Q16;\n            closestPoint = closest;\n        }\n    }\n    //printf(\"Chosen Dist: \");\n    //PrintQ16(smallestDist_Q16);\n    //printf(\"Chosen Point: \");\n    //Print_GE_INT3_Q16(closestPoint);\n    return closestPoint;\n}\n\ncl_uchar MapTileConvexHull_PointInside( ConvexHull* hull, ge_int3 point)\n{\n    //check dot product of point to verts against normal of the triangle\n    for (int i = 0; i < 14; i++)\n    {\n        Triangle3DHeavy* tri = &hull->triangles[i];\n        if(tri->valid == 0)\n            continue;\n\n        for(int v = 0; v < 3; v++)\n        {\n            ge_int3 vert = hull->triangles[i].base.verts_Q16[v];\n            \n            ge_int3 point_vert = INT3_SUB(point, vert);\n            //int mag;\n            //ge_int3 point_vert_normalized = GE_INT3_NORMALIZE_Q16(point_vert, &mag);\n\n            int dot = GE_INT3_DOT_PRODUCT_Q16(point_vert, hull->triangles[i].normal_Q16);\n            if(dot <= 0)\n                return 0;\n        }\n    }\n\n    return 1;\n}\n\nvoid PeepMapTileCollisions(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER Peep* peep)\n{\n\n    //maptile collisions\n    MapTile tiles[26];\n    ge_int3 tileCenters_Q16[26];\n    ge_int3 dummy;\n    cl_int tileDatas[26];\n\n\n    PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 1, 0, 0 }, & tiles[0], & tileCenters_Q16[0],&dummy, &tileDatas[0]);\n    PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { -1, 0, 0 }, & tiles[1], & tileCenters_Q16[1], &dummy, & tileDatas[1]);\n    PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 0, -1, 0 }, & tiles[2], & tileCenters_Q16[2], &dummy, & tileDatas[2]);\n    PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 0, 1, 0 }, & tiles[3], & tileCenters_Q16[3], &dummy, & tileDatas[3]);\n    PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 0, 0, 1 }, & tiles[4], & tileCenters_Q16[4], &dummy, & tileDatas[4]);\n    PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 0, 0, -1 }, & tiles[5], & tileCenters_Q16[5], &dummy, & tileDatas[5]);\n    PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 0, 0, 0 }, & tiles[6], & tileCenters_Q16[6],&dummy, &tileDatas[6]);\n    \n    // {\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){0, 0, 0}, &tiles[6], &tileCenters_Q16[6], &dummy, &tileDatas[5]);\n\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){1, 0, -1}, &tiles[6], &tileCenters_Q16[6], &dummy, &tileDatas[6]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){0, 1, -1}, &tiles[7], &tileCenters_Q16[7], &dummy, &tileDatas[7]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){1, 1, -1}, &tiles[8], &tileCenters_Q16[8], &dummy, &tileDatas[8]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){-1, 0, -1}, &tiles[9], &tileCenters_Q16[9], &dummy, &tileDatas[9]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){0, -1, -1}, &tiles[10], &tileCenters_Q16[10], &dummy, &tileDatas[10]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){-1, -1, -1}, &tiles[11], &tileCenters_Q16[11], &dummy, &tileDatas[11]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){1, -1, -1}, &tiles[12], &tileCenters_Q16[12], &dummy, &tileDatas[12]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){-1, 1, -1}, &tiles[13], &tileCenters_Q16[13], &dummy, &tileDatas[13]);\n\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){1, 0, 1}, &tiles[14], &tileCenters_Q16[14], &dummy, &tileDatas[14]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){0, 1, 1}, &tiles[15], &tileCenters_Q16[15], &dummy, &tileDatas[15]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){1, 1, 1}, &tiles[16], &tileCenters_Q16[16], &dummy, &tileDatas[16]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){-1, 0, 1}, &tiles[17], &tileCenters_Q16[17], &dummy, &tileDatas[17]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){0, -1, 1}, &tiles[18], &tileCenters_Q16[18], &dummy, &tileDatas[18]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){-1, -1, 1}, &tiles[19], &tileCenters_Q16[19], &dummy, &tileDatas[19]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){1, -1, 1}, &tiles[20], &tileCenters_Q16[20], &dummy, &tileDatas[20]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){-1, 1, 1}, &tiles[21], &tileCenters_Q16[21], &dummy, &tileDatas[21]);\n\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){1, 1, 0}, &tiles[22], &tileCenters_Q16[23], &dummy, &tileDatas[22]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){-1, 1, 0}, &tiles[23], &tileCenters_Q16[24], &dummy, &tileDatas[23]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){1, -1, 0}, &tiles[24], &tileCenters_Q16[25], &dummy, &tileDatas[24]);\n    //     PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3){-1, -1, 0}, &tiles[25], &tileCenters_Q16[26], &dummy, &tileDatas[25]);\n    // }\n    \n    //printf(\"peep Pos: \"); Print_GE_INT3_Q16(peep->physics.base.pos_Q16);\n    ConvexHull hull;//hull for use below\n    for (int i = 0; i < 7; i++)\n    {\n       \n        MapTile tile = tiles[i];\n        \n        if (tile != MapTile_NONE)\n        {\n            ge_int3 futurePos;\n            futurePos.x = (peep->physics.base.pos_Q16.x + peep->physics.base.pos_post_Q16.z) + peep->physics.base.v_Q16.x;\n            futurePos.y = (peep->physics.base.pos_Q16.y + peep->physics.base.pos_post_Q16.y) + peep->physics.base.v_Q16.y;\n            futurePos.z = (peep->physics.base.pos_Q16.z + peep->physics.base.pos_post_Q16.z) + peep->physics.base.v_Q16.z;\n\n            ge_int3 nearestPoint;\n            cl_uchar insideSolidRegion;\n  \n            MapTileConvexHull_From_TileData(&hull, &tileDatas[i]);\n            ge_int3 peepPosLocalToHull_Q16 = INT3_SUB(futurePos, tileCenters_Q16[i]);\n\n            peepPosLocalToHull_Q16 = GE_INT3_DIV_Q16(peepPosLocalToHull_Q16, (ge_int3) {\n                TO_Q16(MAP_TILE_SIZE), TO_Q16(MAP_TILE_SIZE)\n                    , TO_Q16(MAP_TILE_SIZE)\n            });\n\n            nearestPoint = MapTileConvexHull_ClosestPointToPoint(&hull, peepPosLocalToHull_Q16);\n            insideSolidRegion = MapTileConvexHull_PointInside(&hull, peepPosLocalToHull_Q16);\n\n            peep->stateBasic.buriedGlitchState = insideSolidRegion;\n\n            nearestPoint = GE_INT3_MUL_Q16(nearestPoint, (ge_int3) {\n                TO_Q16(MAP_TILE_SIZE), TO_Q16(MAP_TILE_SIZE)\n                    , TO_Q16(MAP_TILE_SIZE)\n            });\n\n            nearestPoint = INT3_ADD(nearestPoint, tileCenters_Q16[i]);\n        \n\n            ge_int3 A;\n            A.x = futurePos.x - nearestPoint.x;\n            A.y = futurePos.y - nearestPoint.y;\n            A.z = futurePos.z - nearestPoint.z;\n\n            //make A vector always point to outside the shape\n            if(insideSolidRegion==1){\n               A = INT3_NEG(A);\n               //printf(\"inside region!\");\n            }\n\n\n            ge_int3 An = A;\n            cl_int mag;\n            ge_normalize_v3_Q16(&An, &mag);\n\n\n            if (mag < peep->physics.shape.radius_Q16)\n            {\n                cl_int dot;\n                ge_int3 V = INT3_ADD(peep->physics.base.v_Q16 , peep->physics.base.vel_add_Q16);\n                ge_dot_product_3D_Q16( V, An, &dot);\n                ge_int3 B;//velocity to cancel\n                B.x = MUL_PAD_Q16(An.x, dot);\n                B.y = MUL_PAD_Q16(An.y, dot);\n                B.z = MUL_PAD_Q16(An.z, dot);\n\n\n                int pushAmt;\n                if(insideSolidRegion)\n                    pushAmt = (peep->physics.shape.radius_Q16 + mag);\n                else\n                    pushAmt = (peep->physics.shape.radius_Q16 - mag);\n\n                //corrections\n                peep->physics.base.pos_post_Q16.z += MUL_PAD_Q16(An.z, pushAmt);\n                peep->physics.base.pos_post_Q16.y += MUL_PAD_Q16(An.y, pushAmt);\n                peep->physics.base.pos_post_Q16.x += MUL_PAD_Q16(An.x, pushAmt);\n\n                \n                if((-B.z) < peep->physics.base.vel_add_Q16.z || (-B.z) > peep->physics.base.vel_add_Q16.z)\n                    peep->physics.base.vel_add_Q16.z += -B.z;\n                    \n                if ((-B.y) < peep->physics.base.vel_add_Q16.y || (-B.y) > peep->physics.base.vel_add_Q16.y)\n                    peep->physics.base.vel_add_Q16.y += -B.y;\n\n                if ((-B.x) < peep->physics.base.vel_add_Q16.x || (-B.x) > peep->physics.base.vel_add_Q16.x)\n                    peep->physics.base.vel_add_Q16.x += -B.x;\n                \n\n\n            }\n\n        }\n    }\n\n    //'game gravity'\n    //peep->physics.base.v_Q16.z += (TO_Q16(-1) >> 3);\n}\n\n\nvoid PeepDrivePhysics(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER Peep* peep)\n{\n    ge_int3 targetVelocity;\n\n    ge_int3 d;\n    d.x = peep->physics.drive.target_x_Q16 - peep->physics.base.pos_Q16.x;\n    d.y = peep->physics.drive.target_y_Q16 - peep->physics.base.pos_Q16.y;\n    d.z = peep->physics.drive.target_z_Q16 - peep->physics.base.pos_Q16.z;\n    int len;\n    ge_normalize_v3_Q16(&d, &len);\n\n    if (len < TO_Q16(1))\n    {\n        d.x = MUL_PAD_Q16(d.x, len);\n        d.y = MUL_PAD_Q16(d.y, len);\n        d.z = MUL_PAD_Q16(d.z, len);\n    }\n\n    if (WHOLE_Q16(len) < 2)//within range of current target\n    {\n\n\n        if (peep->physics.drive.targetPathNodeOPtr == OFFSET_NULL)\n        {\n            //final node reached.\n            peep->comms.message_TargetReached_pending = 255;//send the message\n            peep->physics.drive.drivingToTarget = 0;\n        }\n        else\n        {\n            //advance if theres room\n            USE_POINTER AStarPathNode* targetPathNode;\n            OFFSET_TO_PTR(gameState->paths.pathNodes, peep->physics.drive.targetPathNodeOPtr,targetPathNode);\n\n\n            USE_POINTER AStarPathNode* prevpathNode;\n            OFFSET_TO_PTR(gameState->paths.pathNodes, peep->physics.drive.prevPathNodeOPtr,prevpathNode);\n\n            //advance\n            peep->physics.drive.prevPathNodeOPtr = peep->physics.drive.targetPathNodeOPtr;        \n            peep->physics.drive.targetPathNodeOPtr = targetPathNode->nextOPtr;\n\n            \n            if (peep->physics.drive.targetPathNodeOPtr != OFFSET_NULL) \n            {\n                USE_POINTER AStarPathNode* targetPathNode;\n                OFFSET_TO_PTR(gameState->paths.pathNodes, peep->physics.drive.targetPathNodeOPtr,targetPathNode);\n                \n\n                ge_int3 nextTarget_Q16 = targetPathNode->mapCoord_Q16;\n                MapToWorld(nextTarget_Q16, &nextTarget_Q16);\n\n                peep->physics.drive.target_x_Q16 = nextTarget_Q16.x;\n                peep->physics.drive.target_y_Q16 = nextTarget_Q16.y;\n                peep->physics.drive.target_z_Q16 = nextTarget_Q16.z;\n            }\n            \n        }\n        \n    }\n\n   \n\n    //advacne if theres room\n    USE_POINTER AStarPathNode* targetPathNode;\n    OFFSET_TO_PTR(gameState->paths.pathNodes, peep->physics.drive.targetPathNodeOPtr,targetPathNode);\n   \n\n    // Print_GE_INT3_Q16(peep->physics.base.pos_Q16);\n    if(targetPathNode != NULL)\n    {\n        //cl_uint* mapData = AStarPathNode_GetMapData(ALL_CORE_PARAMS_PASS, targetPathNode);\n        \n        //CL_CHECK_NULL(mapData);\n        ge_int3 coord = GE_INT3_WHOLE_Q16(targetPathNode->mapCoord_Q16);\n        int peepCnt = gameState->map.levels[coord.z].peepCounts[coord.x][coord.y];\n\n        //if(peepCnt < PEEP_PATH_CROWD /*|| WHOLE_Q16(len) > 10 */)\n        {\n            targetVelocity.x = d.x >> 2;\n            targetVelocity.y = d.y >> 2;\n            targetVelocity.z = d.z >> 2;\n\n            ge_int3 error = INT3_SUB( targetVelocity, peep->physics.base.v_Q16 );\n\n            peep->physics.base.vel_add_Q16.x += error.x;\n            peep->physics.base.vel_add_Q16.y += error.y;\n            peep->physics.base.vel_add_Q16.z += error.z;\n        }\n        //else\n        {\n         //   printf(\"pc: %d, \",peepCnt);\n        }\n    }\n\n\n    peep->physics.base.CS_angle_rad = atan2(((float)(d.x))/(1<<16), ((float)(d.y)) / (1 << 16));\n\n\n\n\n}\n\nvoid WalkAndFight(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER Peep* peep)\n{\n\n\n\n    //if search is done - start the peep on path\n    if(peep->stateBasic.aStarSearchPtr != OFFSET_NULL)\n    {\n        USE_POINTER AStarSearch_BFS* search = &gameState->mapSearchers[0];\n        if(search->state == AStarPathFindingProgress_Finished)\n        {\n            peep->physics.drive.targetPathNodeOPtr = search->pathOPtr;\n            peep->physics.drive.prevPathNodeOPtr = OFFSET_NULL;\n            //AStarPathNode* nxtPathNode;\n            //OFFSET_TO_PTR(gameState->paths.pathNodes, peep->physics.drive.targetPathNodeOPtr, nxtPathNode);\n            \n\n           // printf(\"path assining to %d\\n\", search->pathOPtr);\n            peep->stateBasic.aStarSearchPtr = OFFSET_NULL;\n        }\n        \n    }\n\n\n    if(peep->physics.drive.targetPathNodeOPtr != OFFSET_NULL)\n    {\n\n\n        //drive to the next path node\n        USE_POINTER AStarPathNode* nxtPathNode;\n        OFFSET_TO_PTR(gameState->paths.pathNodes, peep->physics.drive.targetPathNodeOPtr, nxtPathNode);\n\n\n            ge_int3 worldloc;\n            MapToWorld(nxtPathNode->mapCoord_Q16, &worldloc);\n            peep->physics.drive.target_x_Q16 = worldloc.x;\n            peep->physics.drive.target_y_Q16 = worldloc.y;\n            peep->physics.drive.target_z_Q16 = worldloc.z;\n            peep->physics.drive.drivingToTarget = 1;\n\n            //restrict comms to new channel\n            peep->comms.orders_channel = RandomRange(worldloc.x, 0, 10000);//broke\n            peep->comms.message_TargetReached = 0;\n            peep->comms.message_TargetReached_pending = 0;\n\n    }\n\n\n\n    PeepDrivePhysics(ALL_CORE_PARAMS_PASS, peep);\n    PeepMapTileCollisions(ALL_CORE_PARAMS_PASS, peep);\n\n}\n\n\nvoid PeepPreUpdate1(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER Peep* peep)\n{\n\n}\n\nvoid PeepPreUpdate2(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER Peep* peep)\n{\n    peep->physics.base.v_Q16.z += peep->physics.base.vel_add_Q16.z;\n    peep->physics.base.v_Q16.y += peep->physics.base.vel_add_Q16.y;\n    peep->physics.base.v_Q16.x += peep->physics.base.vel_add_Q16.x;\n\n    peep->physics.base.vel_add_Q16.z = 0;\n    peep->physics.base.vel_add_Q16.y = 0;\n    peep->physics.base.vel_add_Q16.x = 0;\n\n\n\n\n    peep->physics.base.pos_Q16.x += peep->physics.base.v_Q16.x;\n    peep->physics.base.pos_Q16.y += peep->physics.base.v_Q16.y;\n    peep->physics.base.pos_Q16.z += peep->physics.base.v_Q16.z;\n\n    peep->physics.base.pos_Q16.z += peep->physics.base.pos_post_Q16.z;\n    peep->physics.base.pos_Q16.y += peep->physics.base.pos_post_Q16.y;\n    peep->physics.base.pos_Q16.x += peep->physics.base.pos_post_Q16.x;\n\n\n    //hard map limits\n    const int lb = 1;\n    peep->physics.base.pos_Q16.x = clamp(peep->physics.base.pos_Q16.x, (-(MAP_TILE_SIZE*(((MAPDIM)/2)-lb)))<<16, (MAP_TILE_SIZE*(((MAPDIM)/2)-lb))<<16);\n    peep->physics.base.pos_Q16.y = clamp(peep->physics.base.pos_Q16.y, (-(MAP_TILE_SIZE*(((MAPDIM)/2)-lb)))<<16, (MAP_TILE_SIZE*(((MAPDIM)/2)-lb))<<16);\n    peep->physics.base.pos_Q16.z = clamp(peep->physics.base.pos_Q16.z, -(MAP_TILE_SIZE)<<16, (MAP_TILE_SIZE*(MAPDEPTH))<<16);\n\n\n    peep->physics.base.pos_post_Q16.z = 0;\n    peep->physics.base.pos_post_Q16.y = 0;\n    peep->physics.base.pos_post_Q16.x = 0;\n\n    peep->physics.base.v_Q16.x = 0;\n    peep->physics.base.v_Q16.y = 0;\n    peep->physics.base.v_Q16.z = 0;\n\n    if (peep->stateBasic.health <= 0)\n        peep->stateBasic.deathState = 1;\n\n\n    //peep comms\n    /*\n    if (peep->comms.message_TargetReached_pending)\n    {\n        peep->physics.drive.drivingToTarget = 0;\n        peep->comms.message_TargetReached = peep->comms.message_TargetReached_pending;\n        peep->comms.message_TargetReached--;//message fade\n    }\n    */\n\n\n\n}\n\nint PeepMapVisiblity(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER Peep* peep, int mapZViewLevel)\n{\n    #ifdef PEEP_ALL_ALWAYS_VISIBLE\n        return 1;\n    #endif\n\n\n    ge_int3 maptilecoords;\n    maptilecoords.x = WHOLE_Q16(peep->posMap_Q16.x);\n    maptilecoords.y = WHOLE_Q16(peep->posMap_Q16.y);\n    maptilecoords.z = WHOLE_Q16(peep->posMap_Q16.z);\n    \n    //search up to z level 0\n    ge_int3 offset, tilePWorldCen, tileMapCoordWhole;\n    MapTile tile;\n    cl_int tileData;\n    offset.x = 0;\n    offset.y = 0;\n    offset.z = 0;\n    PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, offset, &tile, &tilePWorldCen, &tileMapCoordWhole, &tileData);\n    tile = MapDataGetTile(tileData);\n    cl_uchar firstTileOK = 0;\n    if((MapDataLowCornerCount(tileData) > 0)  || tile == MapTile_NONE)\n        firstTileOK = 1;\n\n    tileMapCoordWhole.z++;\n    tileData = gameState->map.levels[tileMapCoordWhole.z].data[tileMapCoordWhole.x][tileMapCoordWhole.y];\n    tile = MapDataGetTile(tileData);\n\n    while (firstTileOK && (tile == MapTile_NONE) && tileMapCoordWhole.z < MAPDEPTH)\n    {\n        tileMapCoordWhole.z++;\n\n        tileData = gameState->map.levels[tileMapCoordWhole.z].data[tileMapCoordWhole.x][tileMapCoordWhole.y];\n        tile = MapDataGetTile(tileData);\n    }\n    //printf(\"%d\\n\", tileMapCoordWhole.z);\n\n    if (tileMapCoordWhole.z == MAPDEPTH)\n    {\n        //hit the sky \n        if (maptilecoords.z <= mapZViewLevel+1)\n            return 1;\n        else\n            return 0;\n        return 1;\n    }\n    else\n    {\n        //'pocket' case\n        if (tileMapCoordWhole.z >= mapZViewLevel+2)\n        {\n            if (maptilecoords.z <= mapZViewLevel+1)\n            {\n                return 1;\n            }\n        }\n\n        return 0;\n    }\n    \n}\n\n\nvoid MachineUpdate(ALL_CORE_PARAMS,PARAM_GLOBAL_POINTER Machine* machine)\n{\n    USE_POINTER MachineDesc* desc;\n    OFFSET_TO_PTR(gameState->machineDescriptions, machine->MachineDescPtr, desc);\n\n    USE_POINTER MachineRecipe* recip;\n    OFFSET_TO_PTR(gameState->machineRecipes, machine->recipePtr, recip);\n\n    bool readyToProcess = true;\n    for(int i = 0; i < 8; i++)\n    {\n        int ratio = recip->inputRatio[i];\n        ItemTypes type = recip->inputTypes[i];\n        if(ratio >= 1)\n        {\n            if(machine->inventory.counts[type] >= ratio)\n            {\n                \n            }\n            else\n            {\n                readyToProcess = false;\n            }\n        }\n    }\n\n    if(readyToProcess && machine->state == MachineState_Running)\n    {\n        machine->tickProgess++;\n\n        if(machine->tickProgess >= desc->processingTime)\n        {\n            machine->tickProgess = 0;\n            MachineTypes type = desc->type;\n            \n          \n\n            for(int i = 0; i < 8; i++)\n            {\n                int ratio = recip->inputRatio[i];\n                int outRatio = recip->outputRatio[i];\n                ItemTypes type = recip->inputTypes[i];\n                ItemTypes outType = recip->outputTypes[i];\n\n                machine->inventory.counts[type]-=ratio;\n                machine->inventory.counts[outType]+=outRatio;\n            }\n            \n        }\n        \n    }\n}\n\n\nvoid PeepUpdate(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER Peep* peep)\n{\n\n    peep->minDistPeep_Q16 = (1 << 30);\n    peep->minDistPeepPtr = OFFSET_NULL;\n\n\n    cl_int x = ((peep->physics.base.pos_Q16.x >> 16) / (SECTOR_SIZE));\n    cl_int y = ((peep->physics.base.pos_Q16.y >> 16) / (SECTOR_SIZE));\n\n\n    USE_POINTER MapSector* cursector = &(gameState->sectors[x + SQRT_MAXSECTORS / 2][y + SQRT_MAXSECTORS / 2]);\n    CL_CHECK_NULL(cursector)\n\n\n    //traverse sector\n    int minx = cursector->ptr.x - 1; if (minx == 0xFFFFFFFF) minx = 0;\n    int miny = cursector->ptr.y - 1; if (miny == 0xFFFFFFFF) miny = 0;\n\n    int maxx = cursector->ptr.x + 1; if (maxx >= SQRT_MAXSECTORS) maxx = SQRT_MAXSECTORS-1;\n    int maxy = cursector->ptr.y + 1; if (maxy >= SQRT_MAXSECTORS) maxy = SQRT_MAXSECTORS-1;\n    \n    for(cl_int sectorx = minx; sectorx <= maxx; sectorx++)\n    {\n        for (cl_int sectory = miny; sectory <= maxy; sectory++)\n        {\n\n            USE_POINTER MapSector* sector = &gameState->sectors[sectorx][sectory];\n            CL_CHECK_NULL(sector);\n\n\n            for(int i = 0; i < MAX_PEEPS_PER_SECTOR; i++)\n            {\n                if(sector->peepPtrs[i] == OFFSET_NULL)\n                    continue;\n\n                USE_POINTER Peep* otherPeep;\n                OFFSET_TO_PTR(gameState->peeps, sector->peepPtrs[i], otherPeep);\n                \n                if (otherPeep != peep) {\n                    \n                    PeepToPeepInteraction(ALL_CORE_PARAMS_PASS, peep, otherPeep);\n                }\n            }\n        }\n    }\n   \n    ge_int3 posMap_Q16;\n    WorldToMap( peep->physics.base.pos_Q16, &posMap_Q16);\n    peep->posMap_Q16 = posMap_Q16;\n\n    ge_int3 maptilecoords;\n    maptilecoords.x = WHOLE_Q16(peep->posMap_Q16.x);\n    maptilecoords.y = WHOLE_Q16(peep->posMap_Q16.y);\n    maptilecoords.z = WHOLE_Q16(peep->posMap_Q16.z);\n\n    ge_int3 maptilecoords_prev;\n    maptilecoords_prev.x = WHOLE_Q16(peep->lastGoodPosMap_Q16.x);\n    maptilecoords_prev.y = WHOLE_Q16(peep->lastGoodPosMap_Q16.y);\n    maptilecoords_prev.z = WHOLE_Q16(peep->lastGoodPosMap_Q16.z);\n\n\n    //update visibility\n    if (!VECTOR3_EQUAL(maptilecoords, maptilecoords_prev) || (ThisClient(ALL_CORE_PARAMS_PASS)->mapZView_1 != ThisClient(ALL_CORE_PARAMS_PASS)->mapZView))\n    {\n        if (PeepMapVisiblity(ALL_CORE_PARAMS_PASS, peep, ThisClient(ALL_CORE_PARAMS_PASS)->mapZView))\n        {     \n            BITSET(peep->stateBasic.bitflags0, PeepState_BitFlags_visible);\n        }\n        else\n        {\n            BITCLEAR(peep->stateBasic.bitflags0, PeepState_BitFlags_visible);\n        }\n    }\n\n\n\n    //update map coord tracking\n    if(VECTOR3_EQUAL(peep->mapCoord, maptilecoords) == 0)\n    {\n\n\n\n        peep->mapCoord_1 = peep->mapCoord;\n        peep->mapCoord = VECTOR3_CAST(maptilecoords, offsetPtrShort3);\n\n        //printf(\"a\");\n            // cl_uint* mapData = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, VECTOR3_CAST(peep->mapCoord, ge_int3));\n            // peepCnt = MapTileData_PeepCount(*mapData);\n            // MapTileData_SetPeepCount(mapData, peepCnt+1);\n        \n        //int b = atomic_inc(&gameState->map.levels[peep->mapCoord.z].peepCounts[peep->mapCoord.x][peep->mapCoord.y]);\n        //int a = atomic_dec(&gameState->map.levels[peep->mapCoord_1.z].peepCounts[peep->mapCoord_1.x][peep->mapCoord_1.y]);\n\n        //printf(\"%d,%d\\n\", a,b);\n    }\n        \n\n    \n    \n\n    \n\n\n    //revert position to last good if needed\n    MapTile curTile;\n    cl_int tileData;\n    ge_int3 dummy;\n    ge_int3 dummy2;\n    PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 0, 0, 0 }, &curTile, &dummy, & dummy2, & tileData);\n\n    \n\n    if (peep->stateBasic.buriedGlitchState != 0)\n    {\n        //revert to center of last good map position\n        #ifndef PEEP_DISABLE_TILECORRECTIONS\n\n            ge_int3 lastGoodPos;\n            MapToWorld(peep->lastGoodPosMap_Q16, &lastGoodPos);\n\n            peep->physics.base.pos_post_Q16.x += lastGoodPos.x - peep->physics.base.pos_Q16.x;\n            peep->physics.base.pos_post_Q16.y += lastGoodPos.y - peep->physics.base.pos_Q16.y;\n            peep->physics.base.pos_post_Q16.z += lastGoodPos.z - peep->physics.base.pos_Q16.z;\n\n            peep->physics.base.vel_add_Q16.x = -peep->physics.base.v_Q16.x;\n            peep->physics.base.vel_add_Q16.y = -peep->physics.base.v_Q16.y;\n            peep->physics.base.vel_add_Q16.z = -peep->physics.base.v_Q16.z;\n\n        #endif\n    }\n    else\n    {\n\n        peep->lastGoodPosMap_Q16 = peep->posMap_Q16;\n    }\n    \n    WalkAndFight(ALL_CORE_PARAMS_PASS, peep);\n\n}\n\nvoid ParticleUpdate(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER Particle* p)\n{\n    p->pos.x = ADD_QMP32(p->pos.x, p->vel.x);\n    p->pos.y = ADD_QMP32(p->pos.y, p->vel.y);\n}\n\n\n\n\nvoid MapUpdateShadow(ALL_CORE_PARAMS, int x, int y)\n{\n    if ((x < 1) || (x >= MAPDIM - 1) || (y < 1) || (y >= MAPDIM - 1))\n    {\n        return;\n    }\n\n\n    MapTile tile = MapTile_NONE;\n    mapTile2VBO[y * MAPDIM + x] = MapTile_NONE;\n\n\n    int shadowIntensity;\n    for (int z = ThisClient(ALL_CORE_PARAMS_PASS)->mapZView+1; z >= 0; z--)\n    {       \n        if(z >= MAPDEPTH) continue;\n\n        USE_POINTER cl_uint* data = &gameState->map.levels[z].data[x][y];\n        MapTile center =MapDataGetTile(*data);\n\n        if (center != MapTile_NONE)\n            return;\n\n\n        // b | c | d\n        // e |cen| f\n        // g | h | i\n        //MapTile b = gameState->map.levels[z].data[x-1][y-1]; \n        //MapTile c = gameState->map.levels[z].data[x][y-1];\n        ////MapTile d = gameState->map.levels[z].data[x+1][y-1];\n        //MapTile e = gameState->map.levels[z].data[x-1][y];\n        //MapTile f = gameState->map.levels[z].data[x + 1][y];\n        ////MapTile g = gameState->map.levels[z].data[x - 1][y+1];\n        //MapTile h = gameState->map.levels[z].data[x][y + 1];\n        ////MapTile i = gameState->map.levels[z].data[x+1][y + 1];\n\n\n        cl_uchar f = MapRidgeType(ALL_CORE_PARAMS_PASS, (ge_int3) { x + 1, y, z }, (ge_int3) { 1, 0, 0 });\n        cl_uchar h = MapRidgeType(ALL_CORE_PARAMS_PASS, (ge_int3) { x , y+1, z }, (ge_int3) { 0, 1, 0 });\n        cl_uchar e = MapRidgeType(ALL_CORE_PARAMS_PASS, (ge_int3) { x - 1, y, z }, (ge_int3) { -1, 0, 0 });\n        cl_uchar c = MapRidgeType(ALL_CORE_PARAMS_PASS, (ge_int3) { x, y-1, z }, (ge_int3) { 0, -1, 0 });\n\n\n        if ((f != 0) && (c == 0) && (e == 0) && (h == 0))\n            tile = MapTile_Shadow_0;\n\n        if ((f == 0) && (c == 0) && (e != 0) && (h == 0))\n            tile = MapTile_Shadow_2;\n\n        if ((f == 0) && (c != 0) && (e == 0) && (h == 0))\n            tile = MapTile_Shadow_1;\n\n        if ((f == 0) && (c == 0) && (e == 0) && (h != 0))\n            tile = MapTile_Shadow_3;\n\n        //-------------\n\n        if ((f != 0) && (c != 0) && (e == 0) && (h == 0))\n            tile = MapTile_Shadow_5;\n\n        if ((f == 0) && (c != 0) && (e != 0) && (h == 0))\n            tile = MapTile_Shadow_6;\n\n        if ((f == 0) && (c == 0) && (e != 0) && (h != 0))\n            tile = MapTile_Shadow_7;\n\n        if ((f != 0) && (c == 0) && (e == 0) && (h != 0))\n            tile = MapTile_Shadow_4;\n\n        //-------------------------\n\n        if ((f != 0) && (c != 0) && (e != 0) && (h == 0))\n            tile = MapTile_Shadow_14;\n\n        if ((f != 0) && (c != 0) && (e == 0) && (h != 0))\n            tile = MapTile_Shadow_15;\n\n        if ((f != 0) && (c == 0) && (e != 0) && (h != 0))\n            tile = MapTile_Shadow_12;\n\n        if ((f == 0) && (c != 0) && (e != 0) && (h != 0))\n            tile = MapTile_Shadow_10;\n        //----------------------------\n        if ((f != 0) && (c == 0) && (e != 0) && (h == 0))\n            tile = MapTile_Shadow_16;\n\n        if ((f == 0) && (c != 0) && (e == 0) && (h != 0))\n            tile = MapTile_Shadow_8;\n\n        //------------------------------\n        if ((f != 0) && (c != 0) && (e != 0) && (h != 0))\n            tile = MapTile_Shadow_11;\n\n\n        mapTile2VBO[y * MAPDIM + x] = tile;\n        \n        cl_uint finalAttr = (clamp(15-0, 0, 15) << 6);\n        mapTile2AttrVBO[ y * MAPDIM + x ] = finalAttr;\n    }\n\n\n}\n\n\n\n\n\n\n\n\n\nvoid MapBuildTileView(ALL_CORE_PARAMS, int x, int y)\n{\n    ge_int3 coord = (ge_int3){x,y,ThisClient(ALL_CORE_PARAMS_PASS)->mapZView };\n    USE_POINTER cl_uint* data = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, coord);\n    MapTile tile = MapDataGetTile(*data);\n    MapTile tileUp;\n    if (ThisClient(ALL_CORE_PARAMS_PASS)->mapZView < MAPDEPTH-1)\n    {\n        coord.z = ThisClient(ALL_CORE_PARAMS_PASS)->mapZView + 1;\n        USE_POINTER cl_uint* dataup = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, coord);\n\n\n        tileUp = MapDataGetTile(*dataup);\n\n    }\n    else\n    {\n        tileUp = MapTile_NONE;\n    }\n\n    mapTile1AttrVBO[y * MAPDIM + x] = 0;\n\n\n    //look down...\n\n    int vz = 0;\n    while (tile == MapTile_NONE)\n    {\n        data = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, coord);\n        tile = MapDataGetTile(*data);\n        if (tile == MapTile_NONE) {\n            coord.z--;\n            #ifndef NO_ZSHADING\n                vz++;\n            #endif\n        }\n    }\n\n\n\n    if(BITGET(*data, MapTileFlags_Explored) == 0)\n    {\n        mapTile1VBO[y * MAPDIM + x ] = MapTile_NONE;//or \"Haze\"\n        return;\n    }\n\n\n    cl_uint finalAttr=0;\n\n    finalAttr |= BITGET_MF(*data, MapTileFlags_LowCornerTPLEFT)       ;//A\n    finalAttr |= BITGET_MF(*data, MapTileFlags_LowCornerTPRIGHT)  << 1;//B\n    finalAttr |= BITGET_MF(*data, MapTileFlags_LowCornerBTMLEFT)  << 2;//C\n    finalAttr |= BITGET_MF(*data, MapTileFlags_LowCornerBTMRIGHT) << 3;//D\n\n    cl_uint dataCpy = *data;\n    uint xlev = MapDataXLevel(&dataCpy);\n    finalAttr |= (2-xlev) << 4;//X\n\n\n    finalAttr |= (clamp(15-vz-1, 0, 15) << 6);\n\n\n    mapTile1AttrVBO[ y * MAPDIM + x ] = finalAttr;\n    mapTile1OtherAttrVBO[ y * MAPDIM + x ] |= BITBANK_GET_SUBNUMBER_UINT(*data, MapTileFlags_RotBit1, 2);\n    \n    if (tileUp != MapTile_NONE)//view obstructed by foottile above.\n    {\n\n        //if next to visible show it as \"wall view\"\n        mapTile1AttrVBO[y * MAPDIM + x ] = 0;\n        cl_uchar isWall = 0;\n        int dirOffsets[8] = {0,1,2,3,22,23,24,25}; \n        int orthflags[4] = {0,0,0,0};\n        for(int i = 0; i < 4; i++)\n        {\n            ge_int3 offset = staticData->directionalOffsets[dirOffsets[i]];\n            ge_int3 mapCoord = (ge_int3){x +offset.x, y + offset.y, ThisClient(ALL_CORE_PARAMS_PASS)->mapZView + 1 };\n\n            if(MapTileCoordValid(mapCoord,0))\n            {\n            \n                USE_POINTER cl_uint* dataoffup = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, mapCoord);\n                MapTile tileoffup = MapDataGetTile(*dataoffup);\n                \n                if(tileoffup == MapTile_NONE)\n                {\n                    isWall = 1;\n\n                    //test against mouse world coord\n                    // ge_int3 mouseMapCoord;\n                    // int occluded;\n                    // ge_int3 mouseWorld_Q16 = (ge_int3){gameStateActions->mouseLocWorldx_Q16, gameStateActions->mouseLocWorldy_Q16, mapCoord.z};\n                   \n                    // WorldToMap(mouseWorld_Q16, &mouseMapCoord);\n                    // mouseMapCoord = GE_INT3_WHOLE_ONLY_Q16(mouseMapCoord);\n                    \n                    // if(VECTOR3_EQUAL(mouseMapCoord , mapCoord))\n                    // {\n                    //     mapTile1VBO[y * MAPDIM + x ] = tile;\n                        \n                    // }\n                    // else\n                    // {\n                        mapTile1VBO[y * MAPDIM + x ] = tileUp;\n                        \n                    //}\n\n\n\n\n                    if( i <=3 )\n                        orthflags[i] = 1;\n\n                    //fade out effect\n                    \n\n\n                    if((orthflags[0] + orthflags[1] + orthflags[2] + orthflags[3]) == 0)\n                    {\n\n                        //TODO better corner effect\n                        // mapTile1AttrVBO[ y * MAPDIM + x ] |= 1<<4;\n\n                        // if(dirOffsets[i] == 22) mapTile1AttrVBO[ y * MAPDIM + x ] |= 1 << 0;\n                        // if(dirOffsets[i] == 23) mapTile1AttrVBO[ y * MAPDIM + x ] |= 1 << 1;\n                        // if(dirOffsets[i] == 24) mapTile1AttrVBO[ y * MAPDIM + x ] |= 1 << 2;\n                        // if(dirOffsets[i] == 25) mapTile1AttrVBO[ y * MAPDIM + x ] |= 1 << 3;\n                    }\n\n\n                    mapTile1AttrVBO[y * MAPDIM + x ] |= (clamp(15-vz, 0, 15) << 6);//base shade\n                    mapTile1AttrVBO[y * MAPDIM + x ] |= (1 << 10);//corners fade to nothing\n\n\n                    \n\n                }\n            }\n        }\n\n\n\n\n        if(isWall == 0)\n            mapTile1VBO[y * MAPDIM + x ] = MapTile_NONE;\n    }\n    else\n    {\n        mapTile1VBO[y * MAPDIM + x] = tile;\n    }\n}\n\n\nvoid MapBuildTileView3Area(ALL_CORE_PARAMS, int x, int y)\n{\n    MapBuildTileView(ALL_CORE_PARAMS_PASS,  x,  y);\n    MapBuildTileView(ALL_CORE_PARAMS_PASS,  x+1,  y);\n    MapBuildTileView(ALL_CORE_PARAMS_PASS,  x,  y+1);\n    MapBuildTileView(ALL_CORE_PARAMS_PASS,  x+1,  y+1);\n\n    MapBuildTileView(ALL_CORE_PARAMS_PASS,  x-1,  y);\n    MapBuildTileView(ALL_CORE_PARAMS_PASS,  x,  y-1);\n    MapBuildTileView(ALL_CORE_PARAMS_PASS,  x-1,  y-1);\n\n    MapBuildTileView(ALL_CORE_PARAMS_PASS,  x-1,  y+1);\n    MapBuildTileView(ALL_CORE_PARAMS_PASS,  x+1,  y-1);\n}\n\n\nvoid PrintSelectionPeepStats(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER Peep* p)\n{\n///    Print_GE_INT3_Q16(p->physics.base.pos_Q16);\n    USE_POINTER Peep* peep = p;\n    MapTile data[22];\n    ge_int3 tileCenters_Q16[22];\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 1, 0, 0 }, & data[0], & tileCenters_Q16[0]); printf(\"{ 1, 0, 0 }: %d\\n\", data[0]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { -1, 0, 0 }, & data[1], & tileCenters_Q16[1]); printf(\"{ -1, 0, 0 }: %d\\n\", data[1]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 0, -1, 0 }, & data[2], & tileCenters_Q16[2]); printf(\"{ 0, -1, 0 }: %d\\n\", data[2]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 0, 1, 0 }, & data[3], & tileCenters_Q16[3]); printf(\"{ 0, 1, 0 }: %d\\n\", data[3]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 0, 0, 1 }, & data[4], & tileCenters_Q16[4]); printf(\"{ 0, 0, 1 }: %d\\n\", data[4]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 0, 0, -1 }, & data[5], & tileCenters_Q16[5]); printf(\"{ 0, 0, -1 }: %d\\n\", data[5]);\n\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 1, 0, -1 }, & data[6], & tileCenters_Q16[6]); printf(\"{ 1, 0, -1 }: %d\\n\", data[6]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 0, 1, -1 }, & data[7], & tileCenters_Q16[7]); printf(\"{ 0, 1, -1 }: %d\\n\", data[7]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 1, 1, -1 }, & data[8], & tileCenters_Q16[8]); printf(\"{ 1, 1, -1 }: %d\\n\", data[8]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { -1, 0, -1 }, & data[9], & tileCenters_Q16[9]); printf(\"{ -1, 0, -1 }: %d\\n\", data[9]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 0, -1, -1 }, & data[10], & tileCenters_Q16[10]); printf(\"{ 0, -1, -1 }: %d\\n\", data[10]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { -1, -1, -1 }, & data[11], & tileCenters_Q16[11]); printf(\"{ -1, -1, -1 }: %d\\n\", data[11]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 1, -1, -1 }, & data[12], & tileCenters_Q16[12]); printf(\"{ 1, -1, -1 }: %d\\n\", data[12]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { -1, 1, -1 }, & data[13], & tileCenters_Q16[13]); printf(\"{ -1, 1, -1 }: %d\\n\", data[13]);\n\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 1, 0, 1 }, & data[14], & tileCenters_Q16[14]); printf(\"{ 1, 0, 1 }: %d\\n\", data[14]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 0, 1, 1 }, & data[15], & tileCenters_Q16[15]); printf(\"{ 0, 1, 1 }: %d\\n\", data[15]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 1, 1, 1 }, & data[16], & tileCenters_Q16[16]); printf(\"{ 1, 1, 1 }: %d\\n\", data[16]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { -1, 0, 1 }, & data[17], & tileCenters_Q16[17]); printf(\"{ -1, 0, 1 }: %d\\n\", data[17]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 0, -1, 1 }, & data[18], & tileCenters_Q16[18]); printf(\"{ 0, -1, 1 }: %d\\n\", data[18]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { -1, -1, 1 }, & data[19], & tileCenters_Q16[19]); printf(\"{ -1, -1, 1 }: %d\\n\", data[19]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { 1, -1, 1 }, & data[20], & tileCenters_Q16[20]); printf(\"{ 1, -1, 1 }: %d\\n\", data[20]);\n    //PeepGetMapTile(ALL_CORE_PARAMS_PASS, peep, (ge_int3) { -1, 1, 1 }, & data[21], & tileCenters_Q16[21]); printf(\"{ -1, 1, 1 }: %d\\n\", data[21]);\n}\n\nvoid MapTileCoordClamp( ge_int3* mapCoord, int xybuffer)\n{\n    (*mapCoord).x = clamp((*mapCoord).x, xybuffer, MAPDIM - 1 - xybuffer);\n    (*mapCoord).y = clamp((*mapCoord).y, xybuffer, MAPDIM - 1 - xybuffer);\n    (*mapCoord).z = clamp((*mapCoord).z, 0, MAPDEPTH - 1);\n}\n\n\nvoid GetMapTileCoordFromWorld2D(ALL_CORE_PARAMS, ge_int2 world_Q16, \n ge_int3* mapcoord_whole, \n int* occluded, int zViewRestrictLevel)\n{\n    ge_int3 wrld_Q16;\n    wrld_Q16.x = world_Q16.x;\n    wrld_Q16.y = world_Q16.y;\n    WorldToMap(wrld_Q16, &(*mapcoord_whole));\n    (*mapcoord_whole).x = WHOLE_Q16((*mapcoord_whole).x);\n    (*mapcoord_whole).y = WHOLE_Q16((*mapcoord_whole).y);\n\n\n    MapTileCoordClamp(mapcoord_whole,1);\n\n    for (int z = zViewRestrictLevel; z >= 0; z--)\n    {\n        USE_POINTER cl_uint* data = &gameState->map.levels[z].data[(*mapcoord_whole).x][(*mapcoord_whole).y];\n        cl_uint dataCopy = *data;\n        MapTile tile = MapDataGetTile(dataCopy);\n\n        if (tile != MapTile_NONE)\n        {\n            (*mapcoord_whole).z = z;\n            if (z == ThisClient(ALL_CORE_PARAMS_PASS)->mapZView-1)\n            {\n                *occluded = 1;\n            }\n            else if (z == ThisClient(ALL_CORE_PARAMS_PASS)->mapZView)\n            {\n                *occluded = 1;\n            }\n            else\n            {\n                *occluded = 0;\n            }\n            return;\n        }\n    }\n\n   // printf(\"3\");\n    *occluded = 1;\n}\n\n\n\n\n\n\n\nvoid LINES_DrawLine(ALL_CORE_PARAMS, float2 screenPosStart, float2 screenPosEnd, float3 color)\n{\n\n\n    linesVBO[gameState->debugLinesIdx*5 + 0] = screenPosStart.x;\n    linesVBO[gameState->debugLinesIdx*5 + 1] = screenPosStart.y;\n\n    linesVBO[gameState->debugLinesIdx*5 + 2] = color.x;\n    linesVBO[gameState->debugLinesIdx*5 + 3] = color.y;\n    linesVBO[gameState->debugLinesIdx*5 + 4] = color.z;\n\n    \n    linesVBO[gameState->debugLinesIdx*5 + 5] = screenPosEnd.x;\n    linesVBO[gameState->debugLinesIdx*5 + 6] = screenPosEnd.y;\n\n    linesVBO[gameState->debugLinesIdx*5 + 7] = color.x;\n    linesVBO[gameState->debugLinesIdx*5 + 8] = color.y;\n    linesVBO[gameState->debugLinesIdx*5 + 9] = color.z;\n\n    gameState->debugLinesIdx+=10;\n    if(gameState->debugLinesIdx >= MAX_LINES)\n        printf(\"out of debug line space!\\n\");\n}\nvoid LINES_ClearAll(ALL_CORE_PARAMS)\n{\n    for(int i = gameState->debugLinesIdx; i >=0; i--)\n        linesVBO[gameState->debugLinesIdx] = 0.0f;\n\n    gameState->debugLinesIdx=0;;\n}\n\nfloat4 Matrix_Float4_Times_Vec4(global float mat[][4], float4 vec)\n{\n    float4 res;\n    res.x = mat[0][0] * vec.x + mat[0][1] * vec.y + mat[0][2] * vec.z + mat[0][3] * vec.w;\n    res.y = mat[1][0] * vec.x + mat[1][1] * vec.y + mat[1][2] * vec.z + mat[1][3] * vec.w;\n    res.z = mat[2][0] * vec.x + mat[2][1] * vec.y + mat[2][2] * vec.z + mat[2][3] * vec.w;\n    res.w = mat[3][0] * vec.x + mat[3][1] * vec.y + mat[3][2] * vec.z + mat[3][3] * vec.w;\n    return res;\n}\n\nvoid LINES_DrawLineWorld(ALL_CORE_PARAMS, float2 worldPosStart, float2 worldPosEnd, float3 color)\n{\n    float4 worldPosStart4 = (float4)(worldPosStart.x, worldPosStart.y, 0.0f, 1.0f);\n    float4 screenPosStart4 = Matrix_Float4_Times_Vec4(&gameStateActions->viewMatrix, worldPosStart4);\n    float2 screenPosStart2 = (float2)(screenPosStart4.x, screenPosStart4.y);\n\n    float4 worldPosEnd4 = (float4)(worldPosEnd.x, worldPosEnd.y, 0.0f, 1.0f);\n    float4 screenPosEnd4 = Matrix_Float4_Times_Vec4(&gameStateActions->viewMatrix, worldPosEnd4);\n    float2 screenPosEnd2 = (float2)(screenPosEnd4.x, screenPosEnd4.y);\n\n    // printf(\"[%f,%f,%f,%f]\\n\", gameStateActions->viewMatrix[0][0], gameStateActions->viewMatrix[0][1], gameStateActions->viewMatrix[0][2], gameStateActions->viewMatrix[0][3]);\n    // printf(\"[%f,%f,%f,%f]\\n\", gameStateActions->viewMatrix[1][0], gameStateActions->viewMatrix[1][1], gameStateActions->viewMatrix[1][2], gameStateActions->viewMatrix[1][3]);\n    // printf(\"[%f,%f,%f,%f]\\n\", gameStateActions->viewMatrix[2][0], gameStateActions->viewMatrix[2][1], gameStateActions->viewMatrix[2][2], gameStateActions->viewMatrix[2][3]);\n    // printf(\"[%f,%f,%f,%f]\\n\", gameStateActions->viewMatrix[3][0], gameStateActions->viewMatrix[3][1], gameStateActions->viewMatrix[3][2], gameStateActions->viewMatrix[3][3]);\n    // printf(\"---------------------\\n\");\n   // gameStateActions->\n    LINES_DrawLine(ALL_CORE_PARAMS_PASS,  screenPosStart2, screenPosEnd2,  color);\n}\n\nge_int2 GUI_TO_WORLD_Q16(ALL_CORE_PARAMS, ge_int2 guiCoord)\n{\n    float4 v;\n    v.x = guiCoord.x;\n    v.y = guiCoord.y;\n    v.z = 0.0;\n    v.w = 1.0f;\n    float4 worldPos = Matrix_Float4_Times_Vec4(&gameStateActions->viewMatrix_Inv, v);\n\n    printf(\"%f, %f, %f, %f\\n\", worldPos.x, worldPos.y, worldPos.z, worldPos.w);\n\n    return (ge_int2){0,0};\n}\n\nfloat2 TileToUV(TileUnion tile)\n{\n\n    //duplicate of geomMapTile.glsl code.\n    float2 uv;\n    uv.x = ((uint)tile.mapTile & 15u) / 16.0;\n    uv.y = (((uint)tile.mapTile >> 4u) & 15u) / 16.0;    \n    return uv;\n}\n\n\nvoid PrintMouseState(int mouseState)\n{\n    if(BITGET(mouseState, MouseButtonBits_PrimaryDown))\n        printf(\"MouseButtonBits_PrimaryDown |\");\n    if(BITGET(mouseState, MouseButtonBits_PrimaryPressed))\n        printf(\"MouseButtonBits_PrimaryPressed |\");\n    if(BITGET(mouseState, MouseButtonBits_PrimaryReleased))\n        printf(\"MouseButtonBits_PrimaryReleased |\");\n    if(BITGET(mouseState, MouseButtonBits_SecondaryDown))\n        printf(\"MouseButtonBits_SecondaryDown |\");\n    if(BITGET(mouseState, MouseButtonBits_SecondaryPressed))\n        printf(\"MouseButtonBits_SecondaryPressed |\");\n    if(BITGET(mouseState, MouseButtonBits_SecondaryReleased))\n        printf(\"MouseButtonBits_SecondaryReleased |\");\n\n    printf(\"\\n\");\n}\n\n\nvoid InventoryGui(GUIID_DEF_ALL, PARAM_GLOBAL_POINTER Inventory* inventory)\n{\n    GUI_COMMON_WIDGET_START()\n\n    if(!goodStart)\n    {\n        return;\n    }\n\n    int j = 0;\n    for(int i = 0; i < ItemTypes_NUMITEMS; i++)\n    {\n        int count = inventory->counts[i];\n        if(count > 0)\n        {\n            const int height = 40;\n            float2 uv = TileToUV(gameState->ItemTypeTiles[i]);\n            GUI_IMAGE(GUIID_PASS, origPos + (ge_int2)(0,(j+1)*height + 100), (ge_int2)(height,height), 0,  uv, uv + MAP_TILE_UV_WIDTH_FLOAT2, gameState->ItemColors[i]);\n\n\n            LOCAL_STR(cntstr, \"-----------\");\n            CL_ITOA(count, cntstr, cntstr_len, 10 );                 \n            GUI_TEXT(GUIID_PASS, origPos + (ge_int2)(height,(j+1)*height + 100), (ge_int2)(50,height), 0, cntstr);\n\n            GUI_TEXT_CONST(GUIID_PASS, origPos + (ge_int2)(height+50,(j+1)*height + 100), (ge_int2)(50,height), 0, &ItemTypeStrings[i][0]);\n            j++;\n\n        }\n    }\n}\nvoid MapDeleteTile(ALL_CORE_PARAMS, ge_int3 mapCoord)\n{\n    if (mapCoord.z > 0) \n    {\n        gameState->map.levels[mapCoord.z].data[mapCoord.x][mapCoord.y] = MapTile_NONE;\n        \n\n        offsetPtr machinePtr = gameState->map.levels[mapCoord.z].machinePtr[mapCoord.x][mapCoord.y];\n        if(machinePtr != OFFSET_NULL)\n        {\n            USE_POINTER Machine* mach;\n            OFFSET_TO_PTR(gameState->machines, machinePtr, mach);\n            mach->valid = false;\n        }\n        gameState->map.levels[mapCoord.z].machinePtr[mapCoord.x][mapCoord.y] = OFFSET_NULL;\n\n\n        MapBuildTileView3Area(ALL_CORE_PARAMS_PASS, mapCoord.x, mapCoord.y);\n        MapUpdateShadow(ALL_CORE_PARAMS_PASS, mapCoord.x, mapCoord.y);\n        MapUpdateShadow(ALL_CORE_PARAMS_PASS, mapCoord.x + 1, mapCoord.y);\n        MapUpdateShadow(ALL_CORE_PARAMS_PASS, mapCoord.x - 1, mapCoord.y);\n        MapUpdateShadow(ALL_CORE_PARAMS_PASS, mapCoord.x, mapCoord.y + 1);\n        MapUpdateShadow(ALL_CORE_PARAMS_PASS, mapCoord.x, mapCoord.y - 1);\n    }\n}\n\nUSE_POINTER Machine* MachineGetFromMapCoord(ALL_CORE_PARAMS, ge_int3 mapCoord)\n{\n    offsetPtr ptr = gameState->map.levels[mapCoord.z].machinePtr[mapCoord.x][mapCoord.y];\n    USE_POINTER Machine* machine;\n    OFFSET_TO_PTR(gameState->machines, ptr, machine);\n\n    return machine;\n}\n\nvoid TransferInventory(PARAM_GLOBAL_POINTER Inventory* invFrom, PARAM_GLOBAL_POINTER Inventory* invTo)\n{\n    for(int i = 0; i < ItemTypes_NUMITEMS; i++)\n    {\n        invTo->counts[i] += invFrom->counts[i];\n        invFrom->counts[i] = 0;\n    }\n}\n\nvoid PeepCommandGui(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER SyncedGui* gui, PARAM_GLOBAL_POINTER SynchronizedClientState* client)\n{\n    if(client->selectedPeepPrimary != OFFSET_NULL)\n    {\n        USE_POINTER Peep* peep;\n        OFFSET_TO_PTR(gameState->peeps, client->selectedPeepPrimary, peep);\n\n        LOCAL_STRL(mw, \"Miner 123456\", mwlen); \n        CL_ITOA(peep->ptr, (mw)+6,mwlen-6, 10);\n        if(GUI_BEGIN_WINDOW(GUIID_PASS, (ge_int2){100,100},\n            (ge_int2){200,500},0,  mw, &gui->guiState.windowPositions[2],&gui->guiState.windowSizes[2] ))\n        {\n\n            if(peep->physics.drive.drivingToTarget)\n            {\n                LOCAL_STR(thinkingtxt, \"Traveling...\"); \n                GUI_LABEL(GUIID_PASS, (ge_int2)(0,0), (ge_int2)(gui->guiState.windowSizes[2].x,20), 0, thinkingtxt, (float3)(0.0,0,0) );\n            }\n\n            \n\n            \n            ge_int3 mapCoord = SHORT3_TO_INT3(peep->mapCoord);\n            mapCoord.z--;\n\n            MapTile downTile = MapGetTileFromCoord(ALL_CORE_PARAMS_PASS, mapCoord);\n            USE_POINTER Machine* machine = MachineGetFromMapCoord(ALL_CORE_PARAMS_PASS, mapCoord);\n\n\n            if(downTile != MapTile_NONE)\n            {\n                LOCAL_STR(dig, \"Drill Down\"); \n                if(GUI_BUTTON(GUIID_PASS, (ge_int2)(0,20), (ge_int2)(100,50), GuiFlags_Beveled, (float3)(0.4,0.4,0.4), dig, NULL, NULL ))\n                {\n                    if(gui->passType == GuiStatePassType_Synced)\n                    {\n                        printf(\"digging...\\n\");\n\n                        if(downTile == MapTile_IronOre)\n                        {\n                            peep->inventory.counts[ItemType_IRON_ORE]+=10;\n                        }\n                        else if(downTile == MapTile_Rock)\n                        {\n                            peep->inventory.counts[ItemType_ROCK_DUST]+=100;\n                        }\n\n\n                        MapDeleteTile(ALL_CORE_PARAMS_PASS,  mapCoord);\n                    }\n                }\n\n                if(machine != NULL)\n                {\n                    LOCAL_STR(transferStr, \"Push Down\"); \n                    if(GUI_BUTTON(GUIID_PASS, (ge_int2)(0,20+50), (ge_int2)(gui->guiState.windowSizes[2].x,50),GuiFlags_Beveled,\n                     (float3)(0.4,0.4,0.4), transferStr, NULL, NULL ))\n                    {    \n                        if(gui->passType == GuiStatePassType_Synced)\n                        {\n                            TransferInventory(&peep->inventory, &machine->inventory);\n                        }\n                    }\n                    LOCAL_STR(transferStr2, \"Pull Up\"); \n                    if(GUI_BUTTON(GUIID_PASS, (ge_int2)(0,20+50+50), (ge_int2)(gui->guiState.windowSizes[2].x,50),\n                     GuiFlags_Beveled, (float3)(0.4,0.4,0.4), transferStr2, NULL, NULL ))\n                    {\n                        if(gui->passType == GuiStatePassType_Synced)\n                        {\n                            TransferInventory(&machine->inventory, &peep->inventory);\n                        }\n                    }\n                }\n\n            }\n\n\n            InventoryGui(GUIID_PASS, (ge_int2)(0,50),gui->guiState.windowSizes[2], 0, &peep->inventory);\n\n            GUI_END_WINDOW(GUIID_PASS);\n        }\n\n\n\n    }\n}\n\n\nvoid MachineGui(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER SyncedGui* gui, PARAM_GLOBAL_POINTER SynchronizedClientState* client)\n{\n    if(client->selectedMachine != OFFSET_NULL)\n    {\n\n        USE_POINTER Machine* mach;\n        OFFSET_TO_PTR(gameState->machines, client->selectedMachine, mach);\n        CL_CHECK_NULL(mach);\n\n        USE_POINTER MachineDesc* desc;\n        OFFSET_TO_PTR(gameState->machineDescriptions, mach->MachineDescPtr, desc);\n        CL_CHECK_NULL(desc);\n\n        USE_POINTER MachineRecipe* recip;\n        OFFSET_TO_PTR(gameState->machineRecipes, mach->recipePtr, recip);\n\n        LOCAL_STRL(mw, \"Machine ------\", mwlen); \n        CL_ITOA(client->selectedMachine, (mw)+8,mwlen-8, 10);\n        if(GUI_BEGIN_WINDOW(GUIID_PASS, (ge_int2){100,100},\n            (ge_int2){200,500},0,  mw, &gui->guiState.windowPositions[1],&gui->guiState.windowSizes[1] ))\n        {\n\n            LOCAL_STRL(thinkingtxt2, \"---\", thinkingtxtLen); \n            float perc = ((float)mach->tickProgess/desc->processingTime);\n            char* p = CL_ITOA(perc*100, thinkingtxt2, thinkingtxtLen, 10 );\n            *(p+2) = '%'; if(thinkingtxt2[1] == '\\0') thinkingtxt2[1] = ' ';\n            GUI_LABEL(GUIID_PASS, (ge_int2)(0,0), (ge_int2)(perc*gui->guiState.windowSizes[1].x,50), 0, thinkingtxt2, (float3)(0,0.7,0) );\n\n            \n\n            int downDummy;\n            LOCAL_STR(stateStrStart, \"Start\"); \n            LOCAL_STR(stateStrStop, \"Stop\"); \n            char* stateStr = stateStrStart;\n            float3 btnColor;\n\n            if( mach->state == MachineState_Running )\n            {\n                stateStr = stateStrStop;\n                btnColor = (float3)(1.0,0.0,0.0);\n            }\n            else if( mach->state == MachineState_Idle )\n            {\n                stateStr = stateStrStart;\n                btnColor = (float3)(0.0,0.7,0.0);\n            }\n\n            if(GUI_BUTTON(GUIID_PASS, (ge_int2)(0,50), (ge_int2)(50,50), GuiFlags_Beveled, btnColor, stateStr, &downDummy, NULL))\n            {\n                if(gui->passType == GuiStatePassType_Synced)\n                {    \n                    if( mach->state == MachineState_Running)\n                    {\n                        mach->state = MachineState_Idle;\n                    }\n                    else if( mach->state == MachineState_Idle)\n                    {\n                        mach->state = MachineState_Running;\n                    }\n\n                    \n                }\n            }\n            if(GUI_BUTTON(GUIID_PASS, (ge_int2)(50,50), (ge_int2)(50,50), GuiFlags_Beveled,(float3)(0,0,1.0), NULL, &downDummy, NULL))\n            {\n                for(int i = 0; i < 8; i++)\n                {\n                    if(recip->inputTypes[i] != ItemType_INVALID_ITEM)\n                        mach->inventory.counts[recip->inputTypes[i]]+=20;\n                }\n            }\n\n\n            InventoryGui(GUIID_PASS,  (ge_int2)(0,0), gui->guiState.windowSizes[1],0,&mach->inventory );\n\n\n\n            GUI_END_WINDOW(GUIID_PASS);\n        }\n    }\n}\n\n\n\n__kernel void game_apply_actions(ALL_CORE_PARAMS)\n{\n    //apply turns\n    for (int32_t a = 0; a < gameStateActions->numActions+1; a++)\n    {\n\n        int b = a;\n        GuiStatePassType guiPass = GuiStatePassType_Synced;\n        if(a == gameStateActions->numActions)\n        {\n            b = 0;//'local' client\n            guiPass = GuiStatePassType_NoLogic;\n  \n        }\n\n\n\n\n\n        USE_POINTER ClientAction* clientAction = &gameStateActions->clientActions[b].action;\n        USE_POINTER ActionTracking* actionTracking = &gameStateActions->clientActions[b].tracking;\n        int cliId = actionTracking->clientId;\n        USE_POINTER SynchronizedClientState* client = &gameState->clientStates[cliId];\n        USE_POINTER SyncedGui* gui = &gameState->clientStates[cliId].gui;\n        \n\n        //detect new clients\n        if(gameState->numClients < cliId+1)\n        {\n            printf(\"New Client Connected!\\n\");\n            gameState->numClients = cliId+1;\n\n            //reset the fake pass gui\n            if(cliId == gameStateActions->clientId)\n                gameState->fakePassGui = *gui;\n\n        }\n\n        ge_int2 mouseLoc;\n        int mouseState;\n        bool guiIsLocalClient = false;\n        if(guiPass == GuiStatePassType_NoLogic)//redirect pointers above so they reflect the local client only.\n        {\n            guiPass = GuiStatePassType_NoLogic;\n            mouseLoc = (ge_int2){gameStateActions->mouseLocx, gameStateActions->mouseLocy };\n            mouseState = gameStateActions->mouseState;\n            client = ThisClient(ALL_CORE_PARAMS_PASS);\n            cliId = gameStateActions->clientId;\n            clientAction= &gameStateActions->clientActions[cliId].action;\n            actionTracking= &gameStateActions->clientActions[cliId].tracking;\n            \n            gui = &gameState->fakePassGui;\n            guiIsLocalClient = true;\n            \n        }\n        else\n        {\n            guiPass = GuiStatePassType_Synced;\n            mouseLoc.x = clientAction->intParameters[CAC_MouseStateChange_Param_GUI_X];\n            mouseLoc.y = clientAction->intParameters[CAC_MouseStateChange_Param_GUI_Y];\n            mouseState = clientAction->intParameters[CAC_MouseStateChange_Param_BUTTON_BITS];\n\n            if(client == ThisClient(ALL_CORE_PARAMS_PASS))\n                guiIsLocalClient = true;\n\n            PrintMouseState( mouseState);\n            printf(\"IsLocalClient: %d\\n\", guiIsLocalClient);\n        }\n\n\n\n        GUI_RESET(ALL_CORE_PARAMS_PASS, gui, mouseLoc, mouseState, guiPass, guiIsLocalClient);\n\n        int downDummy;\n        char btntxt[9] = \"CLICK ME\"; \n        btntxt[8] = '\\0';\n        \n        \n\n\n        LOCAL_STR(noneTxt, \"SELECT\");\n        if(GUI_BUTTON(GUIID_PASS, (ge_int2){0 ,0}, (ge_int2){100, 50}, GuiFlags_Beveled, GUI_COLOR_DEF, noneTxt, &downDummy, &(gui->guiState.menuToggles[0])) == 1)\n        {\n            client->curTool = EditorTools_Select;\n\n            GUI_UpdateToggleGroup(gui->guiState.menuToggles, 4, 0);\n        }\n\n\n        LOCAL_STR(deleteTxt, \"DELETE\");\n        if(GUI_BUTTON(GUIID_PASS, (ge_int2){100 ,0}, (ge_int2){100, 50},GuiFlags_Beveled, GUI_COLOR_DEF, deleteTxt, &downDummy, &(gui->guiState.menuToggles[1])) == 1)\n        {\n            //printf(\"delete mode.\");\n            client->curTool = EditorTools_Delete;\n            GUI_UpdateToggleGroup(gui->guiState.menuToggles, 4, 1);\n        }\n\n        LOCAL_STR(createTxt, \"CREATE\\nCRUSHER\");\n        if(GUI_BUTTON(GUIID_PASS, (ge_int2){200 ,0}, (ge_int2){100, 50}, GuiFlags_Beveled, GUI_COLOR_DEF, createTxt, &downDummy, &(gui->guiState.menuToggles[2])) == 1)\n        {\n          //  printf(\"create mode\");\n            client->curTool = EditorTools_Create;\n            client->curToolMachine = MachineTypes_CRUSHER;\n            GUI_UpdateToggleGroup(gui->guiState.menuToggles, 4, 2);\n        }\n\n        LOCAL_STR(createTxt2, \"CREATE\\nSMELTER\");\n        if(GUI_BUTTON(GUIID_PASS, (ge_int2){300 ,0}, (ge_int2){100, 50}, GuiFlags_Beveled, GUI_COLOR_DEF, createTxt2, &downDummy, &(gui->guiState.menuToggles[3])) == 1)\n        {\n           // printf(\"create mode\");\n            client->curTool = EditorTools_Create;\n            client->curToolMachine = MachineTypes_SMELTER;\n\n            GUI_UpdateToggleGroup(gui->guiState.menuToggles, 4, 3);\n        }\n\n\n\n\n        LOCAL_STRL(labeltxt, \"DEEP\", labeltxtLen); \n        GUI_LABEL(GUIID_PASS, (ge_int2){0 ,50}, (ge_int2){80 ,50},0, labeltxt, (float3)(0.3,0.3,0.3));\n\n\n        GUI_SLIDER_INT_VERTICAL(GUIID_PASS,  (ge_int2){0 ,100}, (ge_int2){80, 800},0, &client->mapZView, 0, MAPDEPTH);\n\n        LOCAL_STRL(labeltxt2, \"BIRDS\\nEYE\", labeltxt2Len); \n        GUI_LABEL(GUIID_PASS, (ge_int2){0 ,900}, (ge_int2){80 ,50}, 0, labeltxt2, (float3)(0.3,0.3,0.3));\n            \n\n        LOCAL_STRL(robotSelWindowStr, \"Selected Robots\", robotSelWindowStrLen); \n        if(GUI_BEGIN_WINDOW(GUIID_PASS, (ge_int2){100,100},\n        (ge_int2){200,200},0,  robotSelWindowStr, &gui->guiState.windowPositions[0],&gui->guiState.windowSizes[0] ))\n        {\n            if(GUI_SCROLLBOX_BEGIN(GUIID_PASS, (ge_int2){0,0},\n            (ge_int2){10,10},\n            GuiFlags_FillParent,\n            (ge_int2){1000,1000}, &gui->guiState.menuScrollx, &gui->guiState.menuScrolly))\n            {\n                //iterate selected peeps\n                USE_POINTER Peep* p;\n                OFFSET_TO_PTR(gameState->peeps, client->selectedPeepsLastIdx, p);\n                    \n                int i = 0;\n                while(p != NULL)\n                {\n\n                    LOCAL_STRL(header, \"Miner: \", headerLen); \n                    LOCAL_STRL(peeptxt, \"Select\", peeptxtLen); \n                    GUI_LABEL(GUIID_PASS, (ge_int2){0 ,50*i}, (ge_int2){50, 50},0, header, (float3)(0.3,0.3,0.3));\n            \n                    if(GUI_BUTTON(GUIID_PASS, (ge_int2){50 ,50*i}, (ge_int2){50, 50},GuiFlags_Beveled,GUI_COLOR_DEF,  peeptxt, &downDummy, NULL))\n                    {\n                        client->selectedPeepPrimary = p->ptr;\n                    }\n\n                    i++;    \n                    OFFSET_TO_PTR(gameState->peeps, p->prevSelectionPeepPtr[cliId], p);\n                }\n                GUI_SCROLLBOX_END(GUIID_PASS);\n            }\n            \n            GUI_END_WINDOW(GUIID_PASS);\n        }\n\n        //hover stats\n        if((guiPass == GuiStatePassType_NoLogic) && (GUI_MOUSE_ON_GUI(gui) == 0))\n        {\n\n            ge_int2 world_Q16;\n            world_Q16.x = gameStateActions->mouseLocWorldx_Q16;\n            world_Q16.y = gameStateActions->mouseLocWorldy_Q16;\n\n            //world to map\n            //get tile etc.\n            ge_int3 mapcoord_whole;\n            int occluded;\n            GetMapTileCoordFromWorld2D(ALL_CORE_PARAMS_PASS, world_Q16, &mapcoord_whole, &occluded, client->mapZView+1);\n\n\n\n            MapTile tileup = MapGetTileFromCoord(ALL_CORE_PARAMS_PASS, mapcoord_whole + (ge_int3)(0,0,1));\n            MapTile tile = MapGetTileFromCoord(ALL_CORE_PARAMS_PASS, mapcoord_whole);\n            MapTile tiledown = MapGetTileFromCoord(ALL_CORE_PARAMS_PASS, mapcoord_whole + (ge_int3)(0,0,-1));\n            \n\n\n\n            LOCAL_STRL(xtxt, \"\", xtxtLen); \n            //CL_ITOA(tile, xtxt, xtxtLen, 10 );\n            //GUI_LABEL(GUIID_PASS, (ge_int2){300,200}, (ge_int2){100, 50}, xtxt, (float3)(0.3,0.3,0.3));\n            const int widgx = 80;\n            const int widgy = 800;\n            \n\n            GUI_LABEL(GUIID_PASS, (ge_int2)(widgx-5,widgy-50-5) , (ge_int2){50+10, 150+10}, 0, xtxt, (float3)(0.3,0.3,0.3));\n            float2 uv = TileToUV((TileUnion){tileup});\n            GUI_IMAGE(GUIID_PASS, (ge_int2)(widgx,widgy-50) , (ge_int2){50, 50}, 0, uv, uv + MAP_TILE_UV_WIDTH_FLOAT2, (float3)(1,1,1));\n\n            uv = TileToUV((TileUnion){tile});\n            GUI_IMAGE(GUIID_PASS, (ge_int2)(widgx,widgy) , (ge_int2){50, 50}, 0, uv, uv + MAP_TILE_UV_WIDTH_FLOAT2, (float3)(1,1,1));\n   \n            uv = TileToUV((TileUnion){tiledown});\n   \n            GUI_IMAGE(GUIID_PASS, (ge_int2)(widgx,widgy+50) , (ge_int2){50, 50},0,  uv, uv + MAP_TILE_UV_WIDTH_FLOAT2, (float3)(1,1,1));\n\n            \n        }\n\n\n        if(gameState->mapSearchers[0].state == AStarPathFindingProgress_Searching)\n        {\n            LOCAL_STRL(thinkingtxt, \"FINDING PATH..\", thinkingtxtLen); \n            GUI_LABEL(GUIID_PASS, (ge_int2)(400,100), (ge_int2)(150,50), 0, thinkingtxt, (float3)(1.0,0,0) );\n        }\n\n\n\n        //selected machine\n        MachineGui(ALL_CORE_PARAMS_PASS,  gui, client);\n        \n        //selected single peep\n        PeepCommandGui(ALL_CORE_PARAMS_PASS, gui, client);\n\n\n\n\n        if(guiPass == GuiStatePassType_Synced)\n            printf(\"cli: %d, mapz: %d\\n\", cliId, client->mapZView);\n        else{\n          //  printf(\"(fakepass) cli: %d, mapz: %d\\n\", cliId, client->mapZView);\n        }\n\n\n        //selection box\n        GUI_RESET_POST(ALL_CORE_PARAMS_PASS,  gui);\n\n\n\n\n\n        if(guiPass == GuiStatePassType_NoLogic)\n            continue;\n\n        \n        if (clientAction->actionCode == ClientActionCode_MouseStateChange)\n        {\n            \n            printf(\"Processing Action From Client: %d\\n\", cliId);\n            int buttons = clientAction->intParameters[CAC_MouseStateChange_Param_BUTTON_BITS];\n\n\n\n            \n            //end selection\n            if(BITGET_MF(buttons, MouseButtonBits_PrimaryPressed))\n            {\n\n                if(GUI_MOUSE_ON_GUI(gui) == 0)\n                {\n                    printf(\"Starting Drag Selection..\\n\");\n                    client->mouseGUIBegin.x = clientAction->intParameters[CAC_MouseStateChange_Param_GUI_X];\n                    client->mouseGUIBegin.y = clientAction->intParameters[CAC_MouseStateChange_Param_GUI_Y];\n                    client->mouseWorldBegin_Q16.x = clientAction->intParameters[CAC_MouseStateChange_Param_WORLD_X_Q16];\n                    client->mouseWorldBegin_Q16.y = clientAction->intParameters[CAC_MouseStateChange_Param_WORLD_Y_Q16];\n\n                    client->mouseOnGUiBegin = 0;\n                }\n                else\n                {\n                    client->mouseOnGUiBegin = 1;\n                }\n            }\n            else if(BITGET(buttons, MouseButtonBits_PrimaryReleased) && (gui->draggedOff == 0))\n            {\n                printf(\"Ending Drag Selection..\\n\");\n                \n                client->mouseGUIEnd.x = clientAction->intParameters[CAC_MouseStateChange_Param_GUI_X];\n                client->mouseGUIEnd.y = clientAction->intParameters[CAC_MouseStateChange_Param_GUI_Y];\n                client->mouseWorldEnd_Q16.x = clientAction->intParameters[CAC_MouseStateChange_Param_WORLD_X_Q16];\n                client->mouseWorldEnd_Q16.y = clientAction->intParameters[CAC_MouseStateChange_Param_WORLD_Y_Q16];\n                \n                //sort the selection box\n                int nex = max(client->mouseWorldEnd_Q16.x, client->mouseWorldBegin_Q16.x);\n                int ney  = max(client->mouseWorldEnd_Q16.y, client->mouseWorldBegin_Q16.y);\n\n                int nsx  = min(client->mouseWorldEnd_Q16.x, client->mouseWorldBegin_Q16.x);\n                int nsy  = min(client->mouseWorldEnd_Q16.y, client->mouseWorldBegin_Q16.y);\n                client->mouseWorldEnd_Q16.x = nex;\n                client->mouseWorldEnd_Q16.y = ney;\n                client->mouseWorldBegin_Q16.x = nsx;\n                client->mouseWorldBegin_Q16.y = nsy;\n\n\n                {\n                    client->selectedPeepsLastIdx = OFFSET_NULL;\n                    client->selectedPeepPrimary = OFFSET_NULL;\n                    int selectionCount = 0;\n                    for (cl_uint pi = 0; pi < MAX_PEEPS; pi++)\n                    {\n\n\n                        USE_POINTER Peep* p = &gameState->peeps[pi];\n                        p->prevSelectionPeepPtr[cliId] = OFFSET_NULL;\n                        p->nextSelectionPeepPtr[cliId] = OFFSET_NULL;\n\n\n                        if (p->stateBasic.faction == actionTracking->clientId)\n                        {\n                            if ((p->physics.base.pos_Q16.x > client->mouseWorldBegin_Q16.x)\n                            && (p->physics.base.pos_Q16.x < client->mouseWorldEnd_Q16.x))\n                            {\n\n                                if ((p->physics.base.pos_Q16.y < client->mouseWorldEnd_Q16.y)\n                                    && (p->physics.base.pos_Q16.y > client->mouseWorldBegin_Q16.y))\n                                {\n                                    if (PeepMapVisiblity(ALL_CORE_PARAMS_PASS, p, client->mapZView))\n                                    {\n\n                                        if (client->selectedPeepsLastIdx != OFFSET_NULL)\n                                        {\n                                            gameState->peeps[client->selectedPeepsLastIdx].nextSelectionPeepPtr[cliId] = pi;\n                                            p->prevSelectionPeepPtr[cliId] = client->selectedPeepsLastIdx;\n                                            p->nextSelectionPeepPtr[cliId] = OFFSET_NULL;\n                                        }\n                                        client->selectedPeepsLastIdx = pi;\n                                        client->selectedPeepPrimary = pi;\n                                        selectionCount++;\n                                        PrintSelectionPeepStats(ALL_CORE_PARAMS_PASS, p);\n\n                                    }\n\n                                }\n                            }\n                        }\n\n                    }\n\n                    if(selectionCount != 1)\n                    {\n                        client->selectedPeepPrimary = OFFSET_NULL;\n                    }\n\n                }\n\n            }\n\n            \n            //command to location\n            if(BITGET(buttons, MouseButtonBits_SecondaryReleased) && (GUI_MOUSE_ON_GUI(gui) == 0) \n            && (gui->draggedOff == 0))\n            {\n                cl_uint curPeepIdx = client->selectedPeepsLastIdx;\n                ge_int3 mapcoord;\n                ge_int2 world2D;\n                AStarPathFindingProgress pathFindProgress;\n\n                offsetPtr pathOPtr;\n                if (curPeepIdx != OFFSET_NULL)\n                {\n                    //Do an AStarSearch_IDA\n                    USE_POINTER Peep* curPeep = &gameState->peeps[curPeepIdx];\n                    world2D.x = clientAction->intParameters[CAC_MouseStateChange_Param_WORLD_X_Q16];\n                    world2D.y = clientAction->intParameters[CAC_MouseStateChange_Param_WORLD_Y_Q16];\n                    int occluded;\n\n                    GetMapTileCoordFromWorld2D(ALL_CORE_PARAMS_PASS, world2D, &mapcoord, &occluded, client->mapZView);\n\n                    ge_int3 start = GE_INT3_WHOLE_Q16(curPeep->posMap_Q16);\n                    mapcoord.z++;\n                    ge_int3 end = mapcoord;\n                    printf(\"start: \");Print_GE_INT3(start);\n                    printf(\"end: \");Print_GE_INT3(end);\n\n                    //AStarSearch_BFS_Instantiate(&gameState->mapSearchers[0]);\n\n\n                    ge_int3 worldloc;\n                    MapToWorld(GE_INT3_TO_Q16(end), &worldloc);\n\n\n                    if(gameState->mapSearchers[0].state == AStarPathFindingProgress_Ready)\n                    {\n                        printf(\"Starting Search for selected peeps..\\n\");\n                        AStarPathFindingProgress prog = AStarSearch_BFS_Routine(ALL_CORE_PARAMS_PASS, &gameState->mapSearchers[0], (start), (end), 0);\n\n                        if(prog == AStarPathFindingProgress_Searching)\n                        { \n                            while (curPeepIdx != OFFSET_NULL)\n                            {\n                                USE_POINTER Peep* curPeep = &gameState->peeps[curPeepIdx];\n\n                                //tmp\n                                curPeep->stateBasic.aStarSearchPtr = 0;\n\n                                //tmp\n                                //curPeep->physics.drive.target_x_Q16 = worldloc.x;\n                                //curPeep->physics.drive.target_y_Q16 = worldloc.y;\n                                //curPeep->physics.drive.target_z_Q16 = worldloc.z;\n                                //curPeep->physics.drive.drivingToTarget = 1;\n\n\n\n                                curPeepIdx = curPeep->prevSelectionPeepPtr[cliId];\n\n                            }\n                        }\n                    }\n                    else\n                    {\n                        printf(\"path finder busy..%d\\n\", gameState->mapSearchers[0].state);\n                    }\n                }\n\n\n            }\n            \n            //delete\n            if(BITGET(buttons, MouseButtonBits_PrimaryReleased) && (GUI_MOUSE_ON_GUI(gui) == 0) \n            && (gui->draggedOff == 0) && client->curTool == EditorTools_Delete)\n            {\n                ge_int2 world2DMouse;\n                world2DMouse.x = clientAction->intParameters[CAC_MouseStateChange_Param_WORLD_X_Q16];\n                world2DMouse.y = clientAction->intParameters[CAC_MouseStateChange_Param_WORLD_Y_Q16];\n\n\n\n                ge_int3 mapCoord;\n                int occluded;\n                GetMapTileCoordFromWorld2D(ALL_CORE_PARAMS_PASS, world2DMouse, &mapCoord, &occluded, client->mapZView+1);\n                \n                Print_GE_INT3(mapCoord);\n                MapDeleteTile(ALL_CORE_PARAMS_PASS, mapCoord);\n               \n\n            }\n\n            //create\n            if(BITGET(buttons, MouseButtonBits_PrimaryReleased) && (GUI_MOUSE_ON_GUI(gui) == 0) \n            && (gui->draggedOff == 0) && client->curTool == EditorTools_Create)\n            {\n                ge_int2 world2DMouse;\n                world2DMouse.x = clientAction->intParameters[CAC_MouseStateChange_Param_WORLD_X_Q16];\n                world2DMouse.y = clientAction->intParameters[CAC_MouseStateChange_Param_WORLD_Y_Q16];\n\n                ge_int3 mapCoord;\n                int occluded;\n                GetMapTileCoordFromWorld2D(ALL_CORE_PARAMS_PASS, world2DMouse, &mapCoord, &occluded, client->mapZView+1);\n                \n\n                Print_GE_INT3(mapCoord);\n                if (mapCoord.z >= 0 && mapCoord.z < MAPDEPTH-1) \n                {\n                    ge_int3 mapCoordSpawn;\n                    mapCoordSpawn.x = mapCoord.x;\n                    mapCoordSpawn.y = mapCoord.y;\n                    mapCoordSpawn.z = mapCoord.z+1;\n\n                    USE_POINTER cl_uint* tileData = &gameState->map.levels[mapCoordSpawn.z].data[mapCoordSpawn.x][mapCoordSpawn.y]; \n\n                    if(MapDataGetTile(*tileData) == MapTile_NONE)\n                    {\n\n                        offsetPtr machinePtr = Machine_CreateMachine(ALL_CORE_PARAMS_PASS);\n                        gameState->map.levels[mapCoordSpawn.z].machinePtr[mapCoordSpawn.x][mapCoordSpawn.y] = machinePtr;\n\n                        Machine* machine;\n                        OFFSET_TO_PTR(gameState->machines, machinePtr, machine);\n                        CL_CHECK_NULL(machine);\n\n                        machine->valid = true;\n                        machine->mapTilePtr = VECTOR3_CAST(mapCoordSpawn, offsetPtrShort3);\n                        machine->MachineDescPtr = client->curToolMachine;\n                        machine->recipePtr = gameState->validMachineRecipes[client->curToolMachine][0];\n\n\n                        MachineDesc* machDesc;\n                        OFFSET_TO_PTR(gameState->machineDescriptions, machine->MachineDescPtr, machDesc);\n                        CL_CHECK_NULL(machDesc);\n\n                        *tileData = machDesc->tile;\n                        BITSET(*tileData, MapTileFlags_Explored);\n                    }\n                    \n\n\n                    MapBuildTileView3Area(ALL_CORE_PARAMS_PASS, mapCoord.x, mapCoord.y);\n                    MapUpdateShadow(ALL_CORE_PARAMS_PASS, mapCoord.x, mapCoord.y);\n                    MapUpdateShadow(ALL_CORE_PARAMS_PASS, mapCoord.x + 1, mapCoord.y);\n                    MapUpdateShadow(ALL_CORE_PARAMS_PASS, mapCoord.x - 1, mapCoord.y);\n                    MapUpdateShadow(ALL_CORE_PARAMS_PASS, mapCoord.x, mapCoord.y + 1);\n                    MapUpdateShadow(ALL_CORE_PARAMS_PASS, mapCoord.x, mapCoord.y - 1);\n                }\n\n            }\n\n            //select tile\n            if(BITGET(buttons, MouseButtonBits_PrimaryReleased) && (GUI_MOUSE_ON_GUI(gui) == 0) \n            && (gui->draggedOff == 0) && client->curTool == EditorTools_Select)\n            {\n                ge_int2 world2DMouse;\n                world2DMouse.x = clientAction->intParameters[CAC_MouseStateChange_Param_WORLD_X_Q16];\n                world2DMouse.y = clientAction->intParameters[CAC_MouseStateChange_Param_WORLD_Y_Q16];\n\n                ge_int3 mapCoord;\n                int occluded;\n                GetMapTileCoordFromWorld2D(ALL_CORE_PARAMS_PASS, world2DMouse, &mapCoord, &occluded, client->mapZView+1);\n                \n                client->selectedMapCoord = INT3_TO_SHORT3(mapCoord);\n\n                offsetPtr machinePtr = gameState->map.levels[mapCoord.z].machinePtr[mapCoord.x][mapCoord.y];\n\n                if(machinePtr != OFFSET_NULL)\n                {\n                    Machine* machine;\n                    OFFSET_TO_PTR(gameState->machines, machinePtr, machine);\n\n                    printf(\"machine selected\\n\");\n                }\n                client->selectedMachine = machinePtr;\n\n            }\n\n\n        }\n\n\n\n       \n   \n    }\n\n    gameStateActions->numActions = 0;\n}\n\nge_int3 MapTileWholeToMapTileCenterQ16(int x, int y, int z)\n{\n    ge_int3 mapCoordsTileCenter_Q16 = (ge_int3){TO_Q16(x) + (TO_Q16(1) >> 1),\n    TO_Q16(y) + (TO_Q16(1) >> 1) ,\n    TO_Q16(z) + (TO_Q16(1) >> 1) };\n    return mapCoordsTileCenter_Q16;\n}\n\nvoid MapCreateSlope(ALL_CORE_PARAMS, int x, int y)\n{\n    ge_int3 world_Q16;\n    ge_int3 mapCoords2D_Q16 = MapTileWholeToMapTileCenterQ16(x, y, 0);\n\n\n    MapToWorld(mapCoords2D_Q16, &world_Q16);\n    ge_int2 world2d_Q16 = (ge_int2){world_Q16.x, world_Q16.y };\n\n    ge_int3 mapCoordWhole;//top tile\n    int occluded;\n    GetMapTileCoordFromWorld2D(ALL_CORE_PARAMS_PASS, world2d_Q16,\n        &mapCoordWhole, &occluded, MAPDEPTH - 1);\n\n    USE_POINTER cl_uint* tileData = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, mapCoordWhole);\n    //do 3x3 kernel test\n\n\n    //offsets[22] = (ge_int3){ 1, 1, 0 };\n    //offsets[23] = (ge_int3){ -1, 1, 0 };\n    //offsets[24] = (ge_int3){ 1, -1, 0 };\n    //offsets[25] = (ge_int3){ -1, -1, 0 };\n\n    USE_POINTER cl_uint* data22 = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, INT3_ADD(mapCoordWhole, staticData->directionalOffsets[22]));\n    MapTile tile22 = MapDataGetTile(*data22);\n    if (tile22 == MapTile_NONE)\n    {\n        BITSET(*tileData, MapTileFlags_LowCornerBTMRIGHT);\n    }\n    USE_POINTER cl_uint* data24 = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, INT3_ADD(mapCoordWhole, staticData->directionalOffsets[24]));\n    MapTile tile24 = MapDataGetTile(*data24);\n    if (tile24 == MapTile_NONE)\n    {\n        BITSET(*tileData, MapTileFlags_LowCornerTPRIGHT);\n    }\n    USE_POINTER cl_uint* data23 = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, INT3_ADD(mapCoordWhole, staticData->directionalOffsets[23]));\n    MapTile tile23 = MapDataGetTile(*data23);\n    if (tile23 == MapTile_NONE)\n    {\n        BITSET(*tileData, MapTileFlags_LowCornerBTMLEFT);\n    }\n    USE_POINTER cl_uint* data25 = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, INT3_ADD(mapCoordWhole, staticData->directionalOffsets[25]));\n    MapTile tile25 = MapDataGetTile(*data25);\n    if (tile25 == MapTile_NONE)\n    {\n        BITSET(*tileData, MapTileFlags_LowCornerTPLEFT);\n    }\n\n\n\n\n\n\n\n\n    //offsets[0] = (ge_int3){ 1, 0, 0 };\n    //offsets[1] = (ge_int3){ -1, 0, 0 };\n    //offsets[2] = (ge_int3){ 0, -1, 0 };\n    //offsets[3] = (ge_int3){ 0, 1, 0 };\n    //offsets[4] = (ge_int3){ 0, 0, 1 };\n    //offsets[5] = (ge_int3){ 0, 0, -1 };\n\n\n\n    USE_POINTER cl_uint* data0 = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, INT3_ADD(mapCoordWhole, staticData->directionalOffsets[0]));\n    MapTile tile0 = MapDataGetTile(*data0);\n    if (tile0 == MapTile_NONE)\n    {\n        BITSET(*tileData, MapTileFlags_LowCornerBTMRIGHT);\n        BITSET(*tileData, MapTileFlags_LowCornerTPRIGHT);\n    }\n    USE_POINTER cl_uint* data1 = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, INT3_ADD(mapCoordWhole, staticData->directionalOffsets[1]));\n    MapTile tile1 = MapDataGetTile(*data1);\n    if (tile1 == MapTile_NONE)\n    {\n        BITSET(*tileData, MapTileFlags_LowCornerBTMLEFT);\n        BITSET(*tileData, MapTileFlags_LowCornerTPLEFT);\n    }\n    USE_POINTER cl_uint* data2 = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, INT3_ADD(mapCoordWhole, staticData->directionalOffsets[2]));\n    MapTile tile2 = MapDataGetTile(*data2);\n    if (tile2 == MapTile_NONE)\n    {\n        BITSET(*tileData, MapTileFlags_LowCornerTPRIGHT);\n        BITSET(*tileData, MapTileFlags_LowCornerTPLEFT);\n    }\n    USE_POINTER cl_uint* data3 = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, INT3_ADD(mapCoordWhole, staticData->directionalOffsets[3]));\n    MapTile tile3 = MapDataGetTile(*data3);\n    if (tile3 == MapTile_NONE)\n    {\n        BITSET(*tileData, MapTileFlags_LowCornerBTMRIGHT);\n        BITSET(*tileData, MapTileFlags_LowCornerBTMLEFT);\n    }\n\n\n    \n    if(MapDataLowCornerCount(*tileData) == 4)\n        MapDataSetTile(tileData, MapTile_NONE);\n\n    #ifdef ALL_EXPLORED\n        BITSET(*tileData, MapTileFlags_Explored);\n    #endif\n\n}\n\nvoid MapCreate(ALL_CORE_PARAMS, int x, int y)\n{\n    //printf(\"Creating Map..\\n\");\n\n    int i = 0;\n\n            cl_int perlin_z_Q16 = cl_perlin_2d_Q16(TO_Q16(x), TO_Q16(y), TO_Q16(1) >> 6, 8, 0) ;\n\n            #ifdef FLATMAP\n            perlin_z_Q16 = TO_Q16(1) >> 1;\n            #endif\n\n           \n            for (int z = 0; z < MAPDEPTH; z++)\n            {\n                int zPerc_Q16 = DIV_PAD_Q16(TO_Q16(z), TO_Q16(MAPDEPTH));\n                int depthFromSurface = perlin_z_Q16 - zPerc_Q16;\n                MapTile tileType = MapTile_NONE;\n                if (zPerc_Q16 < perlin_z_Q16)\n                {\n                    tileType = MapTile_Rock;\n\n                    if (RandomRange(x * y * z, 0, 20) == 1)\n                    {\n                        tileType = MapTile_IronOre;\n                    }\n                    else if (RandomRange(x * y * z + 1, 0, 20) == 1)\n                    {\n                        tileType = MapTile_GoldOre;\n                    }\n                    else if (RandomRange(x * y * z + 2, 0, 100) == 1)\n                    {\n                        tileType = MapTile_DiamondOre;\n                    }\n\n                    if (z == 0)\n                    {\n                        tileType = MapTile_Lava;\n                    }\n                }\n                else\n                {\n                    tileType = MapTile_NONE;\n                }\n\n                //int depthPerc_Q16 = TO_Q16(2) + perlin_z_Q16 - zPerc_Q16;\n                //depthPerc_Q16 = DIV_PAD_Q16(depthPerc_Q16, TO_Q16(3));\n                ////PrintQ16(depthPerc_Q16*100);\n\n                //if (depthPerc_Q16 * 100 > TO_Q16(90))\n                //{\n                //    tileType = MapTile_DiamondOre;\n                //}\n                //else if (depthPerc_Q16 * 100 > TO_Q16(80))\n                //{\n                //    tileType = MapTile_CopperOre;\n                //}\n                //else if (depthPerc_Q16 * 100 > TO_Q16(75))\n                //{\n                //    tileType = MapTile_Rock;\n                //}\n                //else if (depthPerc_Q16 * 100 > TO_Q16(70))\n                //{\n                //    tileType = MapTile_Dirt;\n                //}\n                //else if (depthPerc_Q16 * 100 > TO_Q16(65))\n                //{\n                //    tileType = MapTile_DarkGrass;\n                //}\n\n                gameState->map.levels[z].machinePtr[x][y] = OFFSET_NULL;\n\n                USE_POINTER cl_uint* data = &gameState->map.levels[z].data[x][y];\n                *data = tileType;\n                #ifdef ALL_EXPLORED\n                BITSET(*data, MapTileFlags_Explored);\n                #endif\n\n                cl_uint cpy = *data;\n                BITBANK_SET_SUBNUMBER_UINT(&cpy, MapTileFlags_RotBit1, 2, RandomRange(x*y,0,4));\n                *data = cpy;\n\n                i++;\n            }\n\n\n\n\n\n}\nvoid MapCreate2(ALL_CORE_PARAMS, int x, int y)\n{\n    //MapCreateSlope(ALL_CORE_PARAMS_PASS, x, y);\n    MapBuildTileView(ALL_CORE_PARAMS_PASS, x, y);\n    MapUpdateShadow(ALL_CORE_PARAMS_PASS, x, y);\n\n}\n\nvoid StartupTests()\n{\n  printf(\"StartupTests Tests------------------------------------------------------:\\n\");\n  if(0){\n  printf(\"Speed Tests:\\n\");\n\n    int s = 0;\n    for (cl_ulong i = 0; i < 1000; i++)\n    {\n        ge_int3 a = (ge_int3){ TO_Q16(i), TO_Q16(2), TO_Q16(i*2) };\n        ge_int3 b = (ge_int3){ TO_Q16(i*2), TO_Q16(i), TO_Q16(i) };\n\n        ge_int3 c = GE_INT3_MUL_Q16(a, b);\n        s += c.x + c.y + c.z;\n    }\n\n  }\n  if(0)\n  {\n    fixedPointTests();\n  }\n\n  if(0)\n  {\n\n    printf(\"Triangle Tests\\n\");\n\n    ge_int3 point = (ge_int3){TO_Q16(1), TO_Q16(0), TO_Q16(1) };\n    Triangle3DHeavy tri;\n    tri.base.verts_Q16[0] = (ge_int3){ TO_Q16(-1), TO_Q16(-1), TO_Q16(0) };\n    tri.base.verts_Q16[1] = (ge_int3){ TO_Q16( 1), TO_Q16(-1), TO_Q16(0) };\n    tri.base.verts_Q16[2] = (ge_int3){ TO_Q16(-1), TO_Q16( 1), TO_Q16(0) };\n\n    Triangle3DMakeHeavy(&tri);\n\n    int dist;\n    ge_int3 closestPoint = Triangle3DHeavy_ClosestPoint(&tri, point, &dist);\n    printf(\"closest point: \");\n    Print_GE_INT3_Q16(closestPoint);\n    printf(\"Dist: \");\n    PrintQ16(dist);\n  }\n\n\n  if(0)\n  {\n    printf(\"Convex Hull Tests:\\n\");\n\n\n    ConvexHull hull;    \n    cl_int tileData = 1;\n    MapTileConvexHull_From_TileData(&hull, &tileData);\n\n    printf(\"convex hull tris:\\n\");\n    for (int i = 0; i < 14; i++)\n    {\n        Print_GE_INT3_Q16(hull.triangles[i].base.verts_Q16[0]);\n        Print_GE_INT3_Q16(hull.triangles[i].base.verts_Q16[1]);\n        Print_GE_INT3_Q16(hull.triangles[i].base.verts_Q16[2]);\n    }\n\n\n    ge_int3 p = (ge_int3){TO_Q16(0),TO_Q16(0),TO_Q16(2)};\n    ge_int3 nearestPoint = MapTileConvexHull_ClosestPointToPoint(&hull, p);\n\n    printf(\"nearest point: \");\n    Print_GE_INT3_Q16(nearestPoint);\n\n    p = (ge_int3){TO_Q16(0),TO_Q16(0),TO_Q16(0)};\n    cl_uchar inside = MapTileConvexHull_PointInside(&hull, p);\n    printf(\"should be inside(1): %d\\n\", inside);\n\n    p = (ge_int3){TO_Q16(0),TO_Q16(1),TO_Q16(0)};\n    inside = MapTileConvexHull_PointInside(&hull, p);\n    printf(\"should be outside(0): %d\\n\", inside);\n  }\n    printf(\"End Tests-----------------------------------------------------------------\\n\");\n\n}\n\n\n\n\n\n\n\n\nvoid MapExplorerSpawn(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER MapExplorerAgent* agent)\n{\n    ge_int3 randomTileLoc;\n    randomTileLoc.x = RandomRange((int)agent, 0, MAPDIM);\n    randomTileLoc.y = RandomRange((int)agent, 0, MAPDIM);\n    randomTileLoc.z = RandomRange((int)agent, 0, MAPDEPTH);\n\n\n    USE_POINTER cl_uint* data = MapGetDataPointerFromCoord(ALL_CORE_PARAMS_PASS, randomTileLoc);\n    if(MapDataGetTile(*data) == MapTile_NONE && BITGET(*data, MapTileFlags_Explored))\n    {\n        \n    }\n}\n\nvoid AStarPathStepsInit(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER AStarPathSteps* steps)\n{\n    for (int i = 0; i < ASTARPATHSTEPSSIZE; i++)\n    {\n        AStarInitPathNode(&gameState->paths.pathNodes[i]);\n    }\n\n    //paths initialize\n    gameState->paths.nextListIdx = 0;\n    for(int i = 0; i < ASTAR_MAX_PATHS; i++)\n        gameState->paths.pathStarts[i] = OFFSET_NULL;\n\n}\n\nvoid CLIENT_InitClientState(SynchronizedClientState* client)\n{\n    client->selectedMachine = OFFSET_NULL;\n    client->selectedPeepPrimary = OFFSET_NULL;\n}\n\n\nvoid CLIENT_InitClientStates(ALL_CORE_PARAMS)\n{\n    for(int i = 0; i < MAX_CLIENTS; i++)\n    {\n        SynchronizedClientState* client = &gameState->clientStates[i];\n        CLIENT_InitClientState(client);\n        SyncedGui* gui = &client->gui;\n\n        GuiState_Init(&gui->guiState);\n    }\n    GuiState_Init(&gameState->fakePassGui.guiState);\n}\n\n\n\nvoid MakeItemStrings(PARAM_GLOBAL_POINTER char* strings)\n{\n    //char a[ITEMTYPE_STRING_MAX_LENGTH] = \"Iron Dust\\0\";\n    //strings[0] = a;\n\n    //ItemTypeStrings[ITEMTYPE_STRING_MAX_LENGTH][ItemTypes_NUMITEMS];\n\n   // LOCAL_STR(a, \"Iron Dust\");\n\n\n    //strings[1] = '\\0';\n    //strings[1*ITEMTYPE_STRING_MAX_LENGTH] = \"Iron Dust\\0\";\n   // strings[2*ITEMTYPE_STRING_MAX_LENGTH] = \"Iron Bar\\0\";\n    //strings[3*ITEMTYPE_STRING_MAX_LENGTH] = \"Rock Dust\\0\";\n}\n\n\n__kernel void game_init_single(ALL_CORE_PARAMS)\n{\n    printf(\"Game Initializing...\\n\");\n\n\n\n\n    printf(\"Initializing StaticData Buffers..\\n\");\n    MakeCardinalDirectionOffsets(&staticData->directionalOffsets[0]);\n   // MakeItemStrings(staticData->ItemTypeStrings);\n\n\n\n    printf(\"Initializing GUI..\\n\");\n    GUI_INIT_STYLE(ALL_CORE_PARAMS_PASS);\n\n    printf(\"Initializing Default Client States..\\n\");\n    CLIENT_InitClientStates(ALL_CORE_PARAMS_PASS);\n\n\n\n    printf(\"Startup Tests..\\n\");\n    StartupTests();\n\n\n    printf(\"Creating Machines Types\\n\");\n    Machine_InitDescriptions(ALL_CORE_PARAMS_PASS);\n    printf(\"Creating Machine Recipes\\n\");\n    Machine_InitRecipes(ALL_CORE_PARAMS_PASS);\n    printf(\"Mapping Item Tiles\\n\");   \n    InitItemTypeTiles(ALL_CORE_PARAMS_PASS);\n\n    gameState->numClients = 1;\n    gameStateActions->pauseState = 0;\n    ThisClient(ALL_CORE_PARAMS_PASS)->mapZView = MAPDEPTH-1;\n    ThisClient(ALL_CORE_PARAMS_PASS)->mapZView_1 = 0;\n\n    for (int secx = 0; secx < SQRT_MAXSECTORS; secx++)\n    {\n        for (int secy = 0; secy < SQRT_MAXSECTORS; secy++)\n        {\n            gameState->sectors[secx][secy].ptr.x = secx;\n            gameState->sectors[secx][secy].ptr.y = secy;\n            gameState->sectors[secx][secy].lock = 0;\n            gameState->sectors[secx][secy].empty = true; \n            for(int j = 0; j < MAX_PEEPS_PER_SECTOR; j++)\n            {\n                gameState->sectors[secx][secy].peepPtrs[j] = OFFSET_NULL;\n            }\n        }\n    }\n    printf(\"Sectors Initialized.\\n\");\n\n\n\n\n    AStarSearch_BFS_Instantiate(&gameState->mapSearchers[0]);\n}\n\n__kernel void game_init_multi(ALL_CORE_PARAMS)\n{\n    int globalid = get_global_id(0);\n    int localid = get_local_id(0);\n\n    MapCreate(ALL_CORE_PARAMS_PASS, globalid % MAPDIM, globalid / MAPDIM);\n\n}\n__kernel void game_init_multi2(ALL_CORE_PARAMS)\n{\n    int globalid = get_global_id(0);\n    int localid = get_local_id(0);\n\n    MapCreate2(ALL_CORE_PARAMS_PASS, globalid % MAPDIM, globalid / MAPDIM);\n}\n__kernel void game_init_single2(ALL_CORE_PARAMS)\n{\n    AStarPathStepsInit(ALL_CORE_PARAMS_PASS, &gameState->paths);\n\n\n\n    printf(\"AStarTests:\\n\");\n    //printf(\"AStarTests1:\\n\");\n    //AStarSearch_BFS_Instantiate(&gameState->mapSearchers[0]);\n    ////test AStarHeap\n    //for (int x = 0; x < MAPDIM; x++)\n    //{\n    //    for (int y = 0; y < MAPDIM; y++)\n    //    {\n    //        AStarNode* node = &gameState->mapSearchers[0].details[x][y][0];\n    //        node->h_Q16 = x * y;\n    //        node->g_Q16 = x * y;\n    //        AStarOpenHeapInsert(&gameState->mapSearchers[0], node);\n    //    }\n    //}\n\n    //do\n    //{\n    //    AStarNode* node = AStarOpenHeapRemove(&gameState->mapSearchers[0]);\n    //    AStarPrintNodeStats(node);\n    //} while (gameState->mapSearchers[0].openHeapSize);\n\n    printf(\"AStarTests2:\\n\");\n    //test AStar\n\n    // ge_short3 start = (ge_short3){ 0,0,MAPDEPTH - 2 };\n    // ge_short3 end = (ge_short3){ MAPDIM - 1,MAPDIM - 1,1 };\n    // AStarSearch_BFS_Routine(ALL_CORE_PARAMS_PASS, &gameState->mapSearchers[0], start, end, CL_INTMAX);\n\n    printf(\"initializing peeps..\\n\");\n    const int spread = 500;\n    for (cl_uint p = 0; p < MAX_PEEPS; p++)\n    {\n        gameState->peeps[p].ptr = p;\n\n        gameState->peeps[p].physics.base.pos_Q16.x = RandomRange(p, -spread << 16, spread << 16);\n        gameState->peeps[p].physics.base.pos_Q16.y = RandomRange(p + 1, -spread << 16, spread << 16);\n\n\n        ge_int3 mapcoord;\n        ge_int2 world2D;\n        world2D.x = gameState->peeps[p].physics.base.pos_Q16.x;\n        world2D.y = gameState->peeps[p].physics.base.pos_Q16.y;\n        int occluded;\n\n        GetMapTileCoordFromWorld2D(ALL_CORE_PARAMS_PASS, world2D, &mapcoord, &occluded, MAPDEPTH - 1);\n        //printf(\"%d\\n\", mapcoord.z);\n        mapcoord.z += 2;\n        mapcoord = GE_INT3_TO_Q16(mapcoord);\n\n        ge_int3 worldCoord;\n        MapToWorld(mapcoord, &worldCoord);\n                \n        gameState->peeps[p].physics.base.pos_Q16.z = worldCoord.z;\n\n        ge_int3 pmap_Q16;\n        WorldToMap(gameState->peeps[p].physics.base.pos_Q16, &pmap_Q16);\n\n        gameState->peeps[p].posMap_Q16 = pmap_Q16;\n        gameState->peeps[p].lastGoodPosMap_Q16 = gameState->peeps[p].posMap_Q16;\n\n\n        gameState->peeps[p].mapCoord = VECTOR3_CAST(GE_INT3_WHOLE_Q16(gameState->peeps[p].posMap_Q16), offsetPtrShort3);\n        gameState->peeps[p].mapCoord_1 = OFFSET_NULL_SHORT_3D;\n\n\n        gameState->peeps[p].physics.shape.radius_Q16 = TO_Q16(1);\n        BITCLEAR(gameState->peeps[p].stateBasic.bitflags0, PeepState_BitFlags_deathState);\n        BITSET(gameState->peeps[p].stateBasic.bitflags0, PeepState_BitFlags_valid);\n        BITSET(gameState->peeps[p].stateBasic.bitflags0, PeepState_BitFlags_visible);\n        gameState->peeps[p].stateBasic.health = 10;\n        gameState->peeps[p].stateBasic.deathState = 0;\n        gameState->peeps[p].stateBasic.buriedGlitchState = 0;\n        gameState->peeps[p].stateBasic.aStarSearchPtr = OFFSET_NULL;\n\n        gameState->peeps[p].physics.base.v_Q16 = (ge_int3){ 0,0,0 };\n        gameState->peeps[p].physics.base.vel_add_Q16 = (ge_int3){ 0,0,0 };\n        gameState->peeps[p].physics.base.pos_post_Q16 = (ge_int3){ 0,0,0 };\n\n        gameState->peeps[p].sectorPtr = OFFSET_NULL_2D;\n\n        gameState->peeps[p].minDistPeepPtr = OFFSET_NULL;\n        gameState->peeps[p].minDistPeep_Q16 = (1 << 30);\n        gameState->peeps[p].physics.drive.target_x_Q16 = gameState->peeps[p].physics.base.pos_Q16.x;\n        gameState->peeps[p].physics.drive.target_y_Q16 = gameState->peeps[p].physics.base.pos_Q16.y;\n        gameState->peeps[p].physics.drive.drivingToTarget = 0;\n        gameState->peeps[p].physics.drive.targetPathNodeOPtr = OFFSET_NULL;\n\n\n        gameState->peeps[p].stateBasic.faction = RandomRange(p,0,4);\n\n\n        for (int i = 0; i < MAX_CLIENTS; i++)\n        {\n            gameState->clientStates[i].selectedPeepsLastIdx = OFFSET_NULL;\n\n\n            CL_CHECKED_ARRAY_SET(gameState->peeps[p].nextSelectionPeepPtr, MAX_CLIENTS, i, OFFSET_NULL)\n            CL_CHECKED_ARRAY_SET(gameState->peeps[p].prevSelectionPeepPtr, MAX_CLIENTS, i, OFFSET_NULL)\n        }\n\n    }\n\n    printf(\"Peeps Initialized.\\n\");\n\n\n\n\n\n\n    for (int i = 0; i < MAX_PARTICLES; i++)\n    {\n        USE_POINTER Particle* p = &gameState->particles[i];\n\n        p->pos.x = FloatToQMP32((float)RandomRange(i, -spread, spread));\n        p->pos.y = FloatToQMP32((float)RandomRange(i + 1, -spread, spread));\n\n        p->vel.x = FloatToQMP32(((float)RandomRange(i, -1000, 1000)) * 0.001f);\n        p->vel.y = FloatToQMP32(((float)RandomRange(i + 1, -1000, 1000)) * 0.001f);\n    }\n\n\n}\n\n\n\nvoid UpdateMapExplorer(ALL_CORE_PARAMS,  PARAM_GLOBAL_POINTER MapExplorerAgent* agent)\n{\n\n\n\n}\n\n\nvoid PeepDraw(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER Peep* peep)\n{\n    float3 drawColor;\n    float drawPosX = (float)((float)peep->physics.base.pos_Q16.x / (1 << 16));\n    float drawPosY = (float)((float)peep->physics.base.pos_Q16.y / (1 << 16));\n\n    float brightFactor = 0.6f;\n    if (peep->stateBasic.faction == 0)\n    {\n        drawColor.x = 0.0f;\n        drawColor.y = 1.0f;\n        drawColor.z = 1.0f;\n    }\n    else if(peep->stateBasic.faction == 1)\n    {\n        drawColor.x = 1.0f;\n        drawColor.y = 1.0f;\n        drawColor.z = 0.0f;\n    }\n    else if (peep->stateBasic.faction == 2)\n    {\n        drawColor.x = 0.0f;\n        drawColor.y = 1.0f;\n        drawColor.z = 0.0f;\n    }\n    else if (peep->stateBasic.faction == 3)\n    {\n        drawColor.x = 1.0f;\n        drawColor.y = 0.0f;\n        drawColor.z = 1.0f;\n    }\n\n    if (gameState->clientStates[gameStateActions->clientId].peepRenderSupport[peep->ptr].render_selectedByClient)\n    {\n        brightFactor = 1.0f;\n        gameState->clientStates[gameStateActions->clientId].peepRenderSupport[peep->ptr].render_selectedByClient = 0;\n    }\n    if ( BITGET(peep->stateBasic.bitflags0, PeepState_BitFlags_deathState) )\n    {\n        brightFactor = 0.6f;\n        drawColor.x = 0.5f;\n        drawColor.y = 0.5f;\n        drawColor.z = 0.5f;\n    }\n    if (!BITGET(peep->stateBasic.bitflags0, PeepState_BitFlags_visible))\n    {\n        drawPosX = 99999;\n        drawPosY = 99999;\n    }\n\n\n    if(peep->physics.base.pos_Q16.z < 0)\n    {   brightFactor = 1.0f;\n        drawColor.x = 1.0f;\n        drawColor.y = 0.0f;\n        drawColor.z = 0.0f;\n    }\n\n    if(peep->stateBasic.buriedGlitchState > 0)\n    { \n       \n        brightFactor = 1.0f;\n        drawColor.x = 0.0f;\n        drawColor.y = 1.0f;\n        drawColor.z = 0.0f;\n    }\n\n    peepVBOBuffer[peep->ptr * (PEEP_VBO_INSTANCE_SIZE / sizeof(float)) + 0] = drawPosX;\n    peepVBOBuffer[peep->ptr * (PEEP_VBO_INSTANCE_SIZE / sizeof(float)) + 1] = drawPosY;\n\n    peepVBOBuffer[peep->ptr * (PEEP_VBO_INSTANCE_SIZE / sizeof(float)) + 2] = drawColor.x * brightFactor;\n    peepVBOBuffer[peep->ptr * (PEEP_VBO_INSTANCE_SIZE / sizeof(float)) + 3] = drawColor.y * brightFactor;\n    peepVBOBuffer[peep->ptr * (PEEP_VBO_INSTANCE_SIZE / sizeof(float)) + 4] = drawColor.z * brightFactor;\n\n    peepVBOBuffer[peep->ptr * (PEEP_VBO_INSTANCE_SIZE / sizeof(float)) + 5] = peep->physics.base.CS_angle_rad;\n}\n\nvoid ParticleDraw(ALL_CORE_PARAMS, PARAM_GLOBAL_POINTER Particle* particle, cl_uint ptr)\n{\n    float3 drawColor;\n    float drawPosX = (float)((float)particle->pos.x.number / (1 << particle->pos.x.q));\n    float drawPosY = (float)((float)particle->pos.y.number / (1 << particle->pos.y.q));\n\n\n    drawColor.x = 1.0f;\n    drawColor.y = 1.0f;\n    drawColor.z = 1.0f;\n  \n\n    float brightFactor = 1.0f;\n\n    particleVBOBuffer[ptr * (PARTICLE_VBO_INSTANCE_SIZE / sizeof(float)) + 0] = drawPosX;\n    particleVBOBuffer[ptr * (PARTICLE_VBO_INSTANCE_SIZE / sizeof(float)) + 1] = drawPosY;\n\n    particleVBOBuffer[ptr * (PARTICLE_VBO_INSTANCE_SIZE / sizeof(float)) + 2] = drawColor.x * brightFactor;\n    particleVBOBuffer[ptr * (PARTICLE_VBO_INSTANCE_SIZE / sizeof(float)) + 3] = drawColor.y * brightFactor;\n    particleVBOBuffer[ptr * (PARTICLE_VBO_INSTANCE_SIZE / sizeof(float)) + 4] = drawColor.z * brightFactor;\n\n    particleVBOBuffer[ptr * (PARTICLE_VBO_INSTANCE_SIZE / sizeof(float)) + 5] = 0;\n}\n\n__kernel void game_updatepre1(ALL_CORE_PARAMS)\n{\n\n\n    // Get the index of the current element to be processed\n    int globalid = get_global_id(0);\n    int localid = get_local_id(0);\n    if (globalid < MAX_PEEPS) {\n        USE_POINTER Peep* p = &gameState->peeps[globalid]; \n        PeepPreUpdate2(ALL_CORE_PARAMS_PASS, p);\n    }\n\n    //reset some things\n    LINES_ClearAll(ALL_CORE_PARAMS_PASS);\n\n\n    \n\n    \n}\n\n\n__kernel void game_update(ALL_CORE_PARAMS)\n{\n\n    // Get the index of the current element to be processed\n    int globalid = get_global_id(0);\n    int localid = get_local_id(0);\n    \n\n    if (globalid < MAX_PEEPS) {\n        USE_POINTER Peep* p = &gameState->peeps[globalid]; \n        PeepUpdate(ALL_CORE_PARAMS_PASS, p);\n        PeepDraw(ALL_CORE_PARAMS_PASS, p);\n    }\n\n    if ( globalid < MAX_MACHINES)\n    {\n        USE_POINTER Machine* m = &gameState->machines[globalid]; \n        MachineUpdate(ALL_CORE_PARAMS_PASS, m);\n    }\n\n    if (globalid < MAX_PARTICLES) {\n        USE_POINTER Particle* p = &gameState->particles[globalid];\n        ParticleUpdate(ALL_CORE_PARAMS_PASS, p);\n        ParticleDraw(ALL_CORE_PARAMS_PASS, p, globalid);\n    }\n    \n\n\n\n    //update map view\n    if (ThisClient(ALL_CORE_PARAMS_PASS)->mapZView != ThisClient(ALL_CORE_PARAMS_PASS)->mapZView_1)\n    {\n        cl_uint chunkSize = (MAPDIM * MAPDIM) / GAME_UPDATE_WORKITEMS;\n\n        for (cl_ulong i = 0; i < chunkSize+1; i++)\n        {\n            cl_ulong xyIdx = globalid+GAME_UPDATE_WORKITEMS*i;\n\n            \n            if (xyIdx < (MAPDIM * MAPDIM))\n            {\n                MapBuildTileView(ALL_CORE_PARAMS_PASS, xyIdx % MAPDIM, xyIdx / MAPDIM);\n                MapUpdateShadow(ALL_CORE_PARAMS_PASS, xyIdx % MAPDIM, xyIdx / MAPDIM);\n            }\n        }\n    }\n\n    //update map explorers\n    USE_POINTER MapExplorerAgent* explorer = &gameState->explorerAgents[globalid];\n    UpdateMapExplorer(ALL_CORE_PARAMS_PASS, explorer);\n\n\n    \n\n}\n__kernel void game_update2(ALL_CORE_PARAMS)\n{\n\n\n    // Get the index of the current element to be processed\n    int globalid = get_global_id(0);\n    int localid = get_local_id(0);\n\n\n\n\n    //reset searches\n    USE_POINTER AStarSearch_BFS* search = &gameState->mapSearchers[0];\n    if((search->state == AStarPathFindingProgress_Failed) || (search->state == AStarPathFindingProgress_Finished))\n    {\n        cl_ulong chunks = (MAPDIM * MAPDIM * MAPDEPTH) / GAME_UPDATE_WORKITEMS;\n    \n        for (cl_ulong i = 0; i < chunks+1; i++)\n        {\n            cl_long xyzIdx = globalid+GAME_UPDATE_WORKITEMS*i;\n            \n            if (xyzIdx < (MAPDIM * MAPDIM* MAPDEPTH))\n            {\n\n                cl_long z = xyzIdx % MAPDEPTH;\n                cl_long y = (xyzIdx / MAPDEPTH) % MAPDIM;\n                cl_long x = xyzIdx / (MAPDIM * MAPDEPTH); \n\n\n\n\n                if(x > MAPDIM)\n                    printf(\"X>MAPDIM\\n\");\n                if(y > MAPDIM)\n                    printf(\"Y>MAPDIM\\n\");\n                if(z > MAPDEPTH)\n                    printf(\"Z>MAPDEPTH\\n\");\n\n                \n                AStarSearch_BFS_InstantiateParrallel(search, xyzIdx, x, y, z);\n            }\n        }\n    }\n\n\n\n}\n\n\n__kernel void game_post_update_single( ALL_CORE_PARAMS )\n{\n\n\n    //set selected peeps to highlight.\n    cl_uint curPeepIdx = gameState->clientStates[gameStateActions->clientId].selectedPeepsLastIdx;\n    PeepRenderSupport peepRenderSupport[MAX_PEEPS];\n    while (curPeepIdx != OFFSET_NULL)\n    {\n        USE_POINTER Peep* p = &gameState->peeps[curPeepIdx];\n        gameState->clientStates[gameStateActions->clientId].peepRenderSupport[curPeepIdx].render_selectedByClient = 1;\n                \n        curPeepIdx = p->prevSelectionPeepPtr[gameStateActions->clientId];\n    }\n\n\n\n\n\n    ThisClient(ALL_CORE_PARAMS_PASS)->mapZView_1 = ThisClient(ALL_CORE_PARAMS_PASS)->mapZView;\n    \n\n    USE_POINTER AStarSearch_BFS* search = &gameState->mapSearchers[0];\n    //update AStarPath Searchers\n    if(search->state == AStarPathFindingProgress_Searching)\n    {\n        AStarSearch_BFS_Continue(ALL_CORE_PARAMS_PASS, search, 100);\n    }\n    else if(search->state != AStarPathFindingProgress_Ready)\n    {\n       // printf(\"going to ready..\");\n        search->state = AStarPathFindingProgress_Ready;\n    }\n\n\n\n\n\n\n\n    //draw debug lines on paths\n    #ifdef DEBUG_PATHS\n    USE_POINTER AStarPathSteps* paths = &gameState->paths;\n    \n    //get a path\n    int pathIdx = 0;\n\n    offsetPtr pathStartOPtr = paths->pathStarts[pathIdx];\n    while(pathStartOPtr != OFFSET_NULL)\n    {\n        USE_POINTER AStarPathNode* node;\n        OFFSET_TO_PTR(paths->pathNodes, pathStartOPtr, node)\n\n        while(node != NULL && node->nextOPtr != OFFSET_NULL)\n        {\n            USE_POINTER AStarPathNode* nodeNext;\n            OFFSET_TO_PTR(paths->pathNodes, node->nextOPtr, nodeNext);\n            CL_CHECK_NULL(nodeNext);\n\n            ge_int3 worldCoord_Q16;\n            MapToWorld(( node->mapCoord_Q16 ), &worldCoord_Q16);\n\n            ge_int3 worldCoordNext_Q16;\n            MapToWorld(( nodeNext->mapCoord_Q16 ), &worldCoordNext_Q16);\n\n            \n            float2 worldCoordsFloat = (float2)(FIXED2FLTQ16(worldCoord_Q16.x),FIXED2FLTQ16(worldCoord_Q16.y));\n            float2 worldCoordsNextFloat = (float2)(FIXED2FLTQ16(worldCoordNext_Q16.x),FIXED2FLTQ16(worldCoordNext_Q16.y));\n\n         \n            LINES_DrawLineWorld(ALL_CORE_PARAMS_PASS, worldCoordsFloat, worldCoordsNextFloat, (float3)(RandomRange(pathIdx, 0, 1000)/1000.0f, RandomRange(pathIdx+1, 0, 1000)/1000.0f, 1.0f));\n\n\n            OFFSET_TO_PTR(paths->pathNodes, node->nextOPtr, node)\n        }\n\n        pathIdx++;\n        if(pathIdx >= ASTAR_MAX_PATHS)\n            pathIdx = 0;\n\n        pathStartOPtr = paths->pathStarts[pathIdx];\n    }\n    #endif\n}\n\n__kernel void game_preupdate_1(ALL_CORE_PARAMS) {\n\n\n    int globalid = get_global_id(0);\n\n    if (globalid >= GAME_UPDATE_WORKITEMS)\n        return;\n   \n\n    cl_uint chunkSize = (MAX_PEEPS) / GAME_UPDATE_WORKITEMS;\n\n    \n\n    for (cl_ulong pi = 0; pi < chunkSize+1; pi++)\n    {\n        cl_ulong idx = globalid+(GAME_UPDATE_WORKITEMS)*pi;\n        if (idx < MAX_PEEPS)\n        {\n            USE_POINTER Peep* peep;\n            CL_CHECKED_ARRAY_GET_PTR(gameState->peeps, MAX_PEEPS, idx, peep)\n            CL_CHECK_NULL(peep)\n            \n            cl_int x = ((peep->physics.base.pos_Q16.x >> 16) / (SECTOR_SIZE));\n            cl_int y = ((peep->physics.base.pos_Q16.y >> 16) / (SECTOR_SIZE));\n\n            peep->sectorPtr.x = x + SQRT_MAXSECTORS / 2;\n            peep->sectorPtr.y = y + SQRT_MAXSECTORS / 2;\n\n            MapSector* sector;\n            OFFSET_TO_PTR_2D(gameState->sectors, peep->sectorPtr, sector);\n            sector->empty = false;\n        }\n\n    }\n\n}\n\n\n__kernel void game_preupdate_2(ALL_CORE_PARAMS) {\n\n\n    // Get the index of the current element to be processed\n    int globalid = get_global_id(0);\n\n    if (globalid >= GAME_UPDATE_WORKITEMS)\n        return;\n   \n\n    cl_uint chunkSize = (SQRT_MAXSECTORS*SQRT_MAXSECTORS) / GAME_UPDATE_WORKITEMS;\n\n\n\n    for (cl_ulong pi = 0; pi < chunkSize+1; pi++)\n    {\n        cl_ulong idx = globalid+(GAME_UPDATE_WORKITEMS)*pi;\n        if (idx < SQRT_MAXSECTORS*SQRT_MAXSECTORS)\n        {\n            offsetPtr2 xy;\n            xy.x = idx % SQRT_MAXSECTORS;\n            xy.y = idx / SQRT_MAXSECTORS;\n\n            global volatile MapSector* mapSector;\n            OFFSET_TO_PTR_2D(gameState->sectors, xy, mapSector);\n            CL_CHECK_NULL(mapSector)\n\n            if(mapSector->empty)\n                continue;\n\n            //clear non-present peeps\n            for(int j = 0; j < MAX_PEEPS_PER_SECTOR; j++)\n            {\n                if(mapSector->peepPtrs[j] == OFFSET_NULL)\n                    continue;\n                USE_POINTER Peep* peep;\n                OFFSET_TO_PTR(gameState->peeps, mapSector->peepPtrs[j], peep)\n\n                if(!VECTOR2_EQUAL(peep->sectorPtr, xy))\n                {\n                    mapSector->peepPtrs[j] = OFFSET_NULL;\n                }\n            }\n\n\n\n            for(int i = mapSector->chunkStart; (i < mapSector->chunkStart + MAX_PEEPS/16) && i < MAX_PEEPS; i++)\n            {   \n                USE_POINTER Peep* peep;\n                CL_CHECKED_ARRAY_GET_PTR(gameState->peeps, MAX_PEEPS, i, peep)\n                CL_CHECK_NULL(peep)\n                \n                if(VECTOR2_EQUAL(peep->sectorPtr, xy) == 0)\n                    continue;\n\n                //check if its already in the list\n                if(mapSector->peepPtrs[peep->sectorListIdx] == i)\n                    continue;\n\n                peep->sectorListIdx = mapSector->ptrIterator;\n                mapSector->peepPtrs[mapSector->ptrIterator] = i;\n                mapSector->ptrIterator++;\n                if(mapSector->ptrIterator >= MAX_PEEPS_PER_SECTOR)\n                {\n                    mapSector->ptrIterator = 0;\n                }\n            }\n\n\n            mapSector->chunkStart += MAX_PEEPS/16;\n            if(mapSector->chunkStart >= MAX_PEEPS)\n                mapSector->chunkStart = 0;\n        }\n    }\n\n\n}\n\n\n__kernel void size_tests_kernel(PARAM_GLOBAL_POINTER SIZETESTSDATA* data)\n{\n    data->gameStateStructureSize = sizeof(GameState);\n    data->staticDataStructSize = sizeof(StaticData);\n\n    printf(\"SIZE_TESTS_KERNEL: sizeof(GameState): %ul\\n\", sizeof(GameState));\n    printf(\"SIZE_TESTS_KERNEL: sizeof(StaticData): %ul\\n\", sizeof(StaticData));\n\n}\n\n",
			"file": "openCL/clGame.c",
			"file_size": 166122,
			"file_write_time": 133111109785271381,
			"settings":
			{
				"buffer_size": 161140,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "8+8+32+32+32+32+32+17+21=214\n",
			"settings":
			{
				"buffer_size": 29,
				"line_ending": "Windows",
				"name": "8+8+32+32+32+32+32+17+21=214"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"insert",
					{
						"characters": "8+8+32"
					},
					"BgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAYAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					2,
					1,
					"insert",
					{
						"characters": "+32"
					},
					"AwAAAAYAAAAAAAAABwAAAAAAAAAAAAAABwAAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAkAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAGAAAAAAAAAAYAAAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					1,
					"insert",
					{
						"characters": "+32+32+32"
					},
					"CQAAAAkAAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAADQAAAAAAAAAAAAAADQAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAARAAAAAAAAAAAAAAARAAAAAAAAABIAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAJAAAAAAAAAAkAAAAAAAAAAAAAAAAA8L8"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAABIAAAAAAAAAEwAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASAAAAAAAAABIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "17+21"
					},
					"BQAAABMAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAVAAAAAAAAAAAAAAAVAAAAAAAAABYAAAAAAAAAAAAAABYAAAAAAAAAFwAAAAAAAAAAAAAAFwAAAAAAAAAYAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATAAAAAAAAABMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "=-21"
					},
					"BAAAABgAAAAAAAAAGQAAAAAAAAAAAAAAGQAAAAAAAAAaAAAAAAAAAAAAAAAaAAAAAAAAABsAAAAAAAAAAAAAABsAAAAAAAAAHAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAYAAAAAAAAABgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					2,
					"left_delete",
					null,
					"AgAAABsAAAAAAAAAGwAAAAAAAAABAAAAMRoAAAAAAAAAGgAAAAAAAAABAAAAMg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcAAAAAAAAABwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAABoAAAAAAAAAGwAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAaAAAAAAAAABoAAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					2,
					"left_delete",
					null,
					"AgAAABoAAAAAAAAAGgAAAAAAAAABAAAAMhkAAAAAAAAAGQAAAAAAAAABAAAALQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAbAAAAAAAAABsAAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "214"
					},
					"AwAAABkAAAAAAAAAGgAAAAAAAAAAAAAAGgAAAAAAAAAbAAAAAAAAAAAAAAAbAAAAAAAAABwAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAZAAAAAAAAABkAAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABwAAAAAAAAAHQAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcAAAAAAAAABwAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "openCL/DotProduct.cl",
			"settings":
			{
				"buffer_size": 979,
				"line_ending": "Windows"
			}
		},
		{
			"file": "openCL/DotProduct.o",
			"settings":
			{
				"buffer_size": 2257,
				"encoding": "Hexadecimal",
				"line_ending": "Unix"
			}
		},
		{
			"file": "openCL/DotProduct.bc",
			"settings":
			{
				"buffer_size": 7840,
				"encoding": "Hexadecimal",
				"line_ending": "Unix"
			}
		},
		{
			"file": "openCL/matvec.cl",
			"settings":
			{
				"buffer_size": 243,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAKgEAAAAAAAAAAAAAKgEAAAAAAAAqAQAAAAAAABMAAABrZXJuZWwgdm9pZCBrKCl7fSAK",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEwAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAA8wAAAAAAAAAAAAAA8wAAAAAAAADzAAAAAAAAACoBAAAvKiBIZWFkZXIgdG8gbWFrZSBDbGFuZyBjb21wYXRpYmxlIHdpdGggT3BlbkNMICovCiNkZWZpbmUgX19nbG9iYWwgX19hdHRyaWJ1dGVfXygoYWRkcmVzc19zcGFjZSgxKSkpCmludCBnZXRfZ2xvYmFsX2lkKGludCBpbmRleCk7CgovKiBUZXN0IGtlcm5lbCAqLwpfX2tlcm5lbCB2b2lkIHRlc3QoX19nbG9iYWwgZmxvYXQgKmluLCBfX2dsb2JhbCBmbG9hdCAqb3V0KQp7CiAgICBpbnQgaW5kZXggPSBnZXRfZ2xvYmFsX2lkKDApOwogICAgb3V0W2luZGV4XSA9IDMuMTQxNTlmICogaW5baW5kZXhdICsgaW5baW5kZXhdOwp9",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKgEAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "openCL/matvec.ll",
			"settings":
			{
				"buffer_size": 1194,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"paste",
					null,
					"AgAAAJAAAAAAAAAAowAAAAAAAAAAAAAAowAAAAAAAACjAAAAAAAAABYAAABudnB0eC11bmtub3duLW52aWRpYWNs",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApgAAAAAAAACQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAqgQAAAAAAAAAAAAAqgQAAAAAAACqBAAAAAAAAGMKAAA7IE1vZHVsZUlEID0gJ21hdHZlYy5jbCcKc291cmNlX2ZpbGVuYW1lID0gIm1hdHZlYy5jbCIKdGFyZ2V0IGRhdGFsYXlvdXQgPSAiZS1wOjMyOjMyLWk2NDo2NC1pMTI4OjEyOC12MTY6MTYtdjMyOjMyLW4xNjozMjo2NCIKdGFyZ2V0IHRyaXBsZSA9ICJudnB0eDY0LW52aWRpYS1jdWRhIgoKOyBGdW5jdGlvbiBBdHRyczogYXJnbWVtb25seSBjb252ZXJnZW50IG11c3Rwcm9ncmVzcyBub2ZyZWUgbm9pbmxpbmUgbm9yZWN1cnNlIG5vdW53aW5kIHdpbGxyZXR1cm4KZGVmaW5lIGRzb19sb2NhbCBzcGlyX2tlcm5lbCB2b2lkIEBtYXR2ZWNfbXVsdChwdHIgYWRkcnNwYWNlKDEpIG5vY2FwdHVyZSBub3VuZGVmIHJlYWRvbmx5IGFsaWduIDE2ICUwLCBwdHIgYWRkcnNwYWNlKDEpIG5vY2FwdHVyZSBub3VuZGVmIHJlYWRvbmx5IGFsaWduIDE2ICUxLCBwdHIgYWRkcnNwYWNlKDEpIG5vY2FwdHVyZSBub3VuZGVmIHdyaXRlb25seSBhbGlnbiA0ICUyKSBsb2NhbF91bm5hbWVkX2FkZHIgIzAgIWtlcm5lbF9hcmdfYWRkcl9zcGFjZSAhNSAha2VybmVsX2FyZ19hY2Nlc3NfcXVhbCAhNiAha2VybmVsX2FyZ190eXBlICE3ICFrZXJuZWxfYXJnX2Jhc2VfdHlwZSAhOCAha2VybmVsX2FyZ190eXBlX3F1YWwgITkgewogICU0ID0gdGFpbCBjYWxsIGkzMiBAX1oxM2dldF9nbG9iYWxfaWRqKGkzMiBub3VuZGVmIDApICMyCiAgJTUgPSBnZXRlbGVtZW50cHRyIGluYm91bmRzIDw0IHggZmxvYXQ+LCBwdHIgYWRkcnNwYWNlKDEpICUwLCBpMzIgJTQKICAlNiA9IGxvYWQgPDQgeCBmbG9hdD4sIHB0ciBhZGRyc3BhY2UoMSkgJTUsIGFsaWduIDE2LCAhdGJhYSAhMTAKICAlNyA9IGxvYWQgPDQgeCBmbG9hdD4sIHB0ciBhZGRyc3BhY2UoMSkgJTEsIGFsaWduIDE2LCAhdGJhYSAhMTAKICAlOCA9IHRhaWwgY2FsbCBmbG9hdCBAX1ozZG90RHY0X2ZTXyg8NCB4IGZsb2F0PiBub3VuZGVmICU2LCA8NCB4IGZsb2F0PiBub3VuZGVmICU3KSAjMgogICU5ID0gZ2V0ZWxlbWVudHB0ciBpbmJvdW5kcyBmbG9hdCwgcHRyIGFkZHJzcGFjZSgxKSAlMiwgaTMyICU0CiAgc3RvcmUgZmxvYXQgJTgsIHB0ciBhZGRyc3BhY2UoMSkgJTksIGFsaWduIDQsICF0YmFhICExMwogIHJldCB2b2lkCn0KCjsgRnVuY3Rpb24gQXR0cnM6IGNvbnZlcmdlbnQgbXVzdHByb2dyZXNzIG5vZnJlZSBub3Vud2luZCByZWFkbm9uZSB3aWxscmV0dXJuCmRlY2xhcmUgZHNvX2xvY2FsIGkzMiBAX1oxM2dldF9nbG9iYWxfaWRqKGkzMiBub3VuZGVmKSBsb2NhbF91bm5hbWVkX2FkZHIgIzEKCjsgRnVuY3Rpb24gQXR0cnM6IGNvbnZlcmdlbnQgbXVzdHByb2dyZXNzIG5vZnJlZSBub3Vud2luZCByZWFkbm9uZSB3aWxscmV0dXJuCmRlY2xhcmUgZHNvX2xvY2FsIGZsb2F0IEBfWjNkb3REdjRfZlNfKDw0IHggZmxvYXQ+IG5vdW5kZWYsIDw0IHggZmxvYXQ+IG5vdW5kZWYpIGxvY2FsX3VubmFtZWRfYWRkciAjMQoKYXR0cmlidXRlcyAjMCA9IHsgYXJnbWVtb25seSBjb252ZXJnZW50IG11c3Rwcm9ncmVzcyBub2ZyZWUgbm9pbmxpbmUgbm9yZWN1cnNlIG5vdW53aW5kIHdpbGxyZXR1cm4gImZyYW1lLXBvaW50ZXIiPSJhbGwiICJtaW4tbGVnYWwtdmVjdG9yLXdpZHRoIj0iMTI4IiAibm8tdHJhcHBpbmctbWF0aCI9InRydWUiICJzdGFjay1wcm90ZWN0b3ItYnVmZmVyLXNpemUiPSI4IiAidGFyZ2V0LWZlYXR1cmVzIj0iK3B0eDc1LCtzbV8yMCIgInVuaWZvcm0td29yay1ncm91cC1zaXplIj0idHJ1ZSIgfQphdHRyaWJ1dGVzICMxID0geyBjb252ZXJnZW50IG11c3Rwcm9ncmVzcyBub2ZyZWUgbm91bndpbmQgcmVhZG5vbmUgd2lsbHJldHVybiAiZnJhbWUtcG9pbnRlciI9ImFsbCIgIm5vLXRyYXBwaW5nLW1hdGgiPSJ0cnVlIiAic3RhY2stcHJvdGVjdG9yLWJ1ZmZlci1zaXplIj0iOCIgInRhcmdldC1mZWF0dXJlcyI9IitwdHg3NSwrc21fMjAiIH0KYXR0cmlidXRlcyAjMiA9IHsgY29udmVyZ2VudCBub3Vud2luZCByZWFkbm9uZSB3aWxscmV0dXJuIH0KCiFudnZtLmFubm90YXRpb25zID0gIXshMH0KIWxsdm0ubW9kdWxlLmZsYWdzID0gIXshMSwgITJ9CiFvcGVuY2wub2NsLnZlcnNpb24gPSAheyEzfQohbGx2bS5pZGVudCA9ICF7ITR9CgohMCA9ICF7cHRyIEBtYXR2ZWNfbXVsdCwgISJrZXJuZWwiLCBpMzIgMX0KITEgPSAhe2kzMiAxLCAhIndjaGFyX3NpemUiLCBpMzIgNH0KITIgPSAhe2kzMiA3LCAhImZyYW1lLXBvaW50ZXIiLCBpMzIgMn0KITMgPSAhe2kzMiAxLCBpMzIgMn0KITQgPSAheyEiY2xhbmcgdmVyc2lvbiAxNS4wLjIifQohNSA9ICF7aTMyIDEsIGkzMiAxLCBpMzIgMX0KITYgPSAheyEibm9uZSIsICEibm9uZSIsICEibm9uZSJ9CiE3ID0gIXshImZsb2F0NCoiLCAhImZsb2F0NCoiLCAhImZsb2F0KiJ9CiE4ID0gIXshImZsb2F0IF9fYXR0cmlidXRlX18oKGV4dF92ZWN0b3JfdHlwZSg0KSkpKiIsICEiZmxvYXQgX19hdHRyaWJ1dGVfXygoZXh0X3ZlY3Rvcl90eXBlKDQpKSkqIiwgISJmbG9hdCoifQohOSA9ICF7ISIiLCAhIiIsICEiIn0KITEwID0gIXshMTEsICExMSwgaTY0IDB9CiExMSA9ICF7ISJvbW5pcG90ZW50IGNoYXIiLCAhMTIsIGk2NCAwfQohMTIgPSAheyEiU2ltcGxlIEMvQysrIFRCQUEifQohMTMgPSAheyExNCwgITE0LCBpNjQgMH0KITE0ID0gIXshImZsb2F0IiwgITExLCBpNjQgMH0K",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAABjCgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "This thread has had me curious about using GPU's for game development.\n\nI've' working on a top-down simulation game that uses OpenCL as the primary language for ingame logic.  So far it has lead to some interesting design challenges.  \n\n1. All OpenCL game logic code uses fixed-point numbers for determinism.  primarily to make the addition of numbers across all threads deterministic. The result of A = B + C is the same as A = C + B.\n\n2. All OpenCL game structures use pointer offsets integers instead of native pointers to keeping gamestate coherent for transfer across network and saving/loading to disk.\n\n3. The Transfers TO/FROM CPU<->GPU are minimized by issuing rendering calls on the CPU and altering OpenGL VBO's on the GPU (OpenGL shared graphics objects) The only need for communication back to the CPU is for sound effects and other metadata.\n\n4. For lockstep networking - commands are sent to the GPU and then processed there.\n\nI have been able to simulate 35k units with simple fixedpoint physics and collision detection at < 32fps all determistically in sync across the network.  With A* Pathfinding and such as well.\n\n\n\n\n\n\n\n\n\n",
			"file": "/C/Users/casht/Desktop/notes_on_game.txt",
			"file_size": 1128,
			"file_write_time": 133069601700849835,
			"settings":
			{
				"buffer_size": 1143,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					11,
					1,
					"insert_snippet",
					{
						"contents": "'${0:$SELECTION}'"
					},
					"AgAAAEkAAAAAAAAASQAAAAAAAAADAAAAIGFtSQAAAAAAAABOAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEwAAAAAAAAASQAAAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "ve"
					},
					"AwAAAEoAAAAAAAAASwAAAAAAAAAAAAAASwAAAAAAAABLAAAAAAAAAAMAAAAgYW1LAAAAAAAAAEwAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEoAAAAAAAAATQAAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "issuing"
					},
					"BwAAAJYCAAAAAAAAlwIAAAAAAAAAAAAAlwIAAAAAAACYAgAAAAAAAAAAAACYAgAAAAAAAJkCAAAAAAAAAAAAAJkCAAAAAAAAmgIAAAAAAAAAAAAAmgIAAAAAAACbAgAAAAAAAAAAAACbAgAAAAAAAJwCAAAAAAAAAAAAAJwCAAAAAAAAnQIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJYCAAAAAAAAlgIAAAAAAAAAAAAAAADwvw"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJ0CAAAAAAAAngIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ0CAAAAAAAAnQIAAAAAAAAAAAAAAADwvw"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": " calls"
					},
					"BgAAAKcCAAAAAAAAqAIAAAAAAAAAAAAAqAIAAAAAAACpAgAAAAAAAAAAAACpAgAAAAAAAKoCAAAAAAAAAAAAAKoCAAAAAAAAqwIAAAAAAAAAAAAAqwIAAAAAAACsAgAAAAAAAAAAAACsAgAAAAAAAK0CAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKcCAAAAAAAApwIAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "openCL/dynamicDefines.h",
			"settings":
			{
				"buffer_size": 288,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAgAQAAI2RlZmluZSBQRUVQX1ZCT19JTlNUQU5DRV9TSVpFICgyNCkKI2RlZmluZSBQQVJUSUNMRV9WQk9fSU5TVEFOQ0VfU0laRSAoMjQpCiNkZWZpbmUgTUFYX1BFRVBTICgzMjc2OCkKI2RlZmluZSBNQVhfUEFSVElDTEVTICgxMDI0KQojZGVmaW5lIE1BUERJTSAoMjU2KQojZGVmaW5lIE1BUERFUFRIICgzMikKI2RlZmluZSBXQVJQU0laRSAoMzIpCiNkZWZpbmUgR0FNRV9VUERBVEVfV09SS0lURU1TICgxMzEwNzIpCiNkZWZpbmUgTUFYX0NMSUVOVFMgKDEwMjQpCiNkZWZpbmUgTUFQX1RJTEVfU0laRSAoNSkKAAAAAAAAAAAgAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgAQAAAAAAACABAAAAAAAAAAAAAAAA8L8"
				],
				[
					4,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAgAQAAI2RlZmluZSBQRUVQX1ZCT19JTlNUQU5DRV9TSVpFICgyNCkKI2RlZmluZSBQQVJUSUNMRV9WQk9fSU5TVEFOQ0VfU0laRSAoMjQpCiNkZWZpbmUgTUFYX1BFRVBTICgzMjc2OCkKI2RlZmluZSBNQVhfUEFSVElDTEVTICgxMDI0KQojZGVmaW5lIE1BUERJTSAoMjU2KQojZGVmaW5lIE1BUERFUFRIICgzMikKI2RlZmluZSBXQVJQU0laRSAoMzIpCiNkZWZpbmUgR0FNRV9VUERBVEVfV09SS0lURU1TICgxMzEwNzIpCiNkZWZpbmUgTUFYX0NMSUVOVFMgKDEwMjQpCiNkZWZpbmUgTUFQX1RJTEVfU0laRSAoNSkKAAAAAAAAAAAgAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgAQAAAAAAACABAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAAAgAQAAI2RlZmluZSBQRUVQX1ZCT19JTlNUQU5DRV9TSVpFICgyNCkKI2RlZmluZSBQQVJUSUNMRV9WQk9fSU5TVEFOQ0VfU0laRSAoMjQpCiNkZWZpbmUgTUFYX1BFRVBTICgzMjc2OCkKI2RlZmluZSBNQVhfUEFSVElDTEVTICgxMDI0KQojZGVmaW5lIE1BUERJTSAoMjU2KQojZGVmaW5lIE1BUERFUFRIICgzMikKI2RlZmluZSBXQVJQU0laRSAoMzIpCiNkZWZpbmUgR0FNRV9VUERBVEVfV09SS0lURU1TICgxMzEwNzIpCiNkZWZpbmUgTUFYX0NMSUVOVFMgKDEwMjQpCiNkZWZpbmUgTUFQX1RJTEVfU0laRSAoNSkKAAAAAAAAAAAgAQAAAAAAAAAAAAAAAAAAAAAAACABAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgAQAAAAAAACABAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "openCL/test.ll",
			"settings":
			{
				"buffer_size": 2341,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"BQAAAAAAAAAAAAAAAAAAAAAAAAAlCQAAOyBNb2R1bGVJRCA9ICd0ZXN0LmNsJwpzb3VyY2VfZmlsZW5hbWUgPSAidGVzdC5jbCIKdGFyZ2V0IGRhdGFsYXlvdXQgPSAiZS1tOnctcDI3MDozMjozMi1wMjcxOjMyOjMyLXAyNzI6NjQ6NjQtaTY0OjY0LWY4MDoxMjgtbjg6MTY6MzI6NjQtUzEyOCIKdGFyZ2V0IHRyaXBsZSA9ICJ4ODZfNjQtcGMtd2luZG93cy1tc3ZjMTkuMzMuMzE2MjkiCgo7IEZ1bmN0aW9uIEF0dHJzOiBjb252ZXJnZW50IG5vcmVjdXJzZSBub3Vud2luZCB1d3RhYmxlCmRlZmluZSBkc29fbG9jYWwgc3Bpcl9rZXJuZWwgdm9pZCBAdGVzdChwdHIgYWRkcnNwYWNlKDEpIG5vY2FwdHVyZSBub3VuZGVmIHJlYWRvbmx5IGFsaWduIDQgJTAsIHB0ciBhZGRyc3BhY2UoMSkgbm9jYXB0dXJlIG5vdW5kZWYgd3JpdGVvbmx5IGFsaWduIDQgJTEpIGxvY2FsX3VubmFtZWRfYWRkciAjMCAha2VybmVsX2FyZ19hZGRyX3NwYWNlICE1ICFrZXJuZWxfYXJnX2FjY2Vzc19xdWFsICE2ICFrZXJuZWxfYXJnX3R5cGUgITcgIWtlcm5lbF9hcmdfYmFzZV90eXBlICE3ICFrZXJuZWxfYXJnX3R5cGVfcXVhbCAhOCB7CiAgJTMgPSB0YWlsIGNhbGwgaTMyIEBnZXRfZ2xvYmFsX2lkKGkzMiBub3VuZGVmIDApICMzCiAgJTQgPSBzZXh0IGkzMiAlMyB0byBpNjQKICAlNSA9IGdldGVsZW1lbnRwdHIgaW5ib3VuZHMgZmxvYXQsIHB0ciBhZGRyc3BhY2UoMSkgJTAsIGk2NCAlNAogICU2ID0gbG9hZCBmbG9hdCwgcHRyIGFkZHJzcGFjZSgxKSAlNSwgYWxpZ24gNCwgIXRiYWEgITkKICAlNyA9IHRhaWwgY2FsbCBmbG9hdCBAbGx2bS5mbXVsYWRkLmYzMihmbG9hdCAlNiwgZmxvYXQgMHg0MDA5MjFGQTAwMDAwMDAwLCBmbG9hdCAlNikKICAlOCA9IGdldGVsZW1lbnRwdHIgaW5ib3VuZHMgZmxvYXQsIHB0ciBhZGRyc3BhY2UoMSkgJTEsIGk2NCAlNAogIHN0b3JlIGZsb2F0ICU3LCBwdHIgYWRkcnNwYWNlKDEpICU4LCBhbGlnbiA0LCAhdGJhYSAhOQogIHJldCB2b2lkCn0KCjsgRnVuY3Rpb24gQXR0cnM6IGNvbnZlcmdlbnQKZGVjbGFyZSBkc29fbG9jYWwgaTMyIEBnZXRfZ2xvYmFsX2lkKGkzMiBub3VuZGVmKSBsb2NhbF91bm5hbWVkX2FkZHIgIzEKCjsgRnVuY3Rpb24gQXR0cnM6IG11c3Rwcm9ncmVzcyBub2NhbGxiYWNrIG5vZnJlZSBub3N5bmMgbm91bndpbmQgcmVhZG5vbmUgc3BlY3VsYXRhYmxlIHdpbGxyZXR1cm4KZGVjbGFyZSBmbG9hdCBAbGx2bS5mbXVsYWRkLmYzMihmbG9hdCwgZmxvYXQsIGZsb2F0KSAjMgoKYXR0cmlidXRlcyAjMCA9IHsgY29udmVyZ2VudCBub3JlY3Vyc2Ugbm91bndpbmQgdXd0YWJsZSAiZnJhbWUtcG9pbnRlciI9Im5vbmUiICJtaW4tbGVnYWwtdmVjdG9yLXdpZHRoIj0iMCIgIm5vLXRyYXBwaW5nLW1hdGgiPSJ0cnVlIiAic3RhY2stcHJvdGVjdG9yLWJ1ZmZlci1zaXplIj0iOCIgInRhcmdldC1jcHUiPSJ4ODYtNjQiICJ0YXJnZXQtZmVhdHVyZXMiPSIrY3g4LCtmeHNyLCttbXgsK3NzZSwrc3NlMiwreDg3IiAidHVuZS1jcHUiPSJnZW5lcmljIiAidW5pZm9ybS13b3JrLWdyb3VwLXNpemUiPSJ0cnVlIiB9CmF0dHJpYnV0ZXMgIzEgPSB7IGNvbnZlcmdlbnQgImZyYW1lLXBvaW50ZXIiPSJub25lIiAibm8tdHJhcHBpbmctbWF0aCI9InRydWUiICJzdGFjay1wcm90ZWN0b3ItYnVmZmVyLXNpemUiPSI4IiAidGFyZ2V0LWNwdSI9Ing4Ni02NCIgInRhcmdldC1mZWF0dXJlcyI9IitjeDgsK2Z4c3IsK21teCwrc3NlLCtzc2UyLCt4ODciICJ0dW5lLWNwdSI9ImdlbmVyaWMiIH0KYXR0cmlidXRlcyAjMiA9IHsgbXVzdHByb2dyZXNzIG5vY2FsbGJhY2sgbm9mcmVlIG5vc3luYyBub3Vud2luZCByZWFkbm9uZSBzcGVjdWxhdGFibGUgd2lsbHJldHVybiB9CmF0dHJpYnV0ZXMgIzMgPSB7IGNvbnZlcmdlbnQgbm91bndpbmQgfQoKIWxsdm0ubW9kdWxlLmZsYWdzID0gIXshMCwgITEsICEyfQohb3BlbmNsLm9jbC52ZXJzaW9uID0gIXshM30KIWxsdm0uaWRlbnQgPSAheyE0fQoKITAgPSAhe2kzMiAxLCAhIndjaGFyX3NpemUiLCBpMzIgMn0KITEgPSAhe2kzMiA3LCAhIlBJQyBMZXZlbCIsIGkzMiAyfQohMiA9ICF7aTMyIDcsICEidXd0YWJsZSIsIGkzMiAyfQohMyA9ICF7aTMyIDEsIGkzMiAyfQohNCA9ICF7ISJjbGFuZyB2ZXJzaW9uIDE1LjAuMiJ9CiE1ID0gIXtpMzIgMCwgaTMyIDB9CiE2ID0gIXshIm5vbmUiLCAhIm5vbmUifQohNyA9ICF7ISJmbG9hdCoiLCAhImZsb2F0KiJ9CiE4ID0gIXshIiIsICEiIn0KITkgPSAheyExMCwgITEwLCBpNjQgMH0KITEwID0gIXshImZsb2F0IiwgITExLCBpNjQgMH0KITExID0gIXshIm9tbmlwb3RlbnQgY2hhciIsICExMiwgaTY0IDB9CiExMiA9ICF7ISJTaW1wbGUgQy9DKysgVEJBQSJ9CgAAAAAAAAAAJQkAAAAAAAAAAAAAAAAAAAAAAAAlCQAAAAAAAAAAAAAAAAAAAAAAACUJAAAAAAAAAAAAAAAAAAAAAAAAJQkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "openCL/peep.h",
			"settings":
			{
				"buffer_size": 12099,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					21,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAskAAAAAAAADCQAAAAAAAAAAAAADCQAAAAAAAANJAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAskAAAAAAAACyQAAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					1,
					"paste",
					null,
					"AQAAAA0kAAAAAAAAHSQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA0kAAAAAAAADSQAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					2,
					"left_delete",
					null,
					"AgAAABokAAAAAAAAGiQAAAAAAAADAAAAb25lGSQAAAAAAAAZJAAAAAAAAAEAAABO",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB0kAAAAAAAAGiQAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "Select,"
					},
					"BwAAABkkAAAAAAAAGiQAAAAAAAAAAAAAGiQAAAAAAAAbJAAAAAAAAAAAAAAbJAAAAAAAABwkAAAAAAAAAAAAABwkAAAAAAAAHSQAAAAAAAAAAAAAHSQAAAAAAAAeJAAAAAAAAAAAAAAeJAAAAAAAAB8kAAAAAAAAAAAAAB8kAAAAAAAAICQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABkkAAAAAAAAGSQAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					2,
					1,
					"revert",
					null,
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					2,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					2,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "GameGPUCompute.h",
			"settings":
			{
				"buffer_size": 4213,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"BgAAAAAAAAAAAAAAAAAAAAAAAABgEAAAI3ByYWdtYSBvbmNlCgojaWZkZWYgX19BUFBMRV9fCiNpbmNsdWRlIDxPcGVuQ0wvb3BlbmNsLmg+CiNlbHNlCiNpbmNsdWRlIDxDTC9jbC5oPgojaW5jbHVkZSA8Q0wvY2xfZ2wuaD4KI2luY2x1ZGUgPENML2NsX2dsX2V4dC5oPgojZW5kaWYKCgojaW5jbHVkZSA8bWVtb3J5PgojaW5jbHVkZSA8dmFyaWFudD4KI2luY2x1ZGUgPHN0cmluZz4KI2luY2x1ZGUgPHZlY3Rvcj4KCiNpbmNsdWRlICJhc3NlcnQuaCIKCgojaW5jbHVkZSAib3BlbkNML2NwdV9ncHVfc3RydWN0cy5oIgoKI2RlZmluZSBHQU1FQ09NUFVURV9NQVhfU09VUkNFX1NJWkUgKDB4MTAwMDAwKQojZGVmaW5lIENMX0hPU1RfRVJST1JfQ0hFQ0socmV0KSBpZiAocmV0ICE9IDApIHtwcmludGYoIltHQU1FQ09NUFVURV0gcmV0IGF0ICVkIGlzICVkXG4iLCBfX0xJTkVfXywgcmV0KTsgZXJyb3JTdGF0ZSA9IHRydWU7IGZmbHVzaChzdGRvdXQpOyBhc3NlcnQoMCk7IH0KCgoKI2RlZmluZSBXQVJQU0laRSAoNjQpCgoKdHlwZWRlZiAgc3RkOjp2YXJpYW50PGludCwgZmxvYXQsIHN0ZDo6c3RyaW5nPiBHUFVDb21waWxlVmFyaWFudDsKCgoKCgpjbGFzcyBHYW1lU3RhdGVfUG9pbnRlcgp7CnB1YmxpYzoKCUdhbWVTdGF0ZV9Qb2ludGVyKHVpbnQ2NF90IHNpemUpIHsgCgkJZGF0YSA9IG5ldyBpbnQ4X3Rbc2l6ZV07CgkJbWVtc2V0KGRhdGEsIDAsIHNpemUpOwoJfQoJfkdhbWVTdGF0ZV9Qb2ludGVyKCkgeyBkZWxldGVbXSBkYXRhOyB9Cgl2b2lkKiBkYXRhID0gbnVsbHB0cjsKfTsKCgoKCgpjbGFzcyBHYW1lR3JhcGhpY3M7CmNsYXNzIEdhbWVHUFVDb21wdXRlCnsKcHVibGljOgoKCglHYW1lR1BVQ29tcHV0ZSgpOwoJfkdhbWVHUFVDb21wdXRlKCk7CgoKCgl2b2lkIEFkZENMU291cmNlKHN0ZDo6c3RyaW5nIHBhdGgpOwoKCgl2b2lkIEFkZENvbXBpbGVEZWZpbml0aW9uKHN0ZDo6c3RyaW5nIG5hbWUsIEdQVUNvbXBpbGVWYXJpYW50IHZhbCk7CgoJdm9pZCBSdW5Jbml0Q29tcHV0ZTAoKTsKCXZvaWQgUnVuSW5pdENvbXB1dGUxKCk7Cgl2b2lkIFJ1bkluaXRDb21wdXRlMigpOwoKCXZvaWQgU3RhZ2UxKCk7CgoJdm9pZCBSZWFkRnVsbEdhbWVTdGF0ZSgpOwoJdm9pZCBXcml0ZUZ1bGxHYW1lU3RhdGUoKTsKCgoJdm9pZCBXcml0ZUdhbWVTdGF0ZUIoKTsKCglzdGQ6OnN0cmluZyBHYW1lU3RhdGVTdHJpbmcoaW50IHRpY2tJZHgpOwoJdm9pZCBTYXZlR2FtZVN0YXRlQmFzZSgpOwoJdm9pZCBTYXZlR2FtZVN0YXRlRGlmZihzdGQ6OnZlY3RvcjxjaGFyPiogZGF0YSxib29sIGRlbGV0ZUZpbGUgPSB0cnVlKTsKCXZvaWQgTG9hZEdhbWVTdGF0ZUZyb21EaWZmKGludCB0aWNraWR4KTsKCXZvaWQgTG9hZEdhbWVTdGF0ZUZyb21EaWZmKHN0ZDo6c3RyaW5nIGRpZmZGaWxlTmFtZSwgc3RkOjpzdHJpbmcgcmVzdWx0R2FtZVN0YXRlRmlsZU5hbWUpOwoJdm9pZCBMb2FkR2FtZVN0YXRlRnJvbURpZmYoc3RkOjp2ZWN0b3I8Y2hhcj4qIGRhdGEsICBpbnQgaWQpOwoKCWVudW0gVkVORE9SCgl7CgkJTlZJRElBLAoJCUFNRAoJfTsKCgljbF9jb250ZXh0IGNvbnRleHQ7CgoJY2xfZGV2aWNlX2lkIGRldmljZV9pZCA9IE5VTEw7CiAgICBjbF91aW50IHJldF9udW1fZGV2aWNlczsKICAgIGNsX3VpbnQgcmV0X251bV9wbGF0Zm9ybXM7CiAgICBpbnQgcGZpZHggPSAwOwoJY2xfcGxhdGZvcm1faWQqIHBsYXRmb3JtczsKCVZFTkRPUiB2ZW5kb3I7CgoJY2xfY29tbWFuZF9xdWV1ZSBjb21tYW5kX3F1ZXVlOwoJY2xfcHJvZ3JhbSBnYW1lUHJvZ3JhbTsKCWNsX3Byb2dyYW0gcmF5R3VpSGVhZGVyOwoJY2xfcHJvZ3JhbSBmdWxsUHJvZ3JhbTsKCWNsX3Byb2dyYW0gdGVzdFByb2dyYW07CgoJY2xfa2VybmVsIHNpemV0ZXN0c19rZXJuZWw7CgoJY2xfa2VybmVsIHByZXVwZGF0ZV9rZXJuZWw7CgljbF9rZXJuZWwgcHJldXBkYXRlX2tlcm5lbF8yOwoJY2xfa2VybmVsIGdhbWVfdXBkYXRlcHJlMV9rZXJuZWw7CgljbF9rZXJuZWwgdXBkYXRlX2tlcm5lbDsKCWNsX2tlcm5lbCB1cGRhdGUyX2tlcm5lbDsKCWNsX2tlcm5lbCBwb3N0X3VwZGF0ZV9zaW5nbGVfa2VybmVsOwoJY2xfa2VybmVsIGFjdGlvbl9rZXJuZWw7CgljbF9rZXJuZWwgaW5pdF9rZXJuZWw7CgljbF9rZXJuZWwgaW5pdF9rZXJuYWxfbXVsdGk7CgljbF9rZXJuZWwgaW5pdF9rZXJuYWxfbXVsdGkyOwoJY2xfa2VybmVsIGluaXRfa2VybmVsXzI7CgoKCglzdGQ6OnZlY3RvcjxjbF9rZXJuZWw+IGtlcm5lbHM7CgoJY2xfZXZlbnQgaW5pdEV2ZW50OwoJY2xfZXZlbnQgaW5pdE11bHRpRXZlbnQ7CgljbF9ldmVudCBpbml0TXVsdGlFdmVudDI7CgljbF9ldmVudCBpbml0MkV2ZW50OwoJY2xfZXZlbnQgcHJlVXBkYXRlRXZlbnQxOwoJY2xfZXZlbnQgcHJlVXBkYXRlRXZlbnQyOwoJY2xfZXZlbnQgdXBkYXRlcHJlMUV2ZW50OyAgICAKCWNsX2V2ZW50IHVwZGF0ZUV2ZW50OyAgCgljbF9ldmVudCB1cGRhdGUyRXZlbnQ7ICAgICAgCgljbF9ldmVudCBwb3N0dXBkYXRlRXZlbnQ7CgljbF9ldmVudCBhY3Rpb25FdmVudDsKCWNsX2V2ZW50IHJlYWRFdmVudDsKCWNsX2V2ZW50IHdyaXRlRXZlbnQ7ICAgIAoJCgoKCVNJWkVURVNUU0RBVEEgc3RydWN0U2l6ZXM7CgoJaW50IHdhcnBTaXplID0gMzI7CglpbnQgbWF4UGVlcHMgPSAxMDI0KjE2OwoJaW50IG1heFBhcnRpY2xlcyA9IDMyOwoJaW50IG1hcERpbSA9IDEwMjQ7CglpbnQgbWFwRGVwdGggPSAzMjsKCWludCBtYXBUaWxlU2l6ZSA9IDU7CiAgICBpbnQgbWF4R3VpUmVjdHMgPSAxMDI0OwoJaW50IG1heExpbmVzID0gMTAyNCo2NDsKCiAgICBsb25nIEdhbWVVcGRhdGVXb3JrSXRlbXMgOwogICAgc2l6ZV90IFdvcmtJdGVtc1sxXSAgOwoJc2l6ZV90IFdvcmtJdGVtc0luaXRNdWx0aVsxXSA7CglzaXplX3QgV29ya0l0ZW1zMVdhcnBbMV0gOwogICAgc2l6ZV90IFNpbmdsZUtlcm5lbFdvcmtJdGVtc1sxXTsKICAgIHNpemVfdCBTaW5nbGVLZXJuZWxXb3JrSXRlbXNQZXJXb3JrR3JvdXBbMV07CgoKCgljbF9tZW0gc2l6ZVRlc3RzX21lbV9vYmo7CgoJY2xfbWVtIHN5bmNoQ2xpZW50c19tZW1fb2JqOwoJY2xfbWVtIHN0YXRpY0RhdGFfbWVtX29iajsKCWNsX21lbSBnYW1lc3RhdGVfbWVtX29iajsKCWNsX21lbSBnYW1lc3RhdGVCX21lbV9vYmo7CgoJY2xfbWVtIGdyYXBoaWNzX3BlZXBzX21lbV9vYmo7CgljbF9tZW0gZ3JhcGhpY3NfcGFydGljbGVzX21lbV9vYmo7CgoJY2xfbWVtIGdyYXBoaWNzX21hcFRpbGUxVkJPX21lbV9vYmo7CgljbF9tZW0gZ3JhcGhpY3NfbWFwVGlsZTFBdHRyVkJPX21lbV9vYmo7CgljbF9tZW0gZ3JhcGhpY3NfbWFwVGlsZTFPdGhlckF0dHJWQk9fbWVtX29iajsKCgljbF9tZW0gZ3JhcGhpY3NfbWFwVGlsZTJWQk9fbWVtX29iajsKCWNsX21lbSBncmFwaGljc19tYXBUaWxlMkF0dHJWQk9fbWVtX29iajsKCWNsX21lbSBncmFwaGljc19tYXBUaWxlMk90aGVyQXR0clZCT19tZW1fb2JqOwoKCWNsX21lbSBncmFwaGljc19ndWlWQk9fb2JqOwoJY2xfbWVtIGdyYXBoaWNzX2xpbmVzVkJPX29iajsKCglzdGQ6OnZlY3RvcjxjbF9tZW0+IGdyYXBoaWNzT2JqZWN0czsKCgl2b2lkIEJ1aWxkS2VybmVsUnVuU2l6ZXMoKTsKCgoJc3RkOjpzaGFyZWRfcHRyPEdhbWVTdGF0ZV9Qb2ludGVyPiBnYW1lU3RhdGU7CglzdGQ6OnNoYXJlZF9wdHI8R2FtZVN0YXRlQWN0aW9ucz4gZ2FtZVN0YXRlQWN0aW9uczsKCUdhbWVHcmFwaGljcyogZ3JhcGhpY3MgPSBudWxscHRyOwoKCXN0ZDo6dmVjdG9yPHN0ZDo6cGFpcjxzdGQ6OnN0cmluZywgR1BVQ29tcGlsZVZhcmlhbnQ+PiBjb21waWxlRGVmaW5pdGlvbnM7CgoJYm9vbCBlcnJvclN0YXRlID0gZmFsc2U7CgljbF9pbnQgcmV0ID0gMDsKCglzdGQ6OnN0cmluZyBidWlsZFByZVByb2Nlc3NvclN0cmluZygpOwoJdm9pZCB3cml0ZVByZVByb2Nlc3NvckhlYWRlckZpbGUoKTsKCglzdGQ6OnN0cmluZyBjb21waWxlVmFyaWFudFN0cmluZyhHUFVDb21waWxlVmFyaWFudCB2YXJpYW50KTsKCgoJdm9pZCBBcXVpcmVBbGxHcmFwaGljc09iamVjdHMoKTsKCXZvaWQgUmVsZWFzZUFsbEdyYXBoaWNzT2JqZWN0cygpOwoKCgoJc3RkOjp2ZWN0b3I8dWludDY0X3Q+IGNsU291cmNlQ0hLU1VNUzsKICAgIHN0ZDo6dmVjdG9yPHN0ZDo6c3RyaW5nPiBjbFNvdXJjZVBhdGhzOwogICAgc3RkOjp2ZWN0b3I8c3RkOjp2ZWN0b3I8Y2hhcj4+IGNsU291cmNlczsKfTsKCgAAAAAAAAAAcxAAAAAAAAAAAAAAAAAAAAAAAABzEAAAAAAAAAAAAAAAAAAAAAAAAHUQAAAAAAAAAAAAAAAAAAAAAAAAdRAAAAAAAAAAAAAAAAAAAAAAAAB1EAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADcCgAAAAAAANwKAAAAAAAAAAAAAAAA8L8"
				]
			]
		}
	],
	"build_system": "Packages/MSBuild/MSBuild.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/MSBuild/MSBuild.sublime-build",
					""
				],
				[
					"Packages/MSBuild/MSBuild.sublime-build",
					"Parallel Build"
				],
				[
					"Packages/MSBuild/MSBuild.sublime-build",
					"Debug Configuration"
				],
				[
					"Packages/MSBuild/MSBuild.sublime-build",
					"Release Configuration"
				]
			],
			[
				"Packages/MSBuild/MSBuild.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Enable Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"Package Control: inst",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 508.0,
		"history":
		[
			"Install Package Control",
			"install package control",
			"instal package control",
			"Install Package Control"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/casht/repos/opencltest",
		"/C/Users/casht/repos/opencltest/.cmake",
		"/C/Users/casht/repos/opencltest/build",
		"/C/Users/casht/repos/opencltest/game",
		"/C/Users/casht/repos/opencltest/game/openCL"
	],
	"file_history":
	[
		"/C/Users/casht/repos/opencltest/build/game/Debug/openCL/clGame.bc",
		"/C/Users/casht/AppData/Roaming/Sublime Text 3/Packages/User/outline.sublime-settings",
		"/C/Users/casht/Downloads/coriander-6.0.0/bin/cuda_sample.cu",
		"/C/Users/casht/Downloads/raygui-master/examples/scroll_panel/scroll_panel.c",
		"/C/Users/casht/Downloads/raygui-master/examples/standalone/raygui_standalone.c",
		"/C/Users/casht/Downloads/raygui-master/examples/standalone/raygui_custom_backend.h",
		"/E/Repos/llvm-project/build/RelWithDebInfo/bin/test.spv",
		"/C/Users/casht/Downloads/oclInlinePTX/NVIDIA GPU Computing SDK/OpenCL/src/oclInlinePTX/inlinePTX.cl",
		"/E/Repos/llvm-project/build/RelWithDebInfo/bin/test.clcpp",
		"/C/Users/casht/Downloads/oclInlinePTX/NVIDIA GPU Computing SDK/OpenCL/src/oclInlinePTX/oclInlinePTX.cpp",
		"/C/Users/casht/repos/opencltest/game/openCL/test.spv",
		"/C/Users/casht/Desktop/FontData.csv",
		"/C/Users/casht/repos/opencltest/build/game/Debug/gamestatebase2.bin",
		"/C/Users/casht/repos/opencltest/build/game/Debug/tmp.diff",
		"/C/Users/casht/repos/opencltest/build/game/Debug/diff_tick_314.diff",
		"/C/Users/casht/repos/opencltest/build/game/Debug/diff_tick_208.diff",
		"/C/Users/casht/repos/opencltest/game/openCL/clRayGUI.h",
		"/C/Users/casht/repos/opencltest/game/openCL/clGUI.h",
		"/C/Users/casht/Downloads/raygui-master/src/raygui.h",
		"/C/Users/casht/repos/opencltest/angelscriptsdk/add_on/autowrapper/aswrappedcall.h",
		"/C/Users/casht/repos/opencltest/angelscriptsdk/add_on/autowrapper/generator/generateheader.cpp",
		"/C/Users/casht/repos/opencltest/opencltest/dynamicDefines.h",
		"/C/Users/casht/repos/opencltest/CMakeLists.txt",
		"/C/Users/casht/repos/opencltest/opencltest/CMakeLists.txt",
		"/C/Users/casht/repos/opencltest/zlib/CMakeLists.txt",
		"/C/Users/casht/repos/classes-sdsmt/Grad/RoboticControl EE552/FinalProject/main.py",
		"/C/Users/casht/repos/TechGame/rbfx/Source/Urho3D/Engine/Engine.cpp",
		"/C/Users/casht/Desktop/NVIDIA GPU Computing SDK/OpenCL/src/oclSimpleGL/oclSimpleGL.cpp",
		"/C/Users/casht/Desktop/NVIDIA GPU Computing SDK/OpenCL/src/oclSimpleGL/simpleGL.cl",
		"/C/Users/casht/repos/P2PGameTests/P2PGame/Source/SMUtilities/Private/GameNetworking.cpp",
		"/C/Users/casht/repos/TechGame/rbfx/Source/Urho3D/Core/Timer.cpp",
		"/C/Users/casht/repos/TechGame/rbfx/Source/Urho3D/Core/Timer.h",
		"/C/Users/casht/repos/P2PGameTests/P2PGame/Source/SMUtilities/Private/UObjectSimple.cpp",
		"/C/Users/casht/repos/P2PGameTests/P2PGame/Source/SMUtilities/Public/GameNetworking.h",
		"/C/Users/casht/repos/opencltest/SLikeNet/CMakeLists.txt",
		"/C/Users/casht/repos/opencltest/xdelta3/generate_build_files.sh",
		"/C/Users/casht/repos/opencltest/llvm-project/llvm/cmake/modules/LLVM-Config.cmake",
		"/C/Users/casht/repos/opencltest/llvm-project/clang/CMakeLists.txt",
		"/C/Users/casht/repos/P2PGameTests/P2PGame/Source/P2PGame/P2PGameBase.h",
		"/C/Users/casht/repos/P2PGameTests/P2PGame/Source/P2PGame/P2PGame.h",
		"/C/Users/casht/repos/P2PGameTests/P2PGame/Source/P2PGame/P2PSettingsManager.h",
		"/C/Users/casht/repos/TechGame/rbfx-newton/Source/NewtonPhysics/NewtonRigidBody.h",
		"/C/Users/casht/repos/TechGame/rbfx-newton/Source/NewtonPhysics/NewtonRigidBody.cpp",
		"/C/Users/casht/repos/TechGame/reRunCMake.sh",
		"/C/Users/casht/Downloads/08_geometry_rendering.cpp",
		"/C/Users/casht/repos/TechGame/rbfx/Source/Urho3D/Math/Random.h",
		"/C/Users/casht/repos/TechGame/rbfx/Source/Urho3D/Math/Random.cpp",
		"/C/Users/casht/repos/TechGame/rbfx/Source/Urho3D/Math/RandomEngine.h",
		"/C/Users/casht/repos/TechGame/rbfx/Source/Urho3D/Math/RandomEngine.cpp",
		"/C/Users/casht/Downloads/mwc64x/cl/mwc64x.cl",
		"/C/Users/casht/Downloads/mwc64x/test/test_rng.cpp",
		"/C/Users/casht/Downloads/mwc64x/cl/mwc64x/mwc64x_rng.cl",
		"/C/Users/casht/Downloads/mwc64x/cl/mwc64x/mwc64xvec4_rng.cl",
		"/C/Users/casht/Downloads/mwc64x/test/test_mwc64x.cl",
		"/C/Users/casht/Downloads/mwc64x/test/test_mwc64xvec2.cl",
		"/C/Users/casht/repos/opencltest/opencltest/random_generators/isaac.cl",
		"/C/Users/casht/repos/opencltest/opencltest/random_generators/kiss09.cl",
		"/C/Users/casht/repos/opencltest/opencltest/random_generators/kiss99.cl",
		"/C/Users/casht/repos/opencltest/opencltest/random_generators/lcg6432.cl",
		"/C/Users/casht/repos/opencltest/opencltest/random_generators/lcg12864.cl",
		"/C/Users/casht/repos/opencltest/opencltest/random_generators/xorshift1024.cl",
		"/C/Users/casht/repos/opencltest/opencltest/random_generators/tyche.cl",
		"/C/Users/casht/repos/TechGame/rbfx/Source/Urho3D/Input/Input.h",
		"/C/Users/casht/repos/newton-dynamics/newton-4.00/sdk/dCollision/ndBodyKinematic.cpp",
		"/C/Users/casht/repos/newton-dynamics/newton-4.00/sdk/dCollision/ndShapeInstance.h",
		"/C/Users/casht/repos/newton-dynamics/newton-4.00/sdk/dCollision/ndShapeInstance.cpp",
		"/C/Users/casht/repos/newton-dynamics/newton-4.00/sdk/dNewton/ndBodyDynamic.h",
		"/C/Users/casht/repos/newton-dynamics/newton-4.00/sdk/dNewton/ndBodyDynamic.cpp",
		"/C/Users/casht/repos/TechGame/rbfx-newton/Source/NewtonPhysics/NewtonPhysicsWorldDomainConversions.cpp",
		"/C/Users/casht/repos/TechGame/rbfx-newton/Source/NewtonPhysics/NewtonPhysicsWorldCasts.cpp",
		"/C/Users/casht/repos/TechGame/rbfx-newton/Source/NewtonPhysics/UrhoNewtonConversions.h",
		"/C/Users/casht/repos/TechGame/rbfx-newton/Source/NewtonPhysics/NewtonPhysicsWorld.cpp",
		"/C/Users/casht/repos/newton-dynamics/newton-4.00/CMakeLists.txt",
		"/C/Users/casht/repos/TechGame/rbfx-newton/CMakeLists.txt",
		"/C/Users/casht/repos/TechGame/rbfx-newton/ThirdParty/newton-dynamics/newton-4.00/CMakeLists.txt",
		"/E/Repos/UnrealEngine/Engine/Plugins/Developer/BlankPlugin/Source/BlankPlugin/Private/BlankPlugin.cpp",
		"/E/Repos/UnrealEngine/Engine/Plugins/Developer/BlankPlugin/Source/BlankPlugin/Public/IBlankPlugin.h",
		"/C/Users/casht/repos/opencltest/SDL2-2.0.22/include/SDL_opengl.h",
		"/C/Users/casht/repos/opencltest/opencltest/fixedpoint/fpsqrt.c",
		"/C/Users/casht/source/repos/opencltest/opencltest/random_generators/isaac.cl",
		"/E/Repos/UnrealEngine/Engine/Plugins/NewtonDynamics/Source/NewtonDynamics/NewtonDynamics.build.cs",
		"/E/Repos/UnrealEngine/Engine/Plugins/NewtonDynamics/NewtonDynamics.uplugin",
		"/C/Users/casht/Documents/Unreal Projects/MyProject3/MyProject3.uproject",
		"/E/Repos/UnrealEngine/Engine/Plugins/NewtonDynamics/Source/NewtonDynamics/Private/NewtonDynamics.cpp",
		"/E/Repos/UnrealEngine/Engine/Plugins/NewtonDynamics/Source/NewtonDynamics/Public/NewtonDynamics.h",
		"/E/Repos/UnrealEngine/Engine/Plugins/Developer/BlankPlugin/Source/BlankPlugin/BlankPlugin.Build.cs",
		"/C/Users/casht/Documents/Unreal Projects/MyProject3/Plugins/ImGui/UnrealImGui/ImGui.uplugin",
		"/C/Users/casht/repos/P2PGameTests/P2PGame/Source/P2PGame/P2PGame.cpp",
		"/C/Users/casht/repos/P2PGameTests/P2PGame/Source/P2PGame/P2PGameBase.cpp",
		"/E/Repos/UnrealEngine/Engine/Source/Programs/UnrealBuildTool/System/CppDependencyCache.cs",
		"/C/Users/casht/repos/P2PGameTests/P2PGame/Source/P2PGame/P2PSettingsManager.cpp",
		"/C/Users/casht/repos/P2PGameTests/P2PGame/Source/SMUtilities/Public/SMUtilities.h",
		"/C/Users/casht/repos/P2PGameTests/P2PGame/Source/SMUtilities/Public/UObjectSimple.h",
		"/C/Users/casht/repos/TechGame/CMakeLists.txt",
		"/C/Users/casht/repos/eurorack-beettweek/BomProcessing/Process_BOMS/PartAvailability.py",
		"/C/Users/casht/repos/Project1/Project1/GESceneGraph.cpp",
		"/C/Users/casht/repos/Project1/Project1/GESceneGraph.h",
		"/C/Users/casht/repos/Project1/Project1/GEMeshData.h",
		"/C/Users/casht/repos/Project1/Project1/GEConsole.h",
		"/C/Users/casht/repos/Project1/Project1/GEConsole.cpp",
		"/C/Users/casht/repos/Project1/Project1/GEEntityCamera.cpp",
		"/?wsl.localhost/Ubuntu-20.04/home/trevorcash/ros/catkin_ws/src/beginner_tutorials/package.xml",
		"/?wsl.localhost/Ubuntu-20.04/home/trevorcash/repos/TechGame/rbfx/Source/ThirdParty/CMakeLists.txt",
		"/C/Users/casht/repos/eurorack-beettweek/BomProcessing/Process_BOMS/BestBuys.csv",
		"/C/Users/casht/repos/eurorack-beettweek/BomProcessing/Process_BOMS/BestBuys",
		"/C/Users/casht/repos/eurorack-beettweek/Shipped Modules/ChangeLog_1_3.txt",
		"/C/Users/casht/repos/eurorack-beettweek/BomProcessing/Process_BOMS/InventoryQueries.py",
		"/C/Users/casht/repos/eurorack-beettweek/BomProcessing/Process_BOMS/subMatrixInventoryFetch.py",
		"/C/Users/casht/repos/eurorack-beettweek/BomProcessing/Process_BOMS/OctoPart.py",
		"/C/Users/casht/repos/open3dtest/camera_trajectory.py",
		"/C/Users/casht/repos/TechGame/.gitmodules",
		"/C/Users/casht/repos/TechGame/rbfx-newton/ThirdParty/newton-dynamics/newton-4.00/sdk/dNewton/CMakeLists.txt",
		"/?wsl.localhost/Ubuntu-20.04/home/trevorcash/repos/TechGame/reRunCMake.sh",
		"/?wsl.localhost/Ubuntu-20.04/home/trevorcash/repos/TechGame/rbfx/Source/Urho3D/MLControl/GymClient.h",
		"/?wsl.localhost/Ubuntu-20.04/home/trevorcash/repos/TechGame/build/builderrors.txt",
		"/C/Users/casht/repos/TechGame/reRunCMakeLinux.sh",
		"/?wsl.localhost/Ubuntu-20.04/home/trevorcash/repos/TechGame/rbfx-newton/Source/NewtonPhysics/NewtonModel.cpp",
		"/?wsl.localhost/Ubuntu-20.04/home/trevorcash/repos/TechGame/rbfx-newton/Source/NewtonPhysics/NewtonRigidBody.cpp",
		"/?wsl.localhost/Ubuntu-20.04/home/trevorcash/repos/TechGame/rbfx-newton/Source/NewtonPhysics/NewtonRigidBody.h",
		"/?wsl.localhost/Ubuntu-20.04/home/trevorcash/repos/TechGame/rbfx-newton/Source/NewtonPhysics/NewtonModel.h",
		"/?wsl.localhost/Ubuntu-20.04/home/trevorcash/repos/TechGame/rbfx-mathextras/MathExtras.h",
		"/?wsl.localhost/Ubuntu-20.04/home/trevorcash/repos/TechGame/rbfx-visualdebugger/VisualDebugger.h",
		"/?wsl.localhost/Ubuntu-20.04/home/trevorcash/repos/TechGame/rbfx-newton/Source/NewtonPhysics/UrhoNewtonApi.h",
		"/?wsl.localhost/Ubuntu-20.04/home/trevorcash/repos/TechGame/rbfx/Source/Urho3D/Engine/Engine.cpp",
		"/C/Users/casht/repos/Project1/Project1/GEEntityRenderable.cpp",
		"/?wsl.localhost/Ubuntu-20.04/home/trevorcash/repos/TechGame/build/Makefile",
		"/?wsl.localhost/Ubuntu-20.04/home/trevorcash/ros/catkin_ws/src/beginner_tutorials/launch/tutlemimic.launch",
		"/C/Users/casht/repos/classes-sdsmt/Grad/Math 551 Math Modeling/HW3.py"
	],
	"find":
	{
		"height": 33.0
	},
	"find_in_files":
	{
		"height": 113.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"color_scheme": "Packages/Agila Theme/Agila Cobalt.tmTheme",
							"current_file": "C:\\Users\\casht\\repos\\opencltest\\game\\openCL\\dynamicDefines.h",
							"outline_rename_mode": false,
							"symkeys":
							[
							],
							"symlist":
							[
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "openCL/clGame.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 161140,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 71554.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29,
						"regions":
						{
						},
						"selection":
						[
							[
								29,
								29
							]
						],
						"settings":
						{
							"auto_name": "8+8+32+32+32+32+32+17+21=214",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "openCL/DotProduct.cl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 979,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Lisp/Lisp.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "openCL/DotProduct.o",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2257,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Binary/Binary.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "openCL/DotProduct.bc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7840,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Binary/Binary.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "openCL/matvec.cl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 243,
						"regions":
						{
						},
						"selection":
						[
							[
								243,
								243
							]
						],
						"settings":
						{
							"syntax": "Packages/Lisp/Lisp.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "openCL/matvec.ll",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1194,
						"regions":
						{
						},
						"selection":
						[
							[
								1194,
								1194
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/C/Users/casht/Desktop/notes_on_game.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1143,
						"regions":
						{
						},
						"selection":
						[
							[
								1136,
								1136
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "openCL/dynamicDefines.h",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 288,
						"regions":
						{
						},
						"selection":
						[
							[
								288,
								288
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "openCL/test.ll",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2341,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "openCL/peep.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12099,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 10416.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "GameGPUCompute.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4213,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2706.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 33.0
	},
	"input":
	{
		"height": 47.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 168.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.hex_viewer_inspector":
	{
		"height": 296.0
	},
	"pinned_build_system": "Packages/MSBuild/MSBuild.sublime-build",
	"project": "/C/Users/casht/repos/opencltest/sublimeproject.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
		"last_automatic_layout":
		[
			[
				0,
				0,
				1,
				1
			]
		]
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 276.0,
	"status_bar_visible": true,
	"template_settings":
	{
		"max_columns": 1
	}
}
