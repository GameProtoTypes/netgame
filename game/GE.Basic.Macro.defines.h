
#define CL_CHECKED_ARRAY_SET(ARRAY, ARRAY_SIZE, INDEX, VALUE) { if(INDEX >= ARRAY_SIZE) {printf("[CL] OUT OF BOUNDS INDEX SET ON ARRAY "  #ARRAY " line %d \n", __LINE__); } else ARRAY[INDEX] = VALUE; }
#define CL_CHECKED_ARRAY_GET_PTR(ARRAY, ARRAY_SIZE, INDEX, POINTER) {if(INDEX >= ARRAY_SIZE) {printf("[CL] OUT OF BOUNDS INDEX %u ON ARRAY "  #ARRAY " line %d \n", #INDEX, __LINE__); POINTER = NULL;} else POINTER = &ARRAY[INDEX];}
#define CL_CHECK_NULL(POINTER){if(POINTER == NULL) {printf("[CL] " #POINTER " POINTER IS NULL line %d \n", __LINE__);}}
#define CL_THROW_ASSERT(){printf("[CL] ASSERT line %d \n", __LINE__);}




#define GE_OFFSET_TO_PTR(ARRAY, OFFSET, POINTER) { if(OFFSET == GE_OFFSET_NULL){  POINTER = NULL;} else POINTER = &(ARRAY[OFFSET]);  } 
#define GE_OFFSET_TO_PTR_2D(ARRAY2D, OFFSET2D, POINTER) { if((OFFSET2D.x == GE_OFFSET_NULL) || (OFFSET2D.y == GE_OFFSET_NULL)){ POINTER = NULL; } else POINTER = &(ARRAY2D[OFFSET2D.x][OFFSET2D.y]);} 
#define GE_OFFSET_TO_PTR_3D(ARRAY3D, OFFSET3D, POINTER) { if((OFFSET3D.x == GE_OFFSET_NULL) || (OFFSET3D.y == GE_OFFSET_NULL) || (OFFSET3D.z == GE_OFFSET_NULL)){ POINTER = NULL; } else POINTER = &(ARRAY3D[OFFSET3D.x][OFFSET3D.y][OFFSET3D.z]);} 

#define GE_CHECKED_OFFSET_TO_PTR_3D(ARRAY3D, ARRAYSIZE3D, OFFSET3D, POINTER) { if((OFFSET3D.x == GE_OFFSET_NULL) || (OFFSET3D.y == GE_OFFSET_NULL) || (OFFSET3D.z == GE_OFFSET_NULL)){ POINTER = NULL; } else { if(OFFSET3D.x >= ARRAYSIZE3D.x || OFFSET3D.y >= ARRAYSIZE3D.y || OFFSET3D.z >= ARRAYSIZE3D.z) { printf("[CL] OUT OF BOUNDS INDEX GET ON ARRAY "  #ARRAY3D " line %d \n", __LINE__); }   POINTER = &(ARRAY3D[OFFSET3D.x][OFFSET3D.y][OFFSET3D.z]);} } 



#define GE_BITSET(BITBANK, BITFLAG) {(BITBANK) |= (1 << BITFLAG);}
#define GE_BITCLEAR(BITBANK, BITFLAG) {(BITBANK) &= ~(1 << BITFLAG);}
#define GE_BITGET(BITBANK, BITFLAG) ((BITBANK) & (1 << BITFLAG))
#define GE_BITGET_MF(BITBANK, BITFLAG) (((BITBANK) & (1 << BITFLAG))>>BITFLAG)



//make a string as a local variable (non constant)
#define LOCAL_STR(STRNAME, STR) int STRNAME##_len=sizeof(STR); char STRNAME[sizeof(STR)+1] = STR;  STRNAME[sizeof(STR)] = '\0';  
#define LOCAL_STRL(STRNAME, STR, STRLEN) int STRLEN=sizeof(STR);  char STRNAME[sizeof(STR)+1] = STR;  STRNAME[sizeof(STR)] = '\0';  







